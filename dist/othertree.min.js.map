{"version":3,"sources":["lib/node_modules/browserify/node_modules/browser-pack/_prelude.js","lib/othertree.js","lib/bower_components/bytebuffer/dist/ByteBufferAB.js","lib/bower_components/long/dist/long.js","lib/bower_components/signalr/jquery.signalR.js","lib/lib/othertree.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_typeof","Symbol","iterator","obj","constructor","global","loadByteBuffer","Long","stringSource","charCodeAt","stringDestination","cs","ps","arguments","join","stringFromCharCode","apply","String","push","Array","prototype","ByteBuffer","capacity","littleEndian","noAssert","DEFAULT_CAPACITY","DEFAULT_ENDIAN","DEFAULT_NOASSERT","RangeError","this","buffer","EMPTY_BUFFER","ArrayBuffer","view","DataView","offset","markedOffset","limit","VERSION","LITTLE_ENDIAN","BIG_ENDIAN","ByteBufferPrototype","fromCharCode","allocate","concat","buffers","encoding","undefined","k","isByteBuffer","wrap","bi","bb","Uint8Array","set","subarray","type","fromBase64","fromHex","fromBinary","fromUTF8","fromDebug","TypeError","clone","byteOffset","byteLength","Object","toString","setUint8","writeInt8","value","relative","capacity0","resize","setInt8","writeByte","readInt8","getInt8","readByte","writeUint8","capacity1","readUint8","getUint8","writeInt16","capacity2","setInt16","writeShort","readInt16","getInt16","readShort","writeUint16","capacity3","setUint16","readUint16","getUint16","writeInt32","capacity4","setInt32","writeInt","readInt32","getInt32","readInt","writeUint32","capacity5","setUint32","readUint32","getUint32","writeInt64","fromNumber","fromString","capacity6","low","high","writeLong","readInt64","readLong","writeUint64","capacity7","readUint64","writeFloat32","capacity8","setFloat32","writeFloat","readFloat32","getFloat32","readFloat","writeFloat64","capacity9","setFloat64","writeDouble","readFloat64","getFloat64","readDouble","MAX_VARINT32_BYTES","calculateVarint32","zigZagEncode32","zigZagDecode32","writeVarint32","b","size","capacity10","writeVarint32ZigZag","readVarint32","temp","ioffset","err","readVarint32ZigZag","val","MAX_VARINT64_BYTES","calculateVarint64","part0","toInt","part1","shiftRightUnsigned","part2","zigZagEncode64","unsigned","toSigned","shiftLeft","xor","shiftRight","toUnsigned","zigZagDecode64","and","ONE","negate","writeVarint64","capacity11","writeVarint64ZigZag","readVarint64","start","fromBits","readVarint64ZigZag","writeCString","str","utfx","calculateUTF16asUTF8","capacity12","encodeUTF16toUTF8","bind","readCString","sd","decodeUTF8toUTF16","string","writeIString","capacity13","readIString","METRICS_CHARS","METRICS_BYTES","writeUTF8String","capacity14","writeString","calculateUTF8Chars","calculateUTF8Bytes","readUTF8String","metrics","decodeUTF8","cp","UTF8toUTF16","readString","writeVString","capacity15","readVString","append","source","capacity16","appendTo","target","assert","clear","copy","compact","begin","end","len","copyTo","targetOffset","sourceOffset","sourceLimit","targetRelative","ensureCapacity","current","fill","flip","mark","order","LE","BE","bigEndian","prepend","arrayView","diff","prependTo","printDebug","out","console","log","toDebug","remaining","reset","reverse","skip","slice","toBuffer","forceCopy","toArrayBuffer","toUTF8","toBase64","toHex","toBinary","toColumns","lxiv","aout","ain","encode","src","dst","decode","fail","c","t1","t2","test","btoa","atob","b64","cc","pt","charCode","columns","hex","asc","toUpperCase","ch","j","rs","ho","hm","hl","charAt","parseInt","isNaN","substring","isFinite","MAX_CODEPOINT","encodeUTF8","d","indexOf","name","UTF16toUTF8","c1","c2","calculateCodePoint","calculateUTF8","define","./..\\..\\long\\dist\\long.js",2,"factory","__isLong__","defineProperty","enumerable","configurable","isLong","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","ZERO","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","radix","p","radixToPower","Math","pow","result","min","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","UZERO","UONE","NEG_ONE","LongPrototype","toNumber","isZero","rem","isNegative","eq","radixLong","div","sub","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","isPositive","isOdd","isEven","equals","other","notEquals","neq","lessThan","compare","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","thisNeg","otherNeg","comp","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","divide","divisor","approx","res","halfThis","shr","shl","max","floor","log2","ceil","LN2","delta","approxRes","approxRem","modulo","mod","or","numBits","shru",3,"$","window","validateTransport","requestedTransport","connection","isArray","transport","_signalR","transports","splice","_","ieVersion","getDefaultPort","protocol","addDefaultPort","url","match","ConnectingMessageBuffer","drainCallback","that","tryBuffer","message","state","signalR","connectionState","connecting","drain","connected","shift","resources","nojQuery","noTransportOnInit","errorOnNegotiate","stoppedWhileLoading","stoppedWhileNegotiating","errorParsingNegotiateResponse","errorDuringStartRequest","stoppedDuringStartRequest","errorParsingStartResponse","invalidStartResponse","protocolIncompatible","sendFailed","parseFailed","longPollFailed","eventSourceFailedToConnect","eventSourceError","webSocketClosed","pingServerFailedInvalidResponse","pingServerFailed","pingServerFailedStatusCode","pingServerFailedParse","noConnectionTransport","webSocketsInvalidState","reconnectTimeout","reconnectWindowTimeout","_connection","_pageLoaded","document","readyState","_pageWindow","_negotiateAbortText","events","onStart","onStarting","onReceived","onError","onConnectionSlow","onReconnecting","onReconnect","onStateChanged","onDisconnect","ajaxDefaults","processData","timeout","async","_log","msg","logging","m","Date","toTimeString","debug","changeState","expectedState","newState","triggerHandler","oldState","isDisconnecting","disconnected","supportsKeepAlive","keepAliveData","activated","configureStopReconnectingTimeout","stopReconnectingTimeout","onReconnectTimeout","configuredStopReconnectingTimeout","format","disconnectTimeout","error","stop","reconnecting","setTimeout","stateChanged","data","clearTimeout","qs","fn","init","defaultContentType","version","matches","navigator","appName","exec","userAgent","parseFloat","context","transportError","replace","firefoxMajorVersion","configurePingInterval","config","onFail","pingIntervalId","pingInterval","setInterval","_logic","pingServer","hub","load","$connection","lastError","connectingMessageBuffer","lastMessageAt","getTime","lastActiveAt","beatInterval","beatHandle","totalTransportConnectTimeout","_parseResponse","response","json","parse","_originalJson","JSON","isCrossDomain","against","link","trim","location","createElement","href","host","ajaxDataType","contentType","clientProtocol","reconnectDelay","transportConnectTimeout","reconnectWindow","keepAliveWarnAt","options","callback","_initialize","waitForPageLoad","jsonp","deferred","_deferral","Deferred","parser","extend","deferredStartHandler","promise","resolve","baseUrl","wsProtocol","withCredentials","support","cors","initHandler","index","noTransportError","reject","transportName","onFallback","isFirefox11OrGreater","asyncAbort","monitorKeepAlive","startHeartbeat","onFailed","negotiateRequest","prepareQueryString","ajax","_error","statusText","success","protocolError","supportedTransports","appRelativeUrl","Url","id","ConnectionId","token","ConnectionToken","webSocketServerUrl","WebSocketServerUrl","pollTimeout","ConnectionTimeout","DisconnectTimeout","TransportConnectTimeout","KeepAliveTimeout","timeoutWarning","ProtocolVersion","each","key","TryWebSockets","inArray","starting","send","received","errorData","sendData","connectionSlow","reconnected","notifyServer","deferral","unbind","clearInterval","abort","stopMonitoringKeepAlive","messageId","groupsToken","noConflict","jQuery","beat","monitoring","checkIfAlive","transportLogic","markActive","timeElapsed","lostConnection","userNotified","getAjaxUrl","path","InitHandler","startRequested","startCompleted","connectionStopped","startAbortText","onSuccess","failCalled","transportTimeoutHandle","transportFailed","initReceived","tryAbortStartRequest","ajaxStart","wrappedError","xhrFields","dataType","xhr","addQs","Response","_error2","status","preparedUrl","encodeURIComponent","firstChar","appender","param","getUrl","poll","ajaxPost","random","maximizePersistentResponse","minPersistentResponse","MessageId","C","Messages","M","Initialized","S","ShouldReconnect","T","LongPollDelay","L","GroupsToken","G","updateGroups","stringifySend","stringify","ajaxSend","payload","triggerReceived","_error3","textStatus","ajaxAbort","rejectDeferred","triggerStartError","startRequest","_error4","tryInitialize","persistentResponse","onInitialized","processMessages","minData","markLastMessage","reconnectKeepAliveUpdate","verifyLastActive","isConnectedOrReconnecting","ensureReconnectingState","clearReconnectTimeout","reconnect","handleParseFailure","foreverFrame","count","connections","webSockets","socket","ex","opened","WebSocket","onopen","onclose","event","wasClean","reason","onmessage","isEmptyObject","close","clearReconnectAttemptTimeout","reconnectAttemptTimeoutHandle","serverSentEvents","timeOut","eventSource","EventSource","Message","OPEN","addEventListener","eventPhase","CLOSED","createFrame","frame","setAttribute","loadPreventer","loadingFixIntervalId","loadingFixInterval","attachedTo","prevent","tempFrame","body","appendChild","removeChild","cancel","iframeClearThreshold","frameId","frameLoadHandler","documentElement","attachEvent","receive","cw","frameMessageCount","contentWindow","contentDocument","firstChild","execCommand","parentNode","getConnection","started","longPolling","_fireConnect","noop","tryFailConnect","privateData","reconnectErrors","fireReconnected","instance","reconnectTimeoutId","maxFireReconnectedTimeout","pollXhr","pollTimeoutId","raiseReconnect","connect","polling","postData","onprogress","shouldReconnect","delay","responseText","makeEventName","eventNamespace","map","arr","fun","thisp","hasOwnProperty","getArgValue","isFunction","hasMembers","clearInvocationCallbacks","callbacks","invocationCallbacks","invocationCallbackId","callbackId","method","scope","E","hubProxy","hubConnection","hubName","settings","useDefaultPath","callbackMap","hasSubscriptions","on","eventName","toLowerCase","off","callbackSpace","invoke","methodName","args","makeArray","argValues","H","A","I","minResult","_maximizeHubResponse","State","Progress","notifyWith","Data","progressjQueryVersionLogged","jquery","StackTrace","IsHubException","ErrorData","rejectWith","resolveWith","Result","minHubResponse","R","P","Id","D","proxies","proxy","dataCallbackId","_maximizeClientHubInvocation","Method","Hub","Args","errData","origData","minClientHubInvocation","_registerSubscribedHubs","_subscribedToHubs","subscribedHubs","createHubProxy",4,"_interopRequireWildcard","__esModule","newObj","_classCallCheck","Constructor","_createClass","defineProperties","props","descriptor","writable","protoProps","staticProps","OtherTreeClient","_signalr","signalr","_bytebuffer","byteBuffer","tempBuffer","./..\\bower_components\\bytebuffer\\dist\\ByteBufferAB.js","./..\\bower_components\\signalr\\jquery.signalR.js"],"mappings":"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","file":"othertree.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';var _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol?\"symbol\":typeof obj;}; /*\n Copyright 2013-2014 Daniel Wirtz <dcode@dcode.io>\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */ /**\n * @license ByteBuffer.js (c) 2013-2014 Daniel Wirtz <dcode@dcode.io>\n * This version of ByteBuffer.js uses an ArrayBuffer as its backing buffer which is accessed through a DataView and is\n * compatible with modern browsers.\n * Released under the Apache License, Version 2.0\n * see: https://github.com/dcodeIO/ByteBuffer.js for details\n */ //\n(function(global){\"use strict\"; /**\n     * @param {function(new: Long, number, number, boolean=)=} Long\n     * @returns {function(new: ByteBuffer, number=, boolean=, boolean=)}}\n     * @inner\n     */function loadByteBuffer(Long){ /**\n         * Constructs a new ByteBuffer.\n         * @class The swiss army knife for binary data in JavaScript.\n         * @exports ByteBuffer\n         * @constructor\n         * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @expose\n         */var ByteBuffer=function ByteBuffer(capacity,littleEndian,noAssert){if(typeof capacity==='undefined')capacity=ByteBuffer.DEFAULT_CAPACITY;if(typeof littleEndian==='undefined')littleEndian=ByteBuffer.DEFAULT_ENDIAN;if(typeof noAssert==='undefined')noAssert=ByteBuffer.DEFAULT_NOASSERT;if(!noAssert){capacity=capacity|0;if(capacity<0)throw RangeError(\"Illegal capacity\");littleEndian=!!littleEndian;noAssert=!!noAssert;} /**\n             * Backing buffer.\n             * @type {!ArrayBuffer}\n             * @expose\n             */this.buffer=capacity===0?EMPTY_BUFFER:new ArrayBuffer(capacity); /**\n             * Data view to manipulate the backing buffer. Becomes `null` if the backing buffer has a capacity of `0`.\n             * @type {?DataView}\n             * @expose\n             */this.view=capacity===0?null:new DataView(this.buffer); /**\n             * Absolute read/write offset.\n             * @type {number}\n             * @expose\n             * @see ByteBuffer#flip\n             * @see ByteBuffer#clear\n             */this.offset=0; /**\n             * Marked offset.\n             * @type {number}\n             * @expose\n             * @see ByteBuffer#mark\n             * @see ByteBuffer#reset\n             */this.markedOffset=-1; /**\n             * Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.\n             * @type {number}\n             * @expose\n             * @see ByteBuffer#flip\n             * @see ByteBuffer#clear\n             */this.limit=capacity; /**\n             * Whether to use little endian byte order, defaults to `false` for big endian.\n             * @type {boolean}\n             * @expose\n             */this.littleEndian=typeof littleEndian!=='undefined'?!!littleEndian:false; /**\n             * Whether to skip assertions of offsets and values, defaults to `false`.\n             * @type {boolean}\n             * @expose\n             */this.noAssert=!!noAssert;}; /**\n         * ByteBuffer version.\n         * @type {string}\n         * @const\n         * @expose\n         */ByteBuffer.VERSION=\"3.5.5\"; /**\n         * Little endian constant that can be used instead of its boolean value. Evaluates to `true`.\n         * @type {boolean}\n         * @const\n         * @expose\n         */ByteBuffer.LITTLE_ENDIAN=true; /**\n         * Big endian constant that can be used instead of its boolean value. Evaluates to `false`.\n         * @type {boolean}\n         * @const\n         * @expose\n         */ByteBuffer.BIG_ENDIAN=false; /**\n         * Default initial capacity of `16`.\n         * @type {number}\n         * @expose\n         */ByteBuffer.DEFAULT_CAPACITY=16; /**\n         * Default endianess of `false` for big endian.\n         * @type {boolean}\n         * @expose\n         */ByteBuffer.DEFAULT_ENDIAN=ByteBuffer.BIG_ENDIAN; /**\n         * Default no assertions flag of `false`.\n         * @type {boolean}\n         * @expose\n         */ByteBuffer.DEFAULT_NOASSERT=false; /**\n         * A `Long` class for representing a 64-bit two's-complement integer value. May be `null` if Long.js has not been loaded\n         *  and int64 support is not available.\n         * @type {?Long}\n         * @const\n         * @see https://github.com/dcodeIO/Long.js\n         * @expose\n         */ByteBuffer.Long=Long||null; /**\n         * @alias ByteBuffer.prototype\n         * @inner\n         */var ByteBufferPrototype=ByteBuffer.prototype; // helpers\n/**\n         * @type {!ArrayBuffer}\n         * @inner\n         */var EMPTY_BUFFER=new ArrayBuffer(0); /**\n         * String.fromCharCode reference for compile-time renaming.\n         * @type {function(...number):string}\n         * @inner\n         */var stringFromCharCode=String.fromCharCode; /**\n         * Creates a source function for a string.\n         * @param {string} s String to read from\n         * @returns {function():number|null} Source function returning the next char code respectively `null` if there are\n         *  no more characters left.\n         * @throws {TypeError} If the argument is invalid\n         * @inner\n         */function stringSource(s){var i=0;return function(){return i<s.length?s.charCodeAt(i++):null;};} /**\n         * Creates a destination function for a string.\n         * @returns {function(number=):undefined|string} Destination function successively called with the next char code.\n         *  Returns the final string when called without arguments.\n         * @inner\n         */function stringDestination(){var cs=[],ps=[];return function(){if(arguments.length===0)return ps.join('')+stringFromCharCode.apply(String,cs);if(cs.length+arguments.length>1024)ps.push(stringFromCharCode.apply(String,cs)),cs.length=0;Array.prototype.push.apply(cs,arguments);};} /**\n         * Allocates a new ByteBuffer backed by a buffer of the specified capacity.\n         * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer}\n         * @expose\n         */ByteBuffer.allocate=function(capacity,littleEndian,noAssert){return new ByteBuffer(capacity,littleEndian,noAssert);}; /**\n         * Concatenates multiple ByteBuffers into one.\n         * @param {!Array.<!ByteBuffer|!ArrayBuffer|!Uint8Array|string>} buffers Buffers to concatenate\n         * @param {(string|boolean)=} encoding String encoding if `buffers` contains a string (\"base64\", \"hex\", \"binary\",\n         *  defaults to \"utf8\")\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order for the resulting ByteBuffer. Defaults\n         *  to {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values for the resulting ByteBuffer. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} Concatenated ByteBuffer\n         * @expose\n         */ByteBuffer.concat=function(buffers,encoding,littleEndian,noAssert){if(typeof encoding==='boolean'||typeof encoding!=='string'){noAssert=littleEndian;littleEndian=encoding;encoding=undefined;}var capacity=0;for(var i=0,k=buffers.length,length;i<k;++i){if(!ByteBuffer.isByteBuffer(buffers[i]))buffers[i]=ByteBuffer.wrap(buffers[i],encoding);length=buffers[i].limit-buffers[i].offset;if(length>0)capacity+=length;}if(capacity===0)return new ByteBuffer(0,littleEndian,noAssert);var bb=new ByteBuffer(capacity,littleEndian,noAssert),bi;var view=new Uint8Array(bb.buffer);i=0;while(i<k){bi=buffers[i++];length=bi.limit-bi.offset;if(length<=0)continue;view.set(new Uint8Array(bi.buffer).subarray(bi.offset,bi.limit),bb.offset);bb.offset+=length;}bb.limit=bb.offset;bb.offset=0;return bb;}; /**\n         * Tests if the specified type is a ByteBuffer.\n         * @param {*} bb ByteBuffer to test\n         * @returns {boolean} `true` if it is a ByteBuffer, otherwise `false`\n         * @expose\n         */ByteBuffer.isByteBuffer=function(bb){return (bb&&bb instanceof ByteBuffer)===true;}; /**\n         * Gets the backing buffer type.\n         * @returns {Function} `Buffer` for NB builds, `ArrayBuffer` for AB builds (classes)\n         * @expose\n         */ByteBuffer.type=function(){return ArrayBuffer;}; /**\n         * Wraps a buffer or a string. Sets the allocated ByteBuffer's {@link ByteBuffer#offset} to `0` and its\n         *  {@link ByteBuffer#limit} to the length of the wrapped data.\n         * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string|!Array.<number>} buffer Anything that can be wrapped\n         * @param {(string|boolean)=} encoding String encoding if `buffer` is a string (\"base64\", \"hex\", \"binary\", defaults to\n         *  \"utf8\")\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} A ByteBuffer wrapping `buffer`\n         * @expose\n         */ByteBuffer.wrap=function(buffer,encoding,littleEndian,noAssert){if(typeof encoding!=='string'){noAssert=littleEndian;littleEndian=encoding;encoding=undefined;}if(typeof buffer==='string'){if(typeof encoding==='undefined')encoding=\"utf8\";switch(encoding){case \"base64\":return ByteBuffer.fromBase64(buffer,littleEndian);case \"hex\":return ByteBuffer.fromHex(buffer,littleEndian);case \"binary\":return ByteBuffer.fromBinary(buffer,littleEndian);case \"utf8\":return ByteBuffer.fromUTF8(buffer,littleEndian);case \"debug\":return ByteBuffer.fromDebug(buffer,littleEndian);default:throw Error(\"Unsupported encoding: \"+encoding);}}if(buffer===null||(typeof buffer==='undefined'?'undefined':_typeof(buffer))!=='object')throw TypeError(\"Illegal buffer\");var bb;if(ByteBuffer.isByteBuffer(buffer)){bb=ByteBufferPrototype.clone.call(buffer);bb.markedOffset=-1;return bb;}if(buffer instanceof Uint8Array){ // Extract ArrayBuffer from Uint8Array\nbb=new ByteBuffer(0,littleEndian,noAssert);if(buffer.length>0){ // Avoid references to more than one EMPTY_BUFFER\nbb.buffer=buffer.buffer;bb.offset=buffer.byteOffset;bb.limit=buffer.byteOffset+buffer.length;bb.view=buffer.length>0?new DataView(buffer.buffer):null;}}else if(buffer instanceof ArrayBuffer){ // Reuse ArrayBuffer\nbb=new ByteBuffer(0,littleEndian,noAssert);if(buffer.byteLength>0){bb.buffer=buffer;bb.offset=0;bb.limit=buffer.byteLength;bb.view=buffer.byteLength>0?new DataView(buffer):null;}}else if(Object.prototype.toString.call(buffer)===\"[object Array]\"){ // Create from octets\nbb=new ByteBuffer(buffer.length,littleEndian,noAssert);bb.limit=buffer.length;for(i=0;i<buffer.length;++i){bb.view.setUint8(i,buffer[i]);}}else throw TypeError(\"Illegal buffer\"); // Otherwise fail\nreturn bb;}; // types/ints/int8\n/**\n         * Writes an 8bit signed integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.writeInt8=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");value|=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}offset+=1;var capacity0=this.buffer.byteLength;if(offset>capacity0)this.resize((capacity0*=2)>offset?capacity0:offset);offset-=1;this.view.setInt8(offset,value);if(relative)this.offset+=1;return this;}; /**\n         * Writes an 8bit signed integer. This is an alias of {@link ByteBuffer#writeInt8}.\n         * @function\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.writeByte=ByteBufferPrototype.writeInt8; /**\n         * Reads an 8bit signed integer.\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\n         * @returns {number} Value read\n         * @expose\n         */ByteBufferPrototype.readInt8=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+1>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);}var value=this.view.getInt8(offset);if(relative)this.offset+=1;return value;}; /**\n         * Reads an 8bit signed integer. This is an alias of {@link ByteBuffer#readInt8}.\n         * @function\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\n         * @returns {number} Value read\n         * @expose\n         */ByteBufferPrototype.readByte=ByteBufferPrototype.readInt8; /**\n         * Writes an 8bit unsigned integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.writeUint8=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");value>>>=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}offset+=1;var capacity1=this.buffer.byteLength;if(offset>capacity1)this.resize((capacity1*=2)>offset?capacity1:offset);offset-=1;this.view.setUint8(offset,value);if(relative)this.offset+=1;return this;}; /**\n         * Reads an 8bit unsigned integer.\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\n         * @returns {number} Value read\n         * @expose\n         */ByteBufferPrototype.readUint8=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+1>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);}var value=this.view.getUint8(offset);if(relative)this.offset+=1;return value;}; // types/ints/int16\n/**\n         * Writes a 16bit signed integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\n         * @throws {TypeError} If `offset` or `value` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @expose\n         */ByteBufferPrototype.writeInt16=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");value|=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}offset+=2;var capacity2=this.buffer.byteLength;if(offset>capacity2)this.resize((capacity2*=2)>offset?capacity2:offset);offset-=2;this.view.setInt16(offset,value,this.littleEndian);if(relative)this.offset+=2;return this;}; /**\n         * Writes a 16bit signed integer. This is an alias of {@link ByteBuffer#writeInt16}.\n         * @function\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\n         * @throws {TypeError} If `offset` or `value` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @expose\n         */ByteBufferPrototype.writeShort=ByteBufferPrototype.writeInt16; /**\n         * Reads a 16bit signed integer.\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\n         * @returns {number} Value read\n         * @throws {TypeError} If `offset` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @expose\n         */ByteBufferPrototype.readInt16=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+2>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+2+\") <= \"+this.buffer.byteLength);}var value=this.view.getInt16(offset,this.littleEndian);if(relative)this.offset+=2;return value;}; /**\n         * Reads a 16bit signed integer. This is an alias of {@link ByteBuffer#readInt16}.\n         * @function\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\n         * @returns {number} Value read\n         * @throws {TypeError} If `offset` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @expose\n         */ByteBufferPrototype.readShort=ByteBufferPrototype.readInt16; /**\n         * Writes a 16bit unsigned integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\n         * @throws {TypeError} If `offset` or `value` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @expose\n         */ByteBufferPrototype.writeUint16=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");value>>>=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}offset+=2;var capacity3=this.buffer.byteLength;if(offset>capacity3)this.resize((capacity3*=2)>offset?capacity3:offset);offset-=2;this.view.setUint16(offset,value,this.littleEndian);if(relative)this.offset+=2;return this;}; /**\n         * Reads a 16bit unsigned integer.\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\n         * @returns {number} Value read\n         * @throws {TypeError} If `offset` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @expose\n         */ByteBufferPrototype.readUint16=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+2>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+2+\") <= \"+this.buffer.byteLength);}var value=this.view.getUint16(offset,this.littleEndian);if(relative)this.offset+=2;return value;}; // types/ints/int32\n/**\n         * Writes a 32bit signed integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @expose\n         */ByteBufferPrototype.writeInt32=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");value|=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}offset+=4;var capacity4=this.buffer.byteLength;if(offset>capacity4)this.resize((capacity4*=2)>offset?capacity4:offset);offset-=4;this.view.setInt32(offset,value,this.littleEndian);if(relative)this.offset+=4;return this;}; /**\n         * Writes a 32bit signed integer. This is an alias of {@link ByteBuffer#writeInt32}.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @expose\n         */ByteBufferPrototype.writeInt=ByteBufferPrototype.writeInt32; /**\n         * Reads a 32bit signed integer.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {number} Value read\n         * @expose\n         */ByteBufferPrototype.readInt32=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+4>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);}var value=this.view.getInt32(offset,this.littleEndian);if(relative)this.offset+=4;return value;}; /**\n         * Reads a 32bit signed integer. This is an alias of {@link ByteBuffer#readInt32}.\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {number} Value read\n         * @expose\n         */ByteBufferPrototype.readInt=ByteBufferPrototype.readInt32; /**\n         * Writes a 32bit unsigned integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @expose\n         */ByteBufferPrototype.writeUint32=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");value>>>=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}offset+=4;var capacity5=this.buffer.byteLength;if(offset>capacity5)this.resize((capacity5*=2)>offset?capacity5:offset);offset-=4;this.view.setUint32(offset,value,this.littleEndian);if(relative)this.offset+=4;return this;}; /**\n         * Reads a 32bit unsigned integer.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {number} Value read\n         * @expose\n         */ByteBufferPrototype.readUint32=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+4>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);}var value=this.view.getUint32(offset,this.littleEndian);if(relative)this.offset+=4;return value;}; // types/ints/int64\nif(Long){ /**\n             * Writes a 64bit signed integer.\n             * @param {number|!Long} value Value to write\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n             * @returns {!ByteBuffer} this\n             * @expose\n             */ByteBufferPrototype.writeInt64=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value==='number')value=Long.fromNumber(value);else if(typeof value==='string')value=Long.fromString(value);else if(!(value&&value instanceof Long))throw TypeError(\"Illegal value: \"+value+\" (not an integer or Long)\");if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}if(typeof value==='number')value=Long.fromNumber(value);else if(typeof value==='string')value=Long.fromString(value);offset+=8;var capacity6=this.buffer.byteLength;if(offset>capacity6)this.resize((capacity6*=2)>offset?capacity6:offset);offset-=8;if(this.littleEndian){this.view.setInt32(offset,value.low,true);this.view.setInt32(offset+4,value.high,true);}else {this.view.setInt32(offset,value.high,false);this.view.setInt32(offset+4,value.low,false);}if(relative)this.offset+=8;return this;}; /**\n             * Writes a 64bit signed integer. This is an alias of {@link ByteBuffer#writeInt64}.\n             * @param {number|!Long} value Value to write\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n             * @returns {!ByteBuffer} this\n             * @expose\n             */ByteBufferPrototype.writeLong=ByteBufferPrototype.writeInt64; /**\n             * Reads a 64bit signed integer.\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n             * @returns {!Long}\n             * @expose\n             */ByteBufferPrototype.readInt64=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+8>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+8+\") <= \"+this.buffer.byteLength);}var value=this.littleEndian?new Long(this.view.getInt32(offset,true),this.view.getInt32(offset+4,true),false):new Long(this.view.getInt32(offset+4,false),this.view.getInt32(offset,false),false);if(relative)this.offset+=8;return value;}; /**\n             * Reads a 64bit signed integer. This is an alias of {@link ByteBuffer#readInt64}.\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n             * @returns {!Long}\n             * @expose\n             */ByteBufferPrototype.readLong=ByteBufferPrototype.readInt64; /**\n             * Writes a 64bit unsigned integer.\n             * @param {number|!Long} value Value to write\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n             * @returns {!ByteBuffer} this\n             * @expose\n             */ByteBufferPrototype.writeUint64=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value==='number')value=Long.fromNumber(value);else if(typeof value==='string')value=Long.fromString(value);else if(!(value&&value instanceof Long))throw TypeError(\"Illegal value: \"+value+\" (not an integer or Long)\");if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}if(typeof value==='number')value=Long.fromNumber(value);else if(typeof value==='string')value=Long.fromString(value);offset+=8;var capacity7=this.buffer.byteLength;if(offset>capacity7)this.resize((capacity7*=2)>offset?capacity7:offset);offset-=8;if(this.littleEndian){this.view.setInt32(offset,value.low,true);this.view.setInt32(offset+4,value.high,true);}else {this.view.setInt32(offset,value.high,false);this.view.setInt32(offset+4,value.low,false);}if(relative)this.offset+=8;return this;}; /**\n             * Reads a 64bit unsigned integer.\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n             * @returns {!Long}\n             * @expose\n             */ByteBufferPrototype.readUint64=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+8>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+8+\") <= \"+this.buffer.byteLength);}var value=this.littleEndian?new Long(this.view.getInt32(offset,true),this.view.getInt32(offset+4,true),true):new Long(this.view.getInt32(offset+4,false),this.view.getInt32(offset,false),true);if(relative)this.offset+=8;return value;};} // Long\n// types/floats/float32\n/**\n         * Writes a 32bit float.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.writeFloat32=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number')throw TypeError(\"Illegal value: \"+value+\" (not a number)\");if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}offset+=4;var capacity8=this.buffer.byteLength;if(offset>capacity8)this.resize((capacity8*=2)>offset?capacity8:offset);offset-=4;this.view.setFloat32(offset,value,this.littleEndian);if(relative)this.offset+=4;return this;}; /**\n         * Writes a 32bit float. This is an alias of {@link ByteBuffer#writeFloat32}.\n         * @function\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.writeFloat=ByteBufferPrototype.writeFloat32; /**\n         * Reads a 32bit float.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {number}\n         * @expose\n         */ByteBufferPrototype.readFloat32=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+4>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);}var value=this.view.getFloat32(offset,this.littleEndian);if(relative)this.offset+=4;return value;}; /**\n         * Reads a 32bit float. This is an alias of {@link ByteBuffer#readFloat32}.\n         * @function\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {number}\n         * @expose\n         */ByteBufferPrototype.readFloat=ByteBufferPrototype.readFloat32; // types/floats/float64\n/**\n         * Writes a 64bit float.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.writeFloat64=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number')throw TypeError(\"Illegal value: \"+value+\" (not a number)\");if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}offset+=8;var capacity9=this.buffer.byteLength;if(offset>capacity9)this.resize((capacity9*=2)>offset?capacity9:offset);offset-=8;this.view.setFloat64(offset,value,this.littleEndian);if(relative)this.offset+=8;return this;}; /**\n         * Writes a 64bit float. This is an alias of {@link ByteBuffer#writeFloat64}.\n         * @function\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.writeDouble=ByteBufferPrototype.writeFloat64; /**\n         * Reads a 64bit float.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n         * @returns {number}\n         * @expose\n         */ByteBufferPrototype.readFloat64=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+8>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+8+\") <= \"+this.buffer.byteLength);}var value=this.view.getFloat64(offset,this.littleEndian);if(relative)this.offset+=8;return value;}; /**\n         * Reads a 64bit float. This is an alias of {@link ByteBuffer#readFloat64}.\n         * @function\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n         * @returns {number}\n         * @expose\n         */ByteBufferPrototype.readDouble=ByteBufferPrototype.readFloat64; // types/varints/varint32\n/**\n         * Maximum number of bytes required to store a 32bit base 128 variable-length integer.\n         * @type {number}\n         * @const\n         * @expose\n         */ByteBuffer.MAX_VARINT32_BYTES=5; /**\n         * Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.\n         * @param {number} value Value to encode\n         * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT32_BYTES}\n         * @expose\n         */ByteBuffer.calculateVarint32=function(value){ // ref: src/google/protobuf/io/coded_stream.cc\nvalue=value>>>0;if(value<1<<7)return 1;else if(value<1<<14)return 2;else if(value<1<<21)return 3;else if(value<1<<28)return 4;else return 5;}; /**\n         * Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.\n         * @param {number} n Signed 32bit integer\n         * @returns {number} Unsigned zigzag encoded 32bit integer\n         * @expose\n         */ByteBuffer.zigZagEncode32=function(n){return ((n|=0)<<1^n>>31)>>>0; // ref: src/google/protobuf/wire_format_lite.h\n}; /**\n         * Decodes a zigzag encoded signed 32bit integer.\n         * @param {number} n Unsigned zigzag encoded 32bit integer\n         * @returns {number} Signed 32bit integer\n         * @expose\n         */ByteBuffer.zigZagDecode32=function(n){return n>>>1^-(n&1)|0; // // ref: src/google/protobuf/wire_format_lite.h\n}; /**\n         * Writes a 32bit base 128 variable-length integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted.\n         * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written\n         * @expose\n         */ByteBufferPrototype.writeVarint32=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");value|=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}var size=ByteBuffer.calculateVarint32(value),b;offset+=size;var capacity10=this.buffer.byteLength;if(offset>capacity10)this.resize((capacity10*=2)>offset?capacity10:offset);offset-=size; // ref: http://code.google.com/searchframe#WTeibokF6gE/trunk/src/google/protobuf/io/coded_stream.cc\nthis.view.setUint8(offset,b=value|0x80);value>>>=0;if(value>=1<<7){b=value>>7|0x80;this.view.setUint8(offset+1,b);if(value>=1<<14){b=value>>14|0x80;this.view.setUint8(offset+2,b);if(value>=1<<21){b=value>>21|0x80;this.view.setUint8(offset+3,b);if(value>=1<<28){this.view.setUint8(offset+4,value>>28&0x0F);size=5;}else {this.view.setUint8(offset+3,b&0x7F);size=4;}}else {this.view.setUint8(offset+2,b&0x7F);size=3;}}else {this.view.setUint8(offset+1,b&0x7F);size=2;}}else {this.view.setUint8(offset,b&0x7F);size=1;}if(relative){this.offset+=size;return this;}return size;}; /**\n         * Writes a zig-zag encoded 32bit base 128 variable-length integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted.\n         * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written\n         * @expose\n         */ByteBufferPrototype.writeVarint32ZigZag=function(value,offset){return this.writeVarint32(ByteBuffer.zigZagEncode32(value),offset);}; /**\n         * Reads a 32bit base 128 variable-length integer.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted.\n         * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read\n         *  and the actual number of bytes read.\n         * @throws {Error} If it's not a valid varint. Has a property `truncated = true` if there is not enough data available\n         *  to fully decode the varint.\n         * @expose\n         */ByteBufferPrototype.readVarint32=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+1>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);} // ref: src/google/protobuf/io/coded_stream.cc\nvar size=0,value=0>>>0,temp,ioffset;do {ioffset=offset+size;if(!this.noAssert&&ioffset>this.limit){var err=Error(\"Truncated\");err['truncated']=true;throw err;}temp=this.view.getUint8(ioffset);if(size<5)value|=(temp&0x7F)<<7*size>>>0;++size;}while((temp&0x80)===0x80);value=value|0; // Make sure to discard the higher order bits\nif(relative){this.offset+=size;return value;}return {\"value\":value,\"length\":size};}; /**\n         * Reads a zig-zag encoded 32bit base 128 variable-length integer.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted.\n         * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read\n         *  and the actual number of bytes read.\n         * @throws {Error} If it's not a valid varint\n         * @expose\n         */ByteBufferPrototype.readVarint32ZigZag=function(offset){var val=this.readVarint32(offset);if((typeof val==='undefined'?'undefined':_typeof(val))==='object')val[\"value\"]=ByteBuffer.zigZagDecode32(val[\"value\"]);else val=ByteBuffer.zigZagDecode32(val);return val;}; // types/varints/varint64\nif(Long){ /**\n             * Maximum number of bytes required to store a 64bit base 128 variable-length integer.\n             * @type {number}\n             * @const\n             * @expose\n             */ByteBuffer.MAX_VARINT64_BYTES=10; /**\n             * Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.\n             * @param {number|!Long} value Value to encode\n             * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT64_BYTES}\n             * @expose\n             */ByteBuffer.calculateVarint64=function(value){if(typeof value==='number')value=Long.fromNumber(value);else if(typeof value==='string')value=Long.fromString(value); // ref: src/google/protobuf/io/coded_stream.cc\nvar part0=value.toInt()>>>0,part1=value.shiftRightUnsigned(28).toInt()>>>0,part2=value.shiftRightUnsigned(56).toInt()>>>0;if(part2==0){if(part1==0){if(part0<1<<14)return part0<1<<7?1:2;else return part0<1<<21?3:4;}else {if(part1<1<<14)return part1<1<<7?5:6;else return part1<1<<21?7:8;}}else return part2<1<<7?9:10;}; /**\n             * Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.\n             * @param {number|!Long} value Signed long\n             * @returns {!Long} Unsigned zigzag encoded long\n             * @expose\n             */ByteBuffer.zigZagEncode64=function(value){if(typeof value==='number')value=Long.fromNumber(value,false);else if(typeof value==='string')value=Long.fromString(value,false);else if(value.unsigned!==false)value=value.toSigned(); // ref: src/google/protobuf/wire_format_lite.h\nreturn value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();}; /**\n             * Decodes a zigzag encoded signed 64bit integer.\n             * @param {!Long|number} value Unsigned zigzag encoded long or JavaScript number\n             * @returns {!Long} Signed long\n             * @expose\n             */ByteBuffer.zigZagDecode64=function(value){if(typeof value==='number')value=Long.fromNumber(value,false);else if(typeof value==='string')value=Long.fromString(value,false);else if(value.unsigned!==false)value=value.toSigned(); // ref: src/google/protobuf/wire_format_lite.h\nreturn value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();}; /**\n             * Writes a 64bit base 128 variable-length integer.\n             * @param {number|Long} value Value to write\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n             *  written if omitted.\n             * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.\n             * @expose\n             */ByteBufferPrototype.writeVarint64=function(value,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof value==='number')value=Long.fromNumber(value);else if(typeof value==='string')value=Long.fromString(value);else if(!(value&&value instanceof Long))throw TypeError(\"Illegal value: \"+value+\" (not an integer or Long)\");if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}if(typeof value==='number')value=Long.fromNumber(value,false);else if(typeof value==='string')value=Long.fromString(value,false);else if(value.unsigned!==false)value=value.toSigned();var size=ByteBuffer.calculateVarint64(value),part0=value.toInt()>>>0,part1=value.shiftRightUnsigned(28).toInt()>>>0,part2=value.shiftRightUnsigned(56).toInt()>>>0;offset+=size;var capacity11=this.buffer.byteLength;if(offset>capacity11)this.resize((capacity11*=2)>offset?capacity11:offset);offset-=size;switch(size){case 10:this.view.setUint8(offset+9,part2>>>7&0x01);case 9:this.view.setUint8(offset+8,size!==9?part2|0x80:part2&0x7F);case 8:this.view.setUint8(offset+7,size!==8?part1>>>21|0x80:part1>>>21&0x7F);case 7:this.view.setUint8(offset+6,size!==7?part1>>>14|0x80:part1>>>14&0x7F);case 6:this.view.setUint8(offset+5,size!==6?part1>>>7|0x80:part1>>>7&0x7F);case 5:this.view.setUint8(offset+4,size!==5?part1|0x80:part1&0x7F);case 4:this.view.setUint8(offset+3,size!==4?part0>>>21|0x80:part0>>>21&0x7F);case 3:this.view.setUint8(offset+2,size!==3?part0>>>14|0x80:part0>>>14&0x7F);case 2:this.view.setUint8(offset+1,size!==2?part0>>>7|0x80:part0>>>7&0x7F);case 1:this.view.setUint8(offset,size!==1?part0|0x80:part0&0x7F);}if(relative){this.offset+=size;return this;}else {return size;}}; /**\n             * Writes a zig-zag encoded 64bit base 128 variable-length integer.\n             * @param {number|Long} value Value to write\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n             *  written if omitted.\n             * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.\n             * @expose\n             */ByteBufferPrototype.writeVarint64ZigZag=function(value,offset){return this.writeVarint64(ByteBuffer.zigZagEncode64(value),offset);}; /**\n             * Reads a 64bit base 128 variable-length integer. Requires Long.js.\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n             *  read if omitted.\n             * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and\n             *  the actual number of bytes read.\n             * @throws {Error} If it's not a valid varint\n             * @expose\n             */ByteBufferPrototype.readVarint64=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+1>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);} // ref: src/google/protobuf/io/coded_stream.cc\nvar start=offset,part0=0,part1=0,part2=0,b=0;b=this.view.getUint8(offset++);part0=b&0x7F;if(b&0x80){b=this.view.getUint8(offset++);part0|=(b&0x7F)<<7;if(b&0x80){b=this.view.getUint8(offset++);part0|=(b&0x7F)<<14;if(b&0x80){b=this.view.getUint8(offset++);part0|=(b&0x7F)<<21;if(b&0x80){b=this.view.getUint8(offset++);part1=b&0x7F;if(b&0x80){b=this.view.getUint8(offset++);part1|=(b&0x7F)<<7;if(b&0x80){b=this.view.getUint8(offset++);part1|=(b&0x7F)<<14;if(b&0x80){b=this.view.getUint8(offset++);part1|=(b&0x7F)<<21;if(b&0x80){b=this.view.getUint8(offset++);part2=b&0x7F;if(b&0x80){b=this.view.getUint8(offset++);part2|=(b&0x7F)<<7;if(b&0x80){throw Error(\"Buffer overrun\");}}}}}}}}}}var value=Long.fromBits(part0|part1<<28,part1>>>4|part2<<24,false);if(relative){this.offset=offset;return value;}else {return {'value':value,'length':offset-start};}}; /**\n             * Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n             *  read if omitted.\n             * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and\n             *  the actual number of bytes read.\n             * @throws {Error} If it's not a valid varint\n             * @expose\n             */ByteBufferPrototype.readVarint64ZigZag=function(offset){var val=this.readVarint64(offset);if(val&&val['value'] instanceof Long)val[\"value\"]=ByteBuffer.zigZagDecode64(val[\"value\"]);else val=ByteBuffer.zigZagDecode64(val);return val;};} // Long\n// types/strings/cstring\n/**\n         * Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL\n         *  characters itself.\n         * @param {string} str String to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  contained in `str` + 1 if omitted.\n         * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written\n         * @expose\n         */ByteBufferPrototype.writeCString=function(str,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;var i,k=str.length;if(!this.noAssert){if(typeof str!=='string')throw TypeError(\"Illegal str: Not a string\");for(i=0;i<k;++i){if(str.charCodeAt(i)===0)throw RangeError(\"Illegal str: Contains NULL-characters\");}if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);} // UTF8 strings do not contain zero bytes in between except for the zero character, so:\nk=utfx.calculateUTF16asUTF8(stringSource(str))[1];offset+=k+1;var capacity12=this.buffer.byteLength;if(offset>capacity12)this.resize((capacity12*=2)>offset?capacity12:offset);offset-=k+1;utfx.encodeUTF16toUTF8(stringSource(str),function(b){this.view.setUint8(offset++,b);}.bind(this));this.view.setUint8(offset++,0);if(relative){this.offset=offset;return this;}return k;}; /**\n         * Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters\n         *  itself.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\n         *  read and the actual number of bytes read.\n         * @expose\n         */ByteBufferPrototype.readCString=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+1>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);}var start=offset,temp; // UTF8 strings do not contain zero bytes in between except for the zero character itself, so:\nvar sd,b=-1;utfx.decodeUTF8toUTF16(function(){if(b===0)return null;if(offset>=this.limit)throw RangeError(\"Illegal range: Truncated data, \"+offset+\" < \"+this.limit);return (b=this.view.getUint8(offset++))===0?null:b;}.bind(this),sd=stringDestination(),true);if(relative){this.offset=offset;return sd();}else {return {\"string\":sd(),\"length\":offset-start};}}; // types/strings/istring\n/**\n         * Writes a length as uint32 prefixed UTF8 encoded string.\n         * @param {string} str String to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted.\n         * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written\n         * @expose\n         * @see ByteBuffer#writeVarint32\n         */ByteBufferPrototype.writeIString=function(str,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof str!=='string')throw TypeError(\"Illegal str: Not a string\");if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}var start=offset,k;k=utfx.calculateUTF16asUTF8(stringSource(str),this.noAssert)[1];offset+=4+k;var capacity13=this.buffer.byteLength;if(offset>capacity13)this.resize((capacity13*=2)>offset?capacity13:offset);offset-=4+k;this.view.setUint32(offset,k,this.littleEndian);offset+=4;utfx.encodeUTF16toUTF8(stringSource(str),function(b){this.view.setUint8(offset++,b);}.bind(this));if(offset!==start+4+k)throw RangeError(\"Illegal range: Truncated data, \"+offset+\" == \"+(offset+4+k));if(relative){this.offset=offset;return this;}return offset-start;}; /**\n         * Reads a length as uint32 prefixed UTF8 encoded string.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\n         *  read and the actual number of bytes read.\n         * @expose\n         * @see ByteBuffer#readVarint32\n         */ByteBufferPrototype.readIString=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+4>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);}var temp=0,start=offset,str;temp=this.view.getUint32(offset,this.littleEndian);offset+=4;var k=offset+temp,sd;utfx.decodeUTF8toUTF16(function(){return offset<k?this.view.getUint8(offset++):null;}.bind(this),sd=stringDestination(),this.noAssert);str=sd();if(relative){this.offset=offset;return str;}else {return {'string':str,'length':offset-start};}}; // types/strings/utf8string\n/**\n         * Metrics representing number of UTF8 characters. Evaluates to `c`.\n         * @type {string}\n         * @const\n         * @expose\n         */ByteBuffer.METRICS_CHARS='c'; /**\n         * Metrics representing number of bytes. Evaluates to `b`.\n         * @type {string}\n         * @const\n         * @expose\n         */ByteBuffer.METRICS_BYTES='b'; /**\n         * Writes an UTF8 encoded string.\n         * @param {string} str String to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.\n         * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.\n         * @expose\n         */ByteBufferPrototype.writeUTF8String=function(str,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}var k;var start=offset;k=utfx.calculateUTF16asUTF8(stringSource(str))[1];offset+=k;var capacity14=this.buffer.byteLength;if(offset>capacity14)this.resize((capacity14*=2)>offset?capacity14:offset);offset-=k;utfx.encodeUTF16toUTF8(stringSource(str),function(b){this.view.setUint8(offset++,b);}.bind(this));if(relative){this.offset=offset;return this;}return offset-start;}; /**\n         * Writes an UTF8 encoded string. This is an alias of {@link ByteBuffer#writeUTF8String}.\n         * @function\n         * @param {string} str String to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.\n         * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.\n         * @expose\n         */ByteBufferPrototype.writeString=ByteBufferPrototype.writeUTF8String; /**\n         * Calculates the number of UTF8 characters of a string. JavaScript itself uses UTF-16, so that a string's\n         *  `length` property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.\n         * @function\n         * @param {string} str String to calculate\n         * @returns {number} Number of UTF8 characters\n         * @expose\n         */ByteBuffer.calculateUTF8Chars=function(str){return utfx.calculateUTF16asUTF8(stringSource(str))[0];}; /**\n         * Calculates the number of UTF8 bytes of a string.\n         * @function\n         * @param {string} str String to calculate\n         * @returns {number} Number of UTF8 bytes\n         * @expose\n         */ByteBuffer.calculateUTF8Bytes=function(str){return utfx.calculateUTF16asUTF8(stringSource(str))[1];}; /**\n         * Reads an UTF8 encoded string.\n         * @param {number} length Number of characters or bytes to read.\n         * @param {string=} metrics Metrics specifying what `length` is meant to count. Defaults to\n         *  {@link ByteBuffer.METRICS_CHARS}.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\n         *  read and the actual number of bytes read.\n         * @expose\n         */ByteBufferPrototype.readUTF8String=function(length,metrics,offset){if(typeof metrics==='number'){offset=metrics;metrics=undefined;}var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(typeof metrics==='undefined')metrics=ByteBuffer.METRICS_CHARS;if(!this.noAssert){if(typeof length!=='number'||length%1!==0)throw TypeError(\"Illegal length: \"+length+\" (not an integer)\");length|=0;if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}var i=0,start=offset,sd;if(metrics===ByteBuffer.METRICS_CHARS){ // The same for node and the browser\nsd=stringDestination();utfx.decodeUTF8(function(){return i<length&&offset<this.limit?this.view.getUint8(offset++):null;}.bind(this),function(cp){++i;utfx.UTF8toUTF16(cp,sd);}.bind(this));if(i!==length)throw RangeError(\"Illegal range: Truncated data, \"+i+\" == \"+length);if(relative){this.offset=offset;return sd();}else {return {\"string\":sd(),\"length\":offset-start};}}else if(metrics===ByteBuffer.METRICS_BYTES){if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+length>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+length+\") <= \"+this.buffer.byteLength);}var k=offset+length;utfx.decodeUTF8toUTF16(function(){return offset<k?this.view.getUint8(offset++):null;}.bind(this),sd=stringDestination(),this.noAssert);if(offset!==k)throw RangeError(\"Illegal range: Truncated data, \"+offset+\" == \"+k);if(relative){this.offset=offset;return sd();}else {return {'string':sd(),'length':offset-start};}}else throw TypeError(\"Unsupported metrics: \"+metrics);}; /**\n         * Reads an UTF8 encoded string. This is an alias of {@link ByteBuffer#readUTF8String}.\n         * @function\n         * @param {number} length Number of characters or bytes to read\n         * @param {number=} metrics Metrics specifying what `n` is meant to count. Defaults to\n         *  {@link ByteBuffer.METRICS_CHARS}.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\n         *  read and the actual number of bytes read.\n         * @expose\n         */ByteBufferPrototype.readString=ByteBufferPrototype.readUTF8String; // types/strings/vstring\n/**\n         * Writes a length as varint32 prefixed UTF8 encoded string.\n         * @param {string} str String to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted.\n         * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written\n         * @expose\n         * @see ByteBuffer#writeVarint32\n         */ByteBufferPrototype.writeVString=function(str,offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof str!=='string')throw TypeError(\"Illegal str: Not a string\");if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}var start=offset,k,l;k=utfx.calculateUTF16asUTF8(stringSource(str),this.noAssert)[1];l=ByteBuffer.calculateVarint32(k);offset+=l+k;var capacity15=this.buffer.byteLength;if(offset>capacity15)this.resize((capacity15*=2)>offset?capacity15:offset);offset-=l+k;offset+=this.writeVarint32(k,offset);utfx.encodeUTF16toUTF8(stringSource(str),function(b){this.view.setUint8(offset++,b);}.bind(this));if(offset!==start+k+l)throw RangeError(\"Illegal range: Truncated data, \"+offset+\" == \"+(offset+k+l));if(relative){this.offset=offset;return this;}return offset-start;}; /**\n         * Reads a length as varint32 prefixed UTF8 encoded string.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\n         *  read and the actual number of bytes read.\n         * @expose\n         * @see ByteBuffer#readVarint32\n         */ByteBufferPrototype.readVString=function(offset){var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+1>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);}var temp=this.readVarint32(offset),start=offset,str;offset+=temp['length'];temp=temp['value'];var k=offset+temp,sd=stringDestination();utfx.decodeUTF8toUTF16(function(){return offset<k?this.view.getUint8(offset++):null;}.bind(this),sd,this.noAssert);str=sd();if(relative){this.offset=offset;return str;}else {return {'string':str,'length':offset-start};}}; /**\n         * Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended\n         *  data's length.\n         * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to append. If `source` is a ByteBuffer, its offsets\n         *  will be modified according to the performed read operation.\n         * @param {(string|number)=} encoding Encoding if `data` is a string (\"base64\", \"hex\", \"binary\", defaults to \"utf8\")\n         * @param {number=} offset Offset to append at. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         * @example A relative `<01 02>03.append(<04 05>)` will result in `<01 02 04 05>, 04 05|`\n         * @example An absolute `<01 02>03.append(04 05>, 1)` will result in `<01 04>05, 04 05|`\n         */ByteBufferPrototype.append=function(source,encoding,offset){if(typeof encoding==='number'||typeof encoding!=='string'){offset=encoding;encoding=undefined;}var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}if(!(source instanceof ByteBuffer))source=ByteBuffer.wrap(source,encoding);var length=source.limit-source.offset;if(length<=0)return this; // Nothing to append\noffset+=length;var capacity16=this.buffer.byteLength;if(offset>capacity16)this.resize((capacity16*=2)>offset?capacity16:offset);offset-=length;new Uint8Array(this.buffer,offset).set(new Uint8Array(source.buffer).subarray(source.offset,source.limit));source.offset+=length;if(relative)this.offset+=length;return this;}; /**\n         * Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents at and after the\n            specified offset up to the length of this ByteBuffer's data.\n         * @param {!ByteBuffer} target Target ByteBuffer\n         * @param {number=} offset Offset to append to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         * @see ByteBuffer#append\n         */ByteBufferPrototype.appendTo=function(target,offset){target.append(this,offset);return this;}; /**\n         * Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to\n         *  disable them if your code already makes sure that everything is valid.\n         * @param {boolean} assert `true` to enable assertions, otherwise `false`\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.assert=function(assert){this.noAssert=!assert;return this;}; /**\n         * Gets the capacity of this ByteBuffer's backing buffer.\n         * @returns {number} Capacity of the backing buffer\n         * @expose\n         */ByteBufferPrototype.capacity=function(){return this.buffer.byteLength;}; /**\n         * Clears this ByteBuffer's offsets by setting {@link ByteBuffer#offset} to `0` and {@link ByteBuffer#limit} to the\n         *  backing buffer's capacity. Discards {@link ByteBuffer#markedOffset}.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.clear=function(){this.offset=0;this.limit=this.buffer.byteLength;this.markedOffset=-1;return this;}; /**\n         * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for {@link ByteBuffer#offset},\n         *  {@link ByteBuffer#markedOffset} and {@link ByteBuffer#limit}.\n         * @param {boolean=} copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`\n         * @returns {!ByteBuffer} Cloned instance\n         * @expose\n         */ByteBufferPrototype.clone=function(copy){var bb=new ByteBuffer(0,this.littleEndian,this.noAssert);if(copy){var buffer=new ArrayBuffer(this.buffer.byteLength);new Uint8Array(buffer).set(this.buffer);bb.buffer=buffer;bb.view=new DataView(buffer);}else {bb.buffer=this.buffer;bb.view=this.view;}bb.offset=this.offset;bb.markedOffset=this.markedOffset;bb.limit=this.limit;return bb;}; /**\n         * Compacts this ByteBuffer to be backed by a {@link ByteBuffer#buffer} of its contents' length. Contents are the bytes\n         *  between {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will set `offset = 0` and `limit = capacity` and\n         *  adapt {@link ByteBuffer#markedOffset} to the same relative position if set.\n         * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}\n         * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.compact=function(begin,end){if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError(\"Illegal begin: Not an integer\");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError(\"Illegal end: Not an integer\");end>>>=0;if(begin<0||begin>end||end>this.buffer.byteLength)throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);}if(begin===0&&end===this.buffer.byteLength)return this; // Already compacted\nvar len=end-begin;if(len===0){this.buffer=EMPTY_BUFFER;this.view=null;if(this.markedOffset>=0)this.markedOffset-=begin;this.offset=0;this.limit=0;return this;}var buffer=new ArrayBuffer(len);new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(begin,end));this.buffer=buffer;this.view=new DataView(buffer);if(this.markedOffset>=0)this.markedOffset-=begin;this.offset=0;this.limit=len;return this;}; /**\n         * Creates a copy of this ByteBuffer's contents. Contents are the bytes between {@link ByteBuffer#offset} and\n         *  {@link ByteBuffer#limit}.\n         * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.\n         * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.\n         * @returns {!ByteBuffer} Copy\n         * @expose\n         */ByteBufferPrototype.copy=function(begin,end){if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError(\"Illegal begin: Not an integer\");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError(\"Illegal end: Not an integer\");end>>>=0;if(begin<0||begin>end||end>this.buffer.byteLength)throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);}if(begin===end)return new ByteBuffer(0,this.littleEndian,this.noAssert);var capacity=end-begin,bb=new ByteBuffer(capacity,this.littleEndian,this.noAssert);bb.offset=0;bb.limit=capacity;if(bb.markedOffset>=0)bb.markedOffset-=begin;this.copyTo(bb,0,begin,end);return bb;}; /**\n         * Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between {@link ByteBuffer#offset} and\n         *  {@link ByteBuffer#limit}.\n         * @param {!ByteBuffer} target Target ByteBuffer\n         * @param {number=} targetOffset Offset to copy to. Will use and increase the target's {@link ByteBuffer#offset}\n         *  by the number of bytes copied if omitted.\n         * @param {number=} sourceOffset Offset to start copying from. Will use and increase {@link ByteBuffer#offset} by the\n         *  number of bytes copied if omitted.\n         * @param {number=} sourceLimit Offset to end copying from, defaults to {@link ByteBuffer#limit}\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.copyTo=function(target,targetOffset,sourceOffset,sourceLimit){var relative,targetRelative;if(!this.noAssert){if(!ByteBuffer.isByteBuffer(target))throw TypeError(\"Illegal target: Not a ByteBuffer\");}targetOffset=(targetRelative=typeof targetOffset==='undefined')?target.offset:targetOffset|0;sourceOffset=(relative=typeof sourceOffset==='undefined')?this.offset:sourceOffset|0;sourceLimit=typeof sourceLimit==='undefined'?this.limit:sourceLimit|0;if(targetOffset<0||targetOffset>target.buffer.byteLength)throw RangeError(\"Illegal target range: 0 <= \"+targetOffset+\" <= \"+target.buffer.byteLength);if(sourceOffset<0||sourceLimit>this.buffer.byteLength)throw RangeError(\"Illegal source range: 0 <= \"+sourceOffset+\" <= \"+this.buffer.byteLength);var len=sourceLimit-sourceOffset;if(len===0)return target; // Nothing to copy\ntarget.ensureCapacity(targetOffset+len);new Uint8Array(target.buffer).set(new Uint8Array(this.buffer).subarray(sourceOffset,sourceLimit),targetOffset);if(relative)this.offset+=len;if(targetRelative)target.offset+=len;return this;}; /**\n         * Makes sure that this ByteBuffer is backed by a {@link ByteBuffer#buffer} of at least the specified capacity. If the\n         *  current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity,\n         *  the required capacity will be used instead.\n         * @param {number} capacity Required capacity\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.ensureCapacity=function(capacity){var current=this.buffer.byteLength;if(current<capacity)return this.resize((current*=2)>capacity?current:capacity);return this;}; /**\n         * Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between\n         *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.\n         * @param {number|string} value Byte value to fill with. If given as a string, the first character is used.\n         * @param {number=} begin Begin offset. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted. defaults to {@link ByteBuffer#offset}.\n         * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.\n         * @returns {!ByteBuffer} this\n         * @expose\n         * @example `someByteBuffer.clear().fill(0)` fills the entire backing buffer with zeroes\n         */ByteBufferPrototype.fill=function(value,begin,end){var relative=typeof begin==='undefined';if(relative)begin=this.offset;if(typeof value==='string'&&value.length>0)value=value.charCodeAt(0);if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;if(!this.noAssert){if(typeof value!=='number'||value%1!==0)throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");value|=0;if(typeof begin!=='number'||begin%1!==0)throw TypeError(\"Illegal begin: Not an integer\");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError(\"Illegal end: Not an integer\");end>>>=0;if(begin<0||begin>end||end>this.buffer.byteLength)throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);}if(begin>=end)return this; // Nothing to fill\nwhile(begin<end){this.view.setUint8(begin++,value);}if(relative)this.offset=begin;return this;}; /**\n         * Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets `limit = offset` and\n         *  `offset = 0`. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.flip=function(){this.limit=this.offset;this.offset=0;return this;}; /**\n         * Marks an offset on this ByteBuffer to be used later.\n         * @param {number=} offset Offset to mark. Defaults to {@link ByteBuffer#offset}.\n         * @returns {!ByteBuffer} this\n         * @throws {TypeError} If `offset` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @see ByteBuffer#reset\n         * @expose\n         */ByteBufferPrototype.mark=function(offset){offset=typeof offset==='undefined'?this.offset:offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}this.markedOffset=offset;return this;}; /**\n         * Sets the byte order.\n         * @param {boolean} littleEndian `true` for little endian byte order, `false` for big endian\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.order=function(littleEndian){if(!this.noAssert){if(typeof littleEndian!=='boolean')throw TypeError(\"Illegal littleEndian: Not a boolean\");}this.littleEndian=!!littleEndian;return this;}; /**\n         * Switches (to) little endian byte order.\n         * @param {boolean=} littleEndian Defaults to `true`, otherwise uses big endian\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.LE=function(littleEndian){this.littleEndian=typeof littleEndian!=='undefined'?!!littleEndian:true;return this;}; /**\n         * Switches (to) big endian byte order.\n         * @param {boolean=} bigEndian Defaults to `true`, otherwise uses little endian\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.BE=function(bigEndian){this.littleEndian=typeof bigEndian!=='undefined'?!bigEndian:false;return this;}; /**\n         * Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the\n         *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer\n         *  will be resized and its contents moved accordingly.\n         * @param {!ByteBuffer|string|!ArrayBuffer} source Data to prepend. If `source` is a ByteBuffer, its offset will be\n         *  modified according to the performed read operation.\n         * @param {(string|number)=} encoding Encoding if `data` is a string (\"base64\", \"hex\", \"binary\", defaults to \"utf8\")\n         * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes\n         *  prepended if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         * @example A relative `00<01 02 03>.prepend(<04 05>)` results in `<04 05 01 02 03>, 04 05|`\n         * @example An absolute `00<01 02 03>.prepend(<04 05>, 2)` results in `04<05 02 03>, 04 05|`\n         */ByteBufferPrototype.prepend=function(source,encoding,offset){if(typeof encoding==='number'||typeof encoding!=='string'){offset=encoding;encoding=undefined;}var relative=typeof offset==='undefined';if(relative)offset=this.offset;if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");offset>>>=0;if(offset<0||offset+0>this.buffer.byteLength)throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);}if(!(source instanceof ByteBuffer))source=ByteBuffer.wrap(source,encoding);var len=source.limit-source.offset;if(len<=0)return this; // Nothing to prepend\nvar diff=len-offset;var arrayView;if(diff>0){ // Not enough space before offset, so resize + move\nvar buffer=new ArrayBuffer(this.buffer.byteLength+diff);arrayView=new Uint8Array(buffer);arrayView.set(new Uint8Array(this.buffer).subarray(offset,this.buffer.byteLength),len);this.buffer=buffer;this.view=new DataView(buffer);this.offset+=diff;if(this.markedOffset>=0)this.markedOffset+=diff;this.limit+=diff;offset+=diff;}else {arrayView=new Uint8Array(this.buffer);}arrayView.set(new Uint8Array(source.buffer).subarray(source.offset,source.limit),offset-len);source.offset=source.limit;if(relative)this.offset-=len;return this;}; /**\n         * Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the\n         *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer\n         *  will be resized and its contents moved accordingly.\n         * @param {!ByteBuffer} target Target ByteBuffer\n         * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes\n         *  prepended if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         * @see ByteBuffer#prepend\n         */ByteBufferPrototype.prependTo=function(target,offset){target.prepend(this,offset);return this;}; /**\n         * Prints debug information about this ByteBuffer's contents.\n         * @param {function(string)=} out Output function to call, defaults to console.log\n         * @expose\n         */ByteBufferPrototype.printDebug=function(out){if(typeof out!=='function')out=console.log.bind(console);out(this.toString()+\"\\n\"+\"-------------------------------------------------------------------\\n\"+this.toDebug( /* columns */true));}; /**\n         * Gets the number of remaining readable bytes. Contents are the bytes between {@link ByteBuffer#offset} and\n         *  {@link ByteBuffer#limit}, so this returns `limit - offset`.\n         * @returns {number} Remaining readable bytes. May be negative if `offset > limit`.\n         * @expose\n         */ByteBufferPrototype.remaining=function(){return this.limit-this.offset;}; /**\n         * Resets this ByteBuffer's {@link ByteBuffer#offset}. If an offset has been marked through {@link ByteBuffer#mark}\n         *  before, `offset` will be set to {@link ByteBuffer#markedOffset}, which will then be discarded. If no offset has been\n         *  marked, sets `offset = 0`.\n         * @returns {!ByteBuffer} this\n         * @see ByteBuffer#mark\n         * @expose\n         */ByteBufferPrototype.reset=function(){if(this.markedOffset>=0){this.offset=this.markedOffset;this.markedOffset=-1;}else {this.offset=0;}return this;}; /**\n         * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that\n         *  large or larger.\n         * @param {number} capacity Capacity required\n         * @returns {!ByteBuffer} this\n         * @throws {TypeError} If `capacity` is not a number\n         * @throws {RangeError} If `capacity < 0`\n         * @expose\n         */ByteBufferPrototype.resize=function(capacity){if(!this.noAssert){if(typeof capacity!=='number'||capacity%1!==0)throw TypeError(\"Illegal capacity: \"+capacity+\" (not an integer)\");capacity|=0;if(capacity<0)throw RangeError(\"Illegal capacity: 0 <= \"+capacity);}if(this.buffer.byteLength<capacity){var buffer=new ArrayBuffer(capacity);new Uint8Array(buffer).set(new Uint8Array(this.buffer));this.buffer=buffer;this.view=new DataView(buffer);}return this;}; /**\n         * Reverses this ByteBuffer's contents.\n         * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}\n         * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.reverse=function(begin,end){if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError(\"Illegal begin: Not an integer\");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError(\"Illegal end: Not an integer\");end>>>=0;if(begin<0||begin>end||end>this.buffer.byteLength)throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);}if(begin===end)return this; // Nothing to reverse\nArray.prototype.reverse.call(new Uint8Array(this.buffer).subarray(begin,end));this.view=new DataView(this.buffer); // FIXME: Why exactly is this necessary?\nreturn this;}; /**\n         * Skips the next `length` bytes. This will just advance\n         * @param {number} length Number of bytes to skip. May also be negative to move the offset back.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */ByteBufferPrototype.skip=function(length){if(!this.noAssert){if(typeof length!=='number'||length%1!==0)throw TypeError(\"Illegal length: \"+length+\" (not an integer)\");length|=0;}var offset=this.offset+length;if(!this.noAssert){if(offset<0||offset>this.buffer.byteLength)throw RangeError(\"Illegal length: 0 <= \"+this.offset+\" + \"+length+\" <= \"+this.buffer.byteLength);}this.offset=offset;return this;}; /**\n         * Slices this ByteBuffer by creating a cloned instance with `offset = begin` and `limit = end`.\n         * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.\n         * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.\n         * @returns {!ByteBuffer} Clone of this ByteBuffer with slicing applied, backed by the same {@link ByteBuffer#buffer}\n         * @expose\n         */ByteBufferPrototype.slice=function(begin,end){if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError(\"Illegal begin: Not an integer\");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError(\"Illegal end: Not an integer\");end>>>=0;if(begin<0||begin>end||end>this.buffer.byteLength)throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);}var bb=this.clone();bb.offset=begin;bb.limit=end;return bb;}; /**\n         * Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between\n         *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will transparently {@link ByteBuffer#flip} this\n         *  ByteBuffer if `offset > limit` but the actual offsets remain untouched.\n         * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory if\n         *  possible. Defaults to `false`\n         * @returns {!ArrayBuffer} Contents as an ArrayBuffer\n         * @expose\n         */ByteBufferPrototype.toBuffer=function(forceCopy){var offset=this.offset,limit=this.limit;if(offset>limit){var t=offset;offset=limit;limit=t;}if(!this.noAssert){if(typeof offset!=='number'||offset%1!==0)throw TypeError(\"Illegal offset: Not an integer\");offset>>>=0;if(typeof limit!=='number'||limit%1!==0)throw TypeError(\"Illegal limit: Not an integer\");limit>>>=0;if(offset<0||offset>limit||limit>this.buffer.byteLength)throw RangeError(\"Illegal range: 0 <= \"+offset+\" <= \"+limit+\" <= \"+this.buffer.byteLength);} // NOTE: It's not possible to have another ArrayBuffer reference the same memory as the backing buffer. This is\n// possible with Uint8Array#subarray only, but we have to return an ArrayBuffer by contract. So:\nif(!forceCopy&&offset===0&&limit===this.buffer.byteLength){return this.buffer;}if(offset===limit){return EMPTY_BUFFER;}var buffer=new ArrayBuffer(limit-offset);new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset,limit),0);return buffer;}; /**\n         * Returns a raw buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between\n         *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will transparently {@link ByteBuffer#flip} this\n         *  ByteBuffer if `offset > limit` but the actual offsets remain untouched. This is an alias of\n         *  {@link ByteBuffer#toBuffer}.\n         * @function\n         * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory.\n         *  Defaults to `false`\n         * @returns {!ArrayBuffer} Contents as an ArrayBuffer\n         * @expose\n         */ByteBufferPrototype.toArrayBuffer=ByteBufferPrototype.toBuffer; /**\n         * Converts the ByteBuffer's contents to a string.\n         * @param {string=} encoding Output encoding. Returns an informative string representation if omitted but also allows\n         *  direct conversion to \"utf8\", \"hex\", \"base64\" and \"binary\" encoding. \"debug\" returns a hex representation with\n         *  highlighted offsets.\n         * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}\n         * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}\n         * @returns {string} String representation\n         * @throws {Error} If `encoding` is invalid\n         * @expose\n         */ByteBufferPrototype.toString=function(encoding,begin,end){if(typeof encoding==='undefined')return \"ByteBufferAB(offset=\"+this.offset+\",markedOffset=\"+this.markedOffset+\",limit=\"+this.limit+\",capacity=\"+this.capacity()+\")\";if(typeof encoding==='number')encoding=\"utf8\",begin=encoding,end=begin;switch(encoding){case \"utf8\":return this.toUTF8(begin,end);case \"base64\":return this.toBase64(begin,end);case \"hex\":return this.toHex(begin,end);case \"binary\":return this.toBinary(begin,end);case \"debug\":return this.toDebug();case \"columns\":return this.toColumns();default:throw Error(\"Unsupported encoding: \"+encoding);}}; // lxiv-embeddable\n/**\n         * lxiv-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>\n         * Released under the Apache License, Version 2.0\n         * see: https://github.com/dcodeIO/lxiv for details\n         */var lxiv=function(){\"use strict\"; /**\n             * lxiv namespace.\n             * @type {!Object.<string,*>}\n             * @exports lxiv\n             */var lxiv={}; /**\n             * Character codes for output.\n             * @type {!Array.<number>}\n             * @inner\n             */var aout=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47]; /**\n             * Character codes for input.\n             * @type {!Array.<number>}\n             * @inner\n             */var ain=[];for(var i=0,k=aout.length;i<k;++i){ain[aout[i]]=i;} /**\n             * Encodes bytes to base64 char codes.\n             * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if\n             *  there are no more bytes left.\n             * @param {!function(number)} dst Characters destination as a function successively called with each encoded char\n             *  code.\n             */lxiv.encode=function(src,dst){var b,t;while((b=src())!==null){dst(aout[b>>2&0x3f]);t=(b&0x3)<<4;if((b=src())!==null){t|=b>>4&0xf;dst(aout[(t|b>>4&0xf)&0x3f]);t=(b&0xf)<<2;if((b=src())!==null)dst(aout[(t|b>>6&0x3)&0x3f]),dst(aout[b&0x3f]);else dst(aout[t&0x3f]),dst(61);}else dst(aout[t&0x3f]),dst(61),dst(61);}}; /**\n             * Decodes base64 char codes to bytes.\n             * @param {!function():number|null} src Characters source as a function returning the next char code respectively\n             *  `null` if there are no more characters left.\n             * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\n             * @throws {Error} If a character code is invalid\n             */lxiv.decode=function(src,dst){var c,t1,t2;function fail(c){throw Error(\"Illegal character code: \"+c);}while((c=src())!==null){t1=ain[c];if(typeof t1==='undefined')fail(c);if((c=src())!==null){t2=ain[c];if(typeof t2==='undefined')fail(c);dst(t1<<2>>>0|(t2&0x30)>>4);if((c=src())!==null){t1=ain[c];if(typeof t1==='undefined')if(c===61)break;else fail(c);dst((t2&0xf)<<4>>>0|(t1&0x3c)>>2);if((c=src())!==null){t2=ain[c];if(typeof t2==='undefined')if(c===61)break;else fail(c);dst((t1&0x3)<<6>>>0|t2);}}}}}; /**\n             * Tests if a string is valid base64.\n             * @param {string} str String to test\n             * @returns {boolean} `true` if valid, otherwise `false`\n             */lxiv.test=function(str){return (/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str));};return lxiv;}(); // encodings/base64\n/**\n         * Encodes this ByteBuffer's contents to a base64 encoded string.\n         * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}.\n         * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}.\n         * @returns {string} Base64 encoded string\n         * @expose\n         */ByteBufferPrototype.toBase64=function(begin,end){if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError(\"Illegal begin: Not an integer\");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError(\"Illegal end: Not an integer\");end>>>=0;if(begin<0||begin>end||end>this.buffer.byteLength)throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);}var sd;lxiv.encode(function(){return begin<end?this.view.getUint8(begin++):null;}.bind(this),sd=stringDestination());return sd();}; /**\n         * Decodes a base64 encoded string to a ByteBuffer.\n         * @param {string} str String to decode\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} ByteBuffer\n         * @expose\n         */ByteBuffer.fromBase64=function(str,littleEndian,noAssert){if(!noAssert){if(typeof str!=='string')throw TypeError(\"Illegal str: Not a string\");if(str.length%4!==0)throw TypeError(\"Illegal str: Length not a multiple of 4\");}var bb=new ByteBuffer(str.length/4*3,littleEndian,noAssert),i=0;lxiv.decode(stringSource(str),function(b){bb.view.setUint8(i++,b);});bb.limit=i;return bb;}; /**\n         * Encodes a binary string to base64 like `window.btoa` does.\n         * @param {string} str Binary string\n         * @returns {string} Base64 encoded string\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa\n         * @expose\n         */ByteBuffer.btoa=function(str){return ByteBuffer.fromBinary(str).toBase64();}; /**\n         * Decodes a base64 encoded string to binary like `window.atob` does.\n         * @param {string} b64 Base64 encoded string\n         * @returns {string} Binary string\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.atob\n         * @expose\n         */ByteBuffer.atob=function(b64){return ByteBuffer.fromBase64(b64).toBinary();}; // encodings/binary\n/**\n         * Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.\n         * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.\n         * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.\n         * @returns {string} Binary encoded string\n         * @throws {RangeError} If `offset > limit`\n         * @expose\n         */ByteBufferPrototype.toBinary=function(begin,end){begin=typeof begin==='undefined'?this.offset:begin;end=typeof end==='undefined'?this.limit:end;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError(\"Illegal begin: Not an integer\");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError(\"Illegal end: Not an integer\");end>>>=0;if(begin<0||begin>end||end>this.buffer.byteLength)throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);}if(begin===end)return \"\";var cc=[],pt=[];while(begin<end){cc.push(this.view.getUint8(begin++));if(cc.length>=1024)pt.push(String.fromCharCode.apply(String,cc)),cc=[];}return pt.join('')+String.fromCharCode.apply(String,cc);}; /**\n         * Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.\n         * @param {string} str String to decode\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} ByteBuffer\n         * @expose\n         */ByteBuffer.fromBinary=function(str,littleEndian,noAssert){if(!noAssert){if(typeof str!=='string')throw TypeError(\"Illegal str: Not a string\");}var i=0,k=str.length,charCode,bb=new ByteBuffer(k,littleEndian,noAssert);while(i<k){charCode=str.charCodeAt(i);if(!noAssert&&charCode>255)throw RangeError(\"Illegal charCode at \"+i+\": 0 <= \"+charCode+\" <= 255\");bb.view.setUint8(i++,charCode);}bb.limit=k;return bb;}; // encodings/debug\n/**\n         * Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:\n         * * `<` : offset,\n         * * `'` : markedOffset,\n         * * `>` : limit,\n         * * `|` : offset and limit,\n         * * `[` : offset and markedOffset,\n         * * `]` : markedOffset and limit,\n         * * `!` : offset, markedOffset and limit\n         * @param {boolean=} columns If `true` returns two columns hex + ascii, defaults to `false`\n         * @returns {string|!Array.<string>} Debug string or array of lines if `asArray = true`\n         * @expose\n         * @example `>00'01 02<03` contains four bytes with `limit=0, markedOffset=1, offset=3`\n         * @example `00[01 02 03>` contains four bytes with `offset=markedOffset=1, limit=4`\n         * @example `00|01 02 03` contains four bytes with `offset=limit=1, markedOffset=-1`\n         * @example `|` contains zero bytes with `offset=limit=0, markedOffset=-1`\n         */ByteBufferPrototype.toDebug=function(columns){var i=-1,k=this.buffer.byteLength,b,hex=\"\",asc=\"\",out=\"\";while(i<k){if(i!==-1){b=this.view.getUint8(i);if(b<0x10)hex+=\"0\"+b.toString(16).toUpperCase();else hex+=b.toString(16).toUpperCase();if(columns){asc+=b>32&&b<127?String.fromCharCode(b):'.';}}++i;if(columns){if(i>0&&i%16===0&&i!==k){while(hex.length<3*16+3){hex+=\" \";}out+=hex+asc+\"\\n\";hex=asc=\"\";}}if(i===this.offset&&i===this.limit)hex+=i===this.markedOffset?\"!\":\"|\";else if(i===this.offset)hex+=i===this.markedOffset?\"[\":\"<\";else if(i===this.limit)hex+=i===this.markedOffset?\"]\":\">\";else hex+=i===this.markedOffset?\"'\":columns||i!==0&&i!==k?\" \":\"\";}if(columns&&hex!==\" \"){while(hex.length<3*16+3){hex+=\" \";}out+=hex+asc+\"\\n\";}return columns?out:hex;}; /**\n         * Decodes a hex encoded string with marked offsets to a ByteBuffer.\n         * @param {string} str Debug string to decode (not be generated with `columns = true`)\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} ByteBuffer\n         * @expose\n         * @see ByteBuffer#toDebug\n         */ByteBuffer.fromDebug=function(str,littleEndian,noAssert){var k=str.length,bb=new ByteBuffer((k+1)/3|0,littleEndian,noAssert);var i=0,j=0,ch,b,rs=false, // Require symbol next\nho=false,hm=false,hl=false, // Already has offset, markedOffset, limit?\nfail=false;while(i<k){switch(ch=str.charAt(i++)){case '!':if(!noAssert){if(ho||hm||hl){fail=true;break;}ho=hm=hl=true;}bb.offset=bb.markedOffset=bb.limit=j;rs=false;break;case '|':if(!noAssert){if(ho||hl){fail=true;break;}ho=hl=true;}bb.offset=bb.limit=j;rs=false;break;case '[':if(!noAssert){if(ho||hm){fail=true;break;}ho=hm=true;}bb.offset=bb.markedOffset=j;rs=false;break;case '<':if(!noAssert){if(ho){fail=true;break;}ho=true;}bb.offset=j;rs=false;break;case ']':if(!noAssert){if(hl||hm){fail=true;break;}hl=hm=true;}bb.limit=bb.markedOffset=j;rs=false;break;case '>':if(!noAssert){if(hl){fail=true;break;}hl=true;}bb.limit=j;rs=false;break;case \"'\":if(!noAssert){if(hm){fail=true;break;}hm=true;}bb.markedOffset=j;rs=false;break;case ' ':rs=false;break;default:if(!noAssert){if(rs){fail=true;break;}}b=parseInt(ch+str.charAt(i++),16);if(!noAssert){if(isNaN(b)||b<0||b>255)throw TypeError(\"Illegal str: Not a debug encoded string\");}bb.view.setUint8(j++,b);rs=true;}if(fail)throw TypeError(\"Illegal str: Invalid symbol at \"+i);}if(!noAssert){if(!ho||!hl)throw TypeError(\"Illegal str: Missing offset or limit\");if(j<bb.buffer.byteLength)throw TypeError(\"Illegal str: Not a debug encoded string (is it hex?) \"+j+\" < \"+k);}return bb;}; // encodings/hex\n/**\n         * Encodes this ByteBuffer's contents to a hex encoded string.\n         * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.\n         * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.\n         * @returns {string} Hex encoded string\n         * @expose\n         */ByteBufferPrototype.toHex=function(begin,end){begin=typeof begin==='undefined'?this.offset:begin;end=typeof end==='undefined'?this.limit:end;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError(\"Illegal begin: Not an integer\");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError(\"Illegal end: Not an integer\");end>>>=0;if(begin<0||begin>end||end>this.buffer.byteLength)throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);}var out=new Array(end-begin),b;while(begin<end){b=this.view.getUint8(begin++);if(b<0x10)out.push(\"0\",b.toString(16));else out.push(b.toString(16));}return out.join('');}; /**\n         * Decodes a hex encoded string to a ByteBuffer.\n         * @param {string} str String to decode\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} ByteBuffer\n         * @expose\n         */ByteBuffer.fromHex=function(str,littleEndian,noAssert){if(!noAssert){if(typeof str!=='string')throw TypeError(\"Illegal str: Not a string\");if(str.length%2!==0)throw TypeError(\"Illegal str: Length not a multiple of 2\");}var k=str.length,bb=new ByteBuffer(k/2|0,littleEndian),b;for(var i=0,j=0;i<k;i+=2){b=parseInt(str.substring(i,i+2),16);if(!noAssert)if(!isFinite(b)||b<0||b>255)throw TypeError(\"Illegal str: Contains non-hex characters\");bb.view.setUint8(j++,b);}bb.limit=j;return bb;}; // utfx-embeddable\n/**\n         * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>\n         * Released under the Apache License, Version 2.0\n         * see: https://github.com/dcodeIO/utfx for details\n         */var utfx=function(){\"use strict\"; /**\n             * utfx namespace.\n             * @inner\n             * @type {!Object.<string,*>}\n             */var utfx={}; /**\n             * Maximum valid code point.\n             * @type {number}\n             * @const\n             */utfx.MAX_CODEPOINT=0x10FFFF; /**\n             * Encodes UTF8 code points to UTF8 bytes.\n             * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\n             *  respectively `null` if there are no more code points left or a single numeric code point.\n             * @param {!function(number)} dst Bytes destination as a function successively called with the next byte\n             */utfx.encodeUTF8=function(src,dst){var cp=null;if(typeof src==='number')cp=src,src=function src(){return null;};while(cp!==null||(cp=src())!==null){if(cp<0x80)dst(cp&0x7F);else if(cp<0x800)dst(cp>>6&0x1F|0xC0),dst(cp&0x3F|0x80);else if(cp<0x10000)dst(cp>>12&0x0F|0xE0),dst(cp>>6&0x3F|0x80),dst(cp&0x3F|0x80);else dst(cp>>18&0x07|0xF0),dst(cp>>12&0x3F|0x80),dst(cp>>6&0x3F|0x80),dst(cp&0x3F|0x80);cp=null;}}; /**\n             * Decodes UTF8 bytes to UTF8 code points.\n             * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\n             *  are no more bytes left.\n             * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.\n             * @throws {RangeError} If a starting byte is invalid in UTF8\n             * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the\n             *  remaining bytes.\n             */utfx.decodeUTF8=function(src,dst){var a,b,c,d,fail=function fail(b){b=b.slice(0,b.indexOf(null));var err=Error(b.toString());err.name=\"TruncatedError\";err['bytes']=b;throw err;};while((a=src())!==null){if((a&0x80)===0)dst(a);else if((a&0xE0)===0xC0)(b=src())===null&&fail([a,b]),dst((a&0x1F)<<6|b&0x3F);else if((a&0xF0)===0xE0)((b=src())===null||(c=src())===null)&&fail([a,b,c]),dst((a&0x0F)<<12|(b&0x3F)<<6|c&0x3F);else if((a&0xF8)===0xF0)((b=src())===null||(c=src())===null||(d=src())===null)&&fail([a,b,c,d]),dst((a&0x07)<<18|(b&0x3F)<<12|(c&0x3F)<<6|d&0x3F);else throw RangeError(\"Illegal starting byte: \"+a);}}; /**\n             * Converts UTF16 characters to UTF8 code points.\n             * @param {!function():number|null} src Characters source as a function returning the next char code respectively\n             *  `null` if there are no more characters left.\n             * @param {!function(number)} dst Code points destination as a function successively called with each converted code\n             *  point.\n             */utfx.UTF16toUTF8=function(src,dst){var c1,c2=null;while(true){if((c1=c2!==null?c2:src())===null)break;if(c1>=0xD800&&c1<=0xDFFF){if((c2=src())!==null){if(c2>=0xDC00&&c2<=0xDFFF){dst((c1-0xD800)*0x400+c2-0xDC00+0x10000);c2=null;continue;}}}dst(c1);}if(c2!==null)dst(c2);}; /**\n             * Converts UTF8 code points to UTF16 characters.\n             * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\n             *  respectively `null` if there are no more code points left or a single numeric code point.\n             * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\n             * @throws {RangeError} If a code point is out of range\n             */utfx.UTF8toUTF16=function(src,dst){var cp=null;if(typeof src==='number')cp=src,src=function src(){return null;};while(cp!==null||(cp=src())!==null){if(cp<=0xFFFF)dst(cp);else cp-=0x10000,dst((cp>>10)+0xD800),dst(cp%0x400+0xDC00);cp=null;}}; /**\n             * Converts and encodes UTF16 characters to UTF8 bytes.\n             * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`\n             *  if there are no more characters left.\n             * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\n             */utfx.encodeUTF16toUTF8=function(src,dst){utfx.UTF16toUTF8(src,function(cp){utfx.encodeUTF8(cp,dst);});}; /**\n             * Decodes and converts UTF8 bytes to UTF16 characters.\n             * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\n             *  are no more bytes left.\n             * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\n             * @throws {RangeError} If a starting byte is invalid in UTF8\n             * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.\n             */utfx.decodeUTF8toUTF16=function(src,dst){utfx.decodeUTF8(src,function(cp){utfx.UTF8toUTF16(cp,dst);});}; /**\n             * Calculates the byte length of an UTF8 code point.\n             * @param {number} cp UTF8 code point\n             * @returns {number} Byte length\n             */utfx.calculateCodePoint=function(cp){return cp<0x80?1:cp<0x800?2:cp<0x10000?3:4;}; /**\n             * Calculates the number of UTF8 bytes required to store UTF8 code points.\n             * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively\n             *  `null` if there are no more code points left.\n             * @returns {number} The number of UTF8 bytes required\n             */utfx.calculateUTF8=function(src){var cp,l=0;while((cp=src())!==null){l+=utfx.calculateCodePoint(cp);}return l;}; /**\n             * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.\n             * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively\n             *  `null` if there are no more characters left.\n             * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.\n             */utfx.calculateUTF16asUTF8=function(src){var n=0,l=0;utfx.UTF16toUTF8(src,function(cp){++n;l+=utfx.calculateCodePoint(cp);});return [n,l];};return utfx;}(); // encodings/utf8\n/**\n         * Encodes this ByteBuffer's contents between {@link ByteBuffer#offset} and {@link ByteBuffer#limit} to an UTF8 encoded\n         *  string.\n         * @returns {string} Hex encoded string\n         * @throws {RangeError} If `offset > limit`\n         * @expose\n         */ByteBufferPrototype.toUTF8=function(begin,end){if(typeof begin==='undefined')begin=this.offset;if(typeof end==='undefined')end=this.limit;if(!this.noAssert){if(typeof begin!=='number'||begin%1!==0)throw TypeError(\"Illegal begin: Not an integer\");begin>>>=0;if(typeof end!=='number'||end%1!==0)throw TypeError(\"Illegal end: Not an integer\");end>>>=0;if(begin<0||begin>end||end>this.buffer.byteLength)throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);}var sd;try{utfx.decodeUTF8toUTF16(function(){return begin<end?this.view.getUint8(begin++):null;}.bind(this),sd=stringDestination());}catch(e){if(begin!==end)throw RangeError(\"Illegal range: Truncated data, \"+begin+\" != \"+end);}return sd();}; /**\n         * Decodes an UTF8 encoded string to a ByteBuffer.\n         * @param {string} str String to decode\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} ByteBuffer\n         * @expose\n         */ByteBuffer.fromUTF8=function(str,littleEndian,noAssert){if(!noAssert)if(typeof str!=='string')throw TypeError(\"Illegal str: Not a string\");var bb=new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str),true)[1],littleEndian,noAssert),i=0;utfx.encodeUTF16toUTF8(stringSource(str),function(b){bb.view.setUint8(i++,b);});bb.limit=i;return bb;};return ByteBuffer;} /* CommonJS */if(typeof require==='function'&&(typeof module==='undefined'?'undefined':_typeof(module))==='object'&&module&&(typeof exports==='undefined'?'undefined':_typeof(exports))==='object'&&exports)module['exports']=function(){var Long;try{Long=require(\"./..\\\\..\\\\long\\\\dist\\\\long.js\");}catch(e){}return loadByteBuffer(Long);}(); /* AMD */else if(typeof define==='function'&&define[\"amd\"])define(\"ByteBuffer\",[\"Long\"],function(Long){return loadByteBuffer(Long);}); /* Global */else (global[\"dcodeIO\"]=global[\"dcodeIO\"]||{})[\"ByteBuffer\"]=loadByteBuffer(global[\"dcodeIO\"][\"Long\"]);})(undefined);\n\n},{\"./..\\\\..\\\\long\\\\dist\\\\long.js\":2}],2:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/*\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS-IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n/**\n * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\n * Released under the Apache License, Version 2.0\n * see: https://github.com/dcodeIO/long.js for details\n */\n(function (global, factory) {\n\n    /* AMD */if (typeof define === 'function' && define[\"amd\"]) define([], factory);\n    /* CommonJS */else if (typeof require === 'function' && (typeof module === 'undefined' ? 'undefined' : _typeof(module)) === \"object\" && module && module[\"exports\"]) module[\"exports\"] = factory();\n        /* Global */else (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\n})(undefined, function () {\n    \"use strict\";\n\n    /**\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n     *  See the from* functions below for more convenient ways of constructing Longs.\n     * @exports Long\n     * @class A Long class for representing a 64 bit two's-complement integer value.\n     * @param {number} low The low (signed) 32 bits of the long\n     * @param {number} high The high (signed) 32 bits of the long\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @constructor\n     */\n\n    function Long(low, high, unsigned) {\n\n        /**\n         * The low 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.low = low | 0;\n\n        /**\n         * The high 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.high = high | 0;\n\n        /**\n         * Whether unsigned or not.\n         * @type {boolean}\n         * @expose\n         */\n        this.unsigned = !!unsigned;\n    }\n\n    // The internal representation of a long is the two given signed, 32-bit values.\n    // We use 32-bit pieces because these are the size of integers on which\n    // Javascript performs bit-operations.  For operations like addition and\n    // multiplication, we split each number into 16 bit pieces, which can easily be\n    // multiplied within Javascript's floating-point representation without overflow\n    // or change in sign.\n    //\n    // In the algorithms below, we frequently reduce the negative case to the\n    // positive case by negating the input(s) and then post-processing the result.\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n    // a positive number, it overflows back into a negative).  Not handling this\n    // case would often result in infinite recursion.\n    //\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n    // methods on which they depend.\n\n    /**\n     * An indicator used to reliably determine if an object is a Long or not.\n     * @type {boolean}\n     * @const\n     * @expose\n     * @private\n     */\n    Long.__isLong__;\n\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\n        value: true,\n        enumerable: false,\n        configurable: false\n    });\n\n    /**\n     * Tests if the specified object is a Long.\n     * @param {*} obj Object\n     * @returns {boolean}\n     * @expose\n     */\n    Long.isLong = function isLong(obj) {\n        return (obj && obj[\"__isLong__\"]) === true;\n    };\n\n    /**\n     * A cache of the Long representations of small integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var INT_CACHE = {};\n\n    /**\n     * A cache of the Long representations of small unsigned integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var UINT_CACHE = {};\n\n    /**\n     * Returns a Long representing the given 32 bit integer value.\n     * @param {number} value The 32 bit integer in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromInt = function fromInt(value, unsigned) {\n        var obj, cachedObj, cache;\n        if (!unsigned) {\n            value = value | 0;\n            if (cache = -128 <= value && value < 128) {\n                cachedObj = INT_CACHE[value];\n                if (cachedObj) return cachedObj;\n            }\n            obj = new Long(value, value < 0 ? -1 : 0, false);\n            if (cache) INT_CACHE[value] = obj;\n            return obj;\n        } else {\n            value = value >>> 0;\n            if (cache = 0 <= value && value < 256) {\n                cachedObj = UINT_CACHE[value];\n                if (cachedObj) return cachedObj;\n            }\n            obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);\n            if (cache) UINT_CACHE[value] = obj;\n            return obj;\n        }\n    };\n\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @param {number} value The number in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromNumber = function fromNumber(value, unsigned) {\n        unsigned = !!unsigned;\n        if (isNaN(value) || !isFinite(value)) return Long.ZERO;\n        if (!unsigned && value <= -TWO_PWR_63_DBL) return Long.MIN_VALUE;\n        if (!unsigned && value + 1 >= TWO_PWR_63_DBL) return Long.MAX_VALUE;\n        if (unsigned && value >= TWO_PWR_64_DBL) return Long.MAX_UNSIGNED_VALUE;\n        if (value < 0) return Long.fromNumber(-value, unsigned).neg();\n        return new Long(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n    };\n\n    /**\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n     *  assumed to use 32 bits.\n     * @param {number} lowBits The low 32 bits\n     * @param {number} highBits The high 32 bits\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromBits = function fromBits(lowBits, highBits, unsigned) {\n        return new Long(lowBits, highBits, unsigned);\n    };\n\n    /**\n     * Returns a Long representation of the given string, written using the specified radix.\n     * @param {string} str The textual representation of the Long\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromString = function fromString(str, unsigned, radix) {\n        if (str.length === 0) throw Error('number format error: empty string');\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return Long.ZERO;\n        if (typeof unsigned === 'number') // For goog.math.long compatibility\n            radix = unsigned, unsigned = false;\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix) throw Error('radix out of range: ' + radix);\n\n        var p;\n        if ((p = str.indexOf('-')) > 0) throw Error('number format error: interior \"-\" character: ' + str);else if (p === 0) return Long.fromString(str.substring(1), unsigned, radix).neg();\n\n        // Do several (8) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n\n        var result = Long.ZERO;\n        for (var i = 0; i < str.length; i += 8) {\n            var size = Math.min(8, str.length - i);\n            var value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                var power = Long.fromNumber(Math.pow(radix, size));\n                result = result.mul(power).add(Long.fromNumber(value));\n            } else {\n                result = result.mul(radixToPower);\n                result = result.add(Long.fromNumber(value));\n            }\n        }\n        result.unsigned = unsigned;\n        return result;\n    };\n\n    /**\n     * Converts the specified value to a Long.\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n     * @returns {!Long}\n     * @expose\n     */\n    Long.fromValue = function fromValue(val) {\n        if (val /* is compatible */ instanceof Long) return val;\n        if (typeof val === 'number') return Long.fromNumber(val);\n        if (typeof val === 'string') return Long.fromString(val);\n        // Throws for non-objects, converts non-instanceof Long:\n        return new Long(val.low, val.high, val.unsigned);\n    };\n\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n    // no runtime penalty for these.\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_16_DBL = 1 << 16;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24_DBL = 1 << 24;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n    /**\n     * @type {!Long}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\n\n    /**\n     * Signed zero.\n     * @type {!Long}\n     * @expose\n     */\n    Long.ZERO = Long.fromInt(0);\n\n    /**\n     * Unsigned zero.\n     * @type {!Long}\n     * @expose\n     */\n    Long.UZERO = Long.fromInt(0, true);\n\n    /**\n     * Signed one.\n     * @type {!Long}\n     * @expose\n     */\n    Long.ONE = Long.fromInt(1);\n\n    /**\n     * Unsigned one.\n     * @type {!Long}\n     * @expose\n     */\n    Long.UONE = Long.fromInt(1, true);\n\n    /**\n     * Signed negative one.\n     * @type {!Long}\n     * @expose\n     */\n    Long.NEG_ONE = Long.fromInt(-1);\n\n    /**\n     * Maximum signed value.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_VALUE = new Long(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n    /**\n     * Maximum unsigned value.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_UNSIGNED_VALUE = new Long(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n    /**\n     * Minimum signed value.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MIN_VALUE = new Long(0, 0x80000000 | 0, false);\n\n    /**\n     * @alias Long.prototype\n     * @inner\n     */\n    var LongPrototype = Long.prototype;\n\n    /**\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n     * @returns {number}\n     * @expose\n     */\n    LongPrototype.toInt = function toInt() {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    };\n\n    /**\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n     * @returns {number}\n     * @expose\n     */\n    LongPrototype.toNumber = function toNumber() {\n        if (this.unsigned) {\n            return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n        }\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n\n    /**\n     * Converts the Long to a string written in the specified radix.\n     * @param {number=} radix Radix (2-36), defaults to 10\n     * @returns {string}\n     * @override\n     * @throws {RangeError} If `radix` is out of range\n     * @expose\n     */\n    LongPrototype.toString = function toString(radix) {\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix) throw RangeError('radix out of range: ' + radix);\n        if (this.isZero()) return '0';\n        var rem;\n        if (this.isNegative()) {\n            // Unsigned Longs are never negative\n            if (this.eq(Long.MIN_VALUE)) {\n                // We need to change the Long value before it can be negated, so we remove\n                // the bottom-most digit in this base and then recurse to do the rest.\n                var radixLong = Long.fromNumber(radix);\n                var div = this.div(radixLong);\n                rem = div.mul(radixLong).sub(this);\n                return div.toString(radix) + rem.toInt().toString(radix);\n            } else return '-' + this.neg().toString(radix);\n        }\n\n        // Do several (6) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\n        rem = this;\n        var result = '';\n        while (true) {\n            var remDiv = rem.div(radixToPower),\n                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n                digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero()) return digits + result;else {\n                while (digits.length < 6) {\n                    digits = '0' + digits;\n                }result = '' + digits + result;\n            }\n        }\n    };\n\n    /**\n     * Gets the high 32 bits as a signed integer.\n     * @returns {number} Signed high bits\n     * @expose\n     */\n    LongPrototype.getHighBits = function getHighBits() {\n        return this.high;\n    };\n\n    /**\n     * Gets the high 32 bits as an unsigned integer.\n     * @returns {number} Unsigned high bits\n     * @expose\n     */\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n        return this.high >>> 0;\n    };\n\n    /**\n     * Gets the low 32 bits as a signed integer.\n     * @returns {number} Signed low bits\n     * @expose\n     */\n    LongPrototype.getLowBits = function getLowBits() {\n        return this.low;\n    };\n\n    /**\n     * Gets the low 32 bits as an unsigned integer.\n     * @returns {number} Unsigned low bits\n     * @expose\n     */\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n        return this.low >>> 0;\n    };\n\n    /**\n     * Gets the number of bits needed to represent the absolute value of this Long.\n     * @returns {number}\n     * @expose\n     */\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n        if (this.isNegative()) // Unsigned Longs are never negative\n            return this.eq(Long.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n        var val = this.high != 0 ? this.high : this.low;\n        for (var bit = 31; bit > 0; bit--) {\n            if ((val & 1 << bit) != 0) break;\n        }return this.high != 0 ? bit + 33 : bit + 1;\n    };\n\n    /**\n     * Tests if this Long's value equals zero.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isZero = function isZero() {\n        return this.high === 0 && this.low === 0;\n    };\n\n    /**\n     * Tests if this Long's value is negative.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isNegative = function isNegative() {\n        return !this.unsigned && this.high < 0;\n    };\n\n    /**\n     * Tests if this Long's value is positive.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isPositive = function isPositive() {\n        return this.unsigned || this.high >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is odd.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isOdd = function isOdd() {\n        return (this.low & 1) === 1;\n    };\n\n    /**\n     * Tests if this Long's value is even.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isEven = function isEven() {\n        return (this.low & 1) === 0;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.equals = function equals(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n        return this.high === other.high && this.low === other.low;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.eq = LongPrototype.equals;\n\n    /**\n     * Tests if this Long's value differs from the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.notEquals = function notEquals(other) {\n        return !this.eq( /* validates */other);\n    };\n\n    /**\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.neq = LongPrototype.notEquals;\n\n    /**\n     * Tests if this Long's value is less than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lessThan = function lessThan(other) {\n        return this.compare( /* validates */other) < 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lt = LongPrototype.lessThan;\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n        return this.compare( /* validates */other) <= 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n    /**\n     * Tests if this Long's value is greater than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.greaterThan = function greaterThan(other) {\n        return this.compare( /* validates */other) > 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.gt = LongPrototype.greaterThan;\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n        return this.compare( /* validates */other) >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n    /**\n     * Compares this Long's value with the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     * @expose\n     */\n    LongPrototype.compare = function compare(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.eq(other)) return 0;\n        var thisNeg = this.isNegative(),\n            otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg) return -1;\n        if (!thisNeg && otherNeg) return 1;\n        // At this point the sign bits are the same\n        if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n        // Both are positive if at least one is unsigned\n        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n    };\n\n    /**\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     * @expose\n     */\n    LongPrototype.comp = LongPrototype.compare;\n\n    /**\n     * Negates this Long's value.\n     * @returns {!Long} Negated Long\n     * @expose\n     */\n    LongPrototype.negate = function negate() {\n        if (!this.unsigned && this.eq(Long.MIN_VALUE)) return Long.MIN_VALUE;\n        return this.not().add(Long.ONE);\n    };\n\n    /**\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\n     * @function\n     * @returns {!Long} Negated Long\n     * @expose\n     */\n    LongPrototype.neg = LongPrototype.negate;\n\n    /**\n     * Returns the sum of this and the specified Long.\n     * @param {!Long|number|string} addend Addend\n     * @returns {!Long} Sum\n     * @expose\n     */\n    LongPrototype.add = function add(addend) {\n        if (!Long.isLong(addend)) addend = Long.fromValue(addend);\n\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = addend.high >>> 16;\n        var b32 = addend.high & 0xFFFF;\n        var b16 = addend.low >>> 16;\n        var b00 = addend.low & 0xFFFF;\n\n        var c48 = 0,\n            c32 = 0,\n            c16 = 0,\n            c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 + b48;\n        c48 &= 0xFFFF;\n        return new Long(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the difference of this and the specified Long.\n     * @param {!Long|number|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     * @expose\n     */\n    LongPrototype.subtract = function subtract(subtrahend) {\n        if (!Long.isLong(subtrahend)) subtrahend = Long.fromValue(subtrahend);\n        return this.add(subtrahend.neg());\n    };\n\n    /**\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n     * @function\n     * @param {!Long|number|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     * @expose\n     */\n    LongPrototype.sub = LongPrototype.subtract;\n\n    /**\n     * Returns the product of this and the specified Long.\n     * @param {!Long|number|string} multiplier Multiplier\n     * @returns {!Long} Product\n     * @expose\n     */\n    LongPrototype.multiply = function multiply(multiplier) {\n        if (this.isZero()) return Long.ZERO;\n        if (!Long.isLong(multiplier)) multiplier = Long.fromValue(multiplier);\n        if (multiplier.isZero()) return Long.ZERO;\n        if (this.eq(Long.MIN_VALUE)) return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        if (multiplier.eq(Long.MIN_VALUE)) return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n\n        if (this.isNegative()) {\n            if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n        } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\n\n        // If both longs are small, use float multiplication\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n        // We can skip products that would overflow.\n\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = multiplier.high >>> 16;\n        var b32 = multiplier.high & 0xFFFF;\n        var b16 = multiplier.low >>> 16;\n        var b00 = multiplier.low & 0xFFFF;\n\n        var c48 = 0,\n            c32 = 0,\n            c16 = 0,\n            c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xFFFF;\n        return new Long(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n     * @function\n     * @param {!Long|number|string} multiplier Multiplier\n     * @returns {!Long} Product\n     * @expose\n     */\n    LongPrototype.mul = LongPrototype.multiply;\n\n    /**\n     * Returns this Long divided by the specified.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Quotient\n     * @expose\n     */\n    LongPrototype.divide = function divide(divisor) {\n        if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n        if (divisor.isZero()) throw Error('division by zero');\n        if (this.isZero()) return this.unsigned ? Long.UZERO : Long.ZERO;\n        var approx, rem, res;\n        if (this.eq(Long.MIN_VALUE)) {\n            if (divisor.eq(Long.ONE) || divisor.eq(Long.NEG_ONE)) return Long.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (divisor.eq(Long.MIN_VALUE)) return Long.ONE;else {\n                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                    var halfThis = this.shr(1);\n                    approx = halfThis.div(divisor).shl(1);\n                    if (approx.eq(Long.ZERO)) {\n                        return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\n                    } else {\n                        rem = this.sub(divisor.mul(approx));\n                        res = approx.add(rem.div(divisor));\n                        return res;\n                    }\n                }\n        } else if (divisor.eq(Long.MIN_VALUE)) return this.unsigned ? Long.UZERO : Long.ZERO;\n        if (this.isNegative()) {\n            if (divisor.isNegative()) return this.neg().div(divisor.neg());\n            return this.neg().div(divisor).neg();\n        } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n\n        // Repeat the following until the remainder is less than other:  find a\n        // floating-point that approximates remainder / other *from below*, add this\n        // into the result, and subtract it from the remainder.  It is critical that\n        // the approximate value is less than or equal to the real value so that the\n        // remainder never becomes negative.\n        res = Long.ZERO;\n        rem = this;\n        while (rem.gte(divisor)) {\n            // Approximate the result of division. This may be a little greater or\n            // smaller than the actual value.\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n            // We will tweak the approximate result by changing it in the 48-th digit or\n            // the smallest non-fractional digit, whichever is larger.\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n                delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48),\n\n            // Decrease the approximation until it is smaller than the remainder.  Note\n            // that if it is too large, the product overflows and is negative.\n            approxRes = Long.fromNumber(approx),\n                approxRem = approxRes.mul(divisor);\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\n                approx -= delta;\n                approxRes = Long.fromNumber(approx, this.unsigned);\n                approxRem = approxRes.mul(divisor);\n            }\n\n            // We know the answer can't be zero... and actually, zero would cause\n            // infinite recursion since we would make no progress.\n            if (approxRes.isZero()) approxRes = Long.ONE;\n\n            res = res.add(approxRes);\n            rem = rem.sub(approxRem);\n        }\n        return res;\n    };\n\n    /**\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n     * @function\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Quotient\n     * @expose\n     */\n    LongPrototype.div = LongPrototype.divide;\n\n    /**\n     * Returns this Long modulo the specified.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Remainder\n     * @expose\n     */\n    LongPrototype.modulo = function modulo(divisor) {\n        if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n        return this.sub(this.div(divisor).mul(divisor));\n    };\n\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Remainder\n     * @expose\n     */\n    LongPrototype.mod = LongPrototype.modulo;\n\n    /**\n     * Returns the bitwise NOT of this Long.\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.not = function not() {\n        return new Long(~this.low, ~this.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise AND of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.and = function and(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        return new Long(this.low & other.low, this.high & other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise OR of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.or = function or(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        return new Long(this.low | other.low, this.high | other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise XOR of this Long and the given one.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.xor = function xor(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        return new Long(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\n        if (Long.isLong(numBits)) numBits = numBits.toInt();\n        if ((numBits &= 63) === 0) return this;else if (numBits < 32) return new Long(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return new Long(0, this.low << numBits - 32, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shl = LongPrototype.shiftLeft;\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shiftRight = function shiftRight(numBits) {\n        if (Long.isLong(numBits)) numBits = numBits.toInt();\n        if ((numBits &= 63) === 0) return this;else if (numBits < 32) return new Long(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return new Long(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shr = LongPrototype.shiftRight;\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n        if (Long.isLong(numBits)) numBits = numBits.toInt();\n        numBits &= 63;\n        if (numBits === 0) return this;else {\n            var high = this.high;\n            if (numBits < 32) {\n                var low = this.low;\n                return new Long(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);\n            } else if (numBits === 32) return new Long(high, 0, this.unsigned);else return new Long(high >>> numBits - 32, 0, this.unsigned);\n        }\n    };\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n    /**\n     * Converts this Long to signed.\n     * @returns {!Long} Signed long\n     * @expose\n     */\n    LongPrototype.toSigned = function toSigned() {\n        if (!this.unsigned) return this;\n        return new Long(this.low, this.high, false);\n    };\n\n    /**\n     * Converts this Long to unsigned.\n     * @returns {!Long} Unsigned long\n     * @expose\n     */\n    LongPrototype.toUnsigned = function toUnsigned() {\n        if (this.unsigned) return this;\n        return new Long(this.low, this.high, true);\n    };\n\n    return Long;\n});\n\n},{}],3:[function(require,module,exports){\n\"use strict\";var _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol?\"symbol\":typeof obj;}; /* jquery.signalR.core.js */ /*global window:false */ /*!\n * ASP.NET SignalR JavaScript Library v2.2.0\n * http://signalr.net/\n *\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *\n */ /// <reference path=\"Scripts/jquery-1.6.4.js\" />\n/// <reference path=\"jquery.signalR.version.js\" />\n(function($,window,undefined){var resources={nojQuery:\"jQuery was not found. Please ensure jQuery is referenced before the SignalR client JavaScript file.\",noTransportOnInit:\"No transport could be initialized successfully. Try specifying a different transport or none at all for auto initialization.\",errorOnNegotiate:\"Error during negotiation request.\",stoppedWhileLoading:\"The connection was stopped during page load.\",stoppedWhileNegotiating:\"The connection was stopped during the negotiate request.\",errorParsingNegotiateResponse:\"Error parsing negotiate response.\",errorDuringStartRequest:\"Error during start request. Stopping the connection.\",stoppedDuringStartRequest:\"The connection was stopped during the start request.\",errorParsingStartResponse:\"Error parsing start response: '{0}'. Stopping the connection.\",invalidStartResponse:\"Invalid start response: '{0}'. Stopping the connection.\",protocolIncompatible:\"You are using a version of the client that isn't compatible with the server. Client version {0}, server version {1}.\",sendFailed:\"Send failed.\",parseFailed:\"Failed at parsing response: {0}\",longPollFailed:\"Long polling request failed.\",eventSourceFailedToConnect:\"EventSource failed to connect.\",eventSourceError:\"Error raised by EventSource\",webSocketClosed:\"WebSocket closed.\",pingServerFailedInvalidResponse:\"Invalid ping response when pinging server: '{0}'.\",pingServerFailed:\"Failed to ping server.\",pingServerFailedStatusCode:\"Failed to ping server.  Server responded with status code {0}, stopping the connection.\",pingServerFailedParse:\"Failed to parse ping server response, stopping the connection.\",noConnectionTransport:\"Connection is in an invalid state, there is no transport active.\",webSocketsInvalidState:\"The Web Socket transport is in an invalid state, transitioning into reconnecting.\",reconnectTimeout:\"Couldn't reconnect within the configured timeout of {0} ms, disconnecting.\",reconnectWindowTimeout:\"The client has been inactive since {0} and it has exceeded the inactivity timeout of {1} ms. Stopping the connection.\"};if(typeof $!==\"function\"){ // no jQuery!\nthrow new Error(resources.nojQuery);}var _signalR,_connection,_pageLoaded=window.document.readyState===\"complete\",_pageWindow=$(window),_negotiateAbortText=\"__Negotiate Aborted__\",events={onStart:\"onStart\",onStarting:\"onStarting\",onReceived:\"onReceived\",onError:\"onError\",onConnectionSlow:\"onConnectionSlow\",onReconnecting:\"onReconnecting\",onReconnect:\"onReconnect\",onStateChanged:\"onStateChanged\",onDisconnect:\"onDisconnect\"},ajaxDefaults={processData:true,timeout:null,async:true,global:false,cache:false},_log=function _log(msg,logging){if(logging===false){return;}var m;if(typeof window.console===\"undefined\"){return;}m=\"[\"+new Date().toTimeString()+\"] SignalR: \"+msg;if(window.console.debug){window.console.debug(m);}else if(window.console.log){window.console.log(m);}},changeState=function changeState(connection,expectedState,newState){if(expectedState===connection.state){connection.state=newState;$(connection).triggerHandler(events.onStateChanged,[{oldState:expectedState,newState:newState}]);return true;}return false;},isDisconnecting=function isDisconnecting(connection){return connection.state===_signalR.connectionState.disconnected;},supportsKeepAlive=function supportsKeepAlive(connection){return connection._.keepAliveData.activated&&connection.transport.supportsKeepAlive(connection);},configureStopReconnectingTimeout=function configureStopReconnectingTimeout(connection){var stopReconnectingTimeout,onReconnectTimeout; // Check if this connection has already been configured to stop reconnecting after a specified timeout.\n// Without this check if a connection is stopped then started events will be bound multiple times.\nif(!connection._.configuredStopReconnectingTimeout){onReconnectTimeout=function onReconnectTimeout(connection){var message=_signalR._.format(_signalR.resources.reconnectTimeout,connection.disconnectTimeout);connection.log(message);$(connection).triggerHandler(events.onError,[_signalR._.error(message, /* source */\"TimeoutException\")]);connection.stop( /* async */false, /* notifyServer */false);};connection.reconnecting(function(){var connection=this; // Guard against state changing in a previous user defined even handler\nif(connection.state===_signalR.connectionState.reconnecting){stopReconnectingTimeout=window.setTimeout(function(){onReconnectTimeout(connection);},connection.disconnectTimeout);}});connection.stateChanged(function(data){if(data.oldState===_signalR.connectionState.reconnecting){ // Clear the pending reconnect timeout check\nwindow.clearTimeout(stopReconnectingTimeout);}});connection._.configuredStopReconnectingTimeout=true;}};_signalR=function signalR(url,qs,logging){ /// <summary>Creates a new SignalR connection for the given url</summary>\n/// <param name=\"url\" type=\"String\">The URL of the long polling endpoint</param>\n/// <param name=\"qs\" type=\"Object\">\n///     [Optional] Custom querystring parameters to add to the connection URL.\n///     If an object, every non-function member will be added to the querystring.\n///     If a string, it's added to the QS as specified.\n/// </param>\n/// <param name=\"logging\" type=\"Boolean\">\n///     [Optional] A flag indicating whether connection logging is enabled to the browser\n///     console/log. Defaults to false.\n/// </param>\nreturn new _signalR.fn.init(url,qs,logging);};_signalR._={defaultContentType:\"application/x-www-form-urlencoded; charset=UTF-8\",ieVersion:function(){var version,matches;if(window.navigator.appName==='Microsoft Internet Explorer'){ // Check if the user agent has the pattern \"MSIE (one or more numbers).(one or more numbers)\";\nmatches=/MSIE ([0-9]+\\.[0-9]+)/.exec(window.navigator.userAgent);if(matches){version=window.parseFloat(matches[1]);}} // undefined value means not IE\nreturn version;}(),error:function error(message,source,context){var e=new Error(message);e.source=source;if(typeof context!==\"undefined\"){e.context=context;}return e;},transportError:function transportError(message,transport,source,context){var e=this.error(message,source,context);e.transport=transport?transport.name:undefined;return e;},format:function format(){ /// <summary>Usage: format(\"Hi {0}, you are {1}!\", \"Foo\", 100) </summary>\nvar s=arguments[0];for(var i=0;i<arguments.length-1;i++){s=s.replace(\"{\"+i+\"}\",arguments[i+1]);}return s;},firefoxMajorVersion:function firefoxMajorVersion(userAgent){ // Firefox user agents: http://useragentstring.com/pages/Firefox/\nvar matches=userAgent.match(/Firefox\\/(\\d+)/);if(!matches||!matches.length||matches.length<2){return 0;}return parseInt(matches[1],10 /* radix */);},configurePingInterval:function configurePingInterval(connection){var config=connection._.config,onFail=function onFail(error){$(connection).triggerHandler(events.onError,[error]);};if(config&&!connection._.pingIntervalId&&config.pingInterval){connection._.pingIntervalId=window.setInterval(function(){_signalR.transports._logic.pingServer(connection).fail(onFail);},config.pingInterval);}}};_signalR.events=events;_signalR.resources=resources;_signalR.ajaxDefaults=ajaxDefaults;_signalR.changeState=changeState;_signalR.isDisconnecting=isDisconnecting;_signalR.connectionState={connecting:0,connected:1,reconnecting:2,disconnected:4};_signalR.hub={start:function start(){ // This will get replaced with the real hub connection start method when hubs is referenced correctly\nthrow new Error(\"SignalR: Error loading hubs. Ensure your hubs reference is correct, e.g. <script src='/signalr/js'></script>.\");}};_pageWindow.load(function(){_pageLoaded=true;});function validateTransport(requestedTransport,connection){ /// <summary>Validates the requested transport by cross checking it with the pre-defined signalR.transports</summary>\n/// <param name=\"requestedTransport\" type=\"Object\">The designated transports that the user has specified.</param>\n/// <param name=\"connection\" type=\"signalR\">The connection that will be using the requested transports.  Used for logging purposes.</param>\n/// <returns type=\"Object\" />\nif($.isArray(requestedTransport)){ // Go through transport array and remove an \"invalid\" tranports\nfor(var i=requestedTransport.length-1;i>=0;i--){var transport=requestedTransport[i];if($.type(transport)!==\"string\"||!_signalR.transports[transport]){connection.log(\"Invalid transport: \"+transport+\", removing it from the transports list.\");requestedTransport.splice(i,1);}} // Verify we still have transports left, if we dont then we have invalid transports\nif(requestedTransport.length===0){connection.log(\"No transports remain within the specified transport array.\");requestedTransport=null;}}else if(!_signalR.transports[requestedTransport]&&requestedTransport!==\"auto\"){connection.log(\"Invalid transport: \"+requestedTransport.toString()+\".\");requestedTransport=null;}else if(requestedTransport===\"auto\"&&_signalR._.ieVersion<=8){ // If we're doing an auto transport and we're IE8 then force longPolling, #1764\nreturn [\"longPolling\"];}return requestedTransport;}function getDefaultPort(protocol){if(protocol===\"http:\"){return 80;}else if(protocol===\"https:\"){return 443;}}function addDefaultPort(protocol,url){ // Remove ports  from url.  We have to check if there's a / or end of line\n// following the port in order to avoid removing ports such as 8080.\nif(url.match(/:\\d+$/)){return url;}else {return url+\":\"+getDefaultPort(protocol);}}function ConnectingMessageBuffer(connection,drainCallback){var that=this,buffer=[];that.tryBuffer=function(message){if(connection.state===$.signalR.connectionState.connecting){buffer.push(message);return true;}return false;};that.drain=function(){ // Ensure that the connection is connected when we drain (do not want to drain while a connection is not active)\nif(connection.state===$.signalR.connectionState.connected){while(buffer.length>0){drainCallback(buffer.shift());}}};that.clear=function(){buffer=[];};}_signalR.fn=_signalR.prototype={init:function init(url,qs,logging){var $connection=$(this);this.url=url;this.qs=qs;this.lastError=null;this._={keepAliveData:{},connectingMessageBuffer:new ConnectingMessageBuffer(this,function(message){$connection.triggerHandler(events.onReceived,[message]);}),lastMessageAt:new Date().getTime(),lastActiveAt:new Date().getTime(),beatInterval:5000, // Default value, will only be overridden if keep alive is enabled,\nbeatHandle:null,totalTransportConnectTimeout:0 // This will be the sum of the TransportConnectTimeout sent in response to negotiate and connection.transportConnectTimeout\n};if(typeof logging===\"boolean\"){this.logging=logging;}},_parseResponse:function _parseResponse(response){var that=this;if(!response){return response;}else if(typeof response===\"string\"){return that.json.parse(response);}else {return response;}},_originalJson:window.JSON,json:window.JSON,isCrossDomain:function isCrossDomain(url,against){ /// <summary>Checks if url is cross domain</summary>\n/// <param name=\"url\" type=\"String\">The base URL</param>\n/// <param name=\"against\" type=\"Object\">\n///     An optional argument to compare the URL against, if not specified it will be set to window.location.\n///     If specified it must contain a protocol and a host property.\n/// </param>\nvar link;url=$.trim(url);against=against||window.location;if(url.indexOf(\"http\")!==0){return false;} // Create an anchor tag.\nlink=window.document.createElement(\"a\");link.href=url; // When checking for cross domain we have to special case port 80 because the window.location will remove the \nreturn link.protocol+addDefaultPort(link.protocol,link.host)!==against.protocol+addDefaultPort(against.protocol,against.host);},ajaxDataType:\"text\",contentType:\"application/json; charset=UTF-8\",logging:false,state:_signalR.connectionState.disconnected,clientProtocol:\"1.5\",reconnectDelay:2000,transportConnectTimeout:0,disconnectTimeout:30000, // This should be set by the server in response to the negotiate request (30s default)\nreconnectWindow:30000, // This should be set by the server in response to the negotiate request \nkeepAliveWarnAt:2/3, // Warn user of slow connection if we breach the X% mark of the keep alive timeout\nstart:function start(options,callback){ /// <summary>Starts the connection</summary>\n/// <param name=\"options\" type=\"Object\">Options map</param>\n/// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection has started</param>\nvar connection=this,config={pingInterval:300000,waitForPageLoad:true,transport:\"auto\",jsonp:false},_initialize,deferred=connection._deferral||$.Deferred(), // Check to see if there is a pre-existing deferral that's being built on, if so we want to keep using it\nparser=window.document.createElement(\"a\");connection.lastError=null; // Persist the deferral so that if start is called multiple times the same deferral is used.\nconnection._deferral=deferred;if(!connection.json){ // no JSON!\nthrow new Error(\"SignalR: No JSON parser found. Please ensure json2.js is referenced before the SignalR.js file if you need to support clients without native JSON parsing support, e.g. IE<8.\");}if($.type(options)===\"function\"){ // Support calling with single callback parameter\ncallback=options;}else if($.type(options)===\"object\"){$.extend(config,options);if($.type(config.callback)===\"function\"){callback=config.callback;}}config.transport=validateTransport(config.transport,connection); // If the transport is invalid throw an error and abort start\nif(!config.transport){throw new Error(\"SignalR: Invalid transport(s) specified, aborting start.\");}connection._.config=config; // Check to see if start is being called prior to page load\n// If waitForPageLoad is true we then want to re-direct function call to the window load event\nif(!_pageLoaded&&config.waitForPageLoad===true){connection._.deferredStartHandler=function(){connection.start(options,callback);};_pageWindow.bind(\"load\",connection._.deferredStartHandler);return deferred.promise();} // If we're already connecting just return the same deferral as the original connection start\nif(connection.state===_signalR.connectionState.connecting){return deferred.promise();}else if(changeState(connection,_signalR.connectionState.disconnected,_signalR.connectionState.connecting)===false){ // We're not connecting so try and transition into connecting.\n// If we fail to transition then we're either in connected or reconnecting.\ndeferred.resolve(connection);return deferred.promise();}configureStopReconnectingTimeout(connection); // Resolve the full url\nparser.href=connection.url;if(!parser.protocol||parser.protocol===\":\"){connection.protocol=window.document.location.protocol;connection.host=parser.host||window.document.location.host;}else {connection.protocol=parser.protocol;connection.host=parser.host;}connection.baseUrl=connection.protocol+\"//\"+connection.host; // Set the websocket protocol\nconnection.wsProtocol=connection.protocol===\"https:\"?\"wss://\":\"ws://\"; // If jsonp with no/auto transport is specified, then set the transport to long polling\n// since that is the only transport for which jsonp really makes sense.\n// Some developers might actually choose to specify jsonp for same origin requests\n// as demonstrated by Issue #623.\nif(config.transport===\"auto\"&&config.jsonp===true){config.transport=\"longPolling\";} // If the url is protocol relative, prepend the current windows protocol to the url. \nif(connection.url.indexOf(\"//\")===0){connection.url=window.location.protocol+connection.url;connection.log(\"Protocol relative URL detected, normalizing it to '\"+connection.url+\"'.\");}if(this.isCrossDomain(connection.url)){connection.log(\"Auto detected cross domain url.\");if(config.transport===\"auto\"){ // TODO: Support XDM with foreverFrame\nconfig.transport=[\"webSockets\",\"serverSentEvents\",\"longPolling\"];}if(typeof config.withCredentials===\"undefined\"){config.withCredentials=true;} // Determine if jsonp is the only choice for negotiation, ajaxSend and ajaxAbort.\n// i.e. if the browser doesn't supports CORS\n// If it is, ignore any preference to the contrary, and switch to jsonp.\nif(!config.jsonp){config.jsonp=!$.support.cors;if(config.jsonp){connection.log(\"Using jsonp because this browser doesn't support CORS.\");}}connection.contentType=_signalR._.defaultContentType;}connection.withCredentials=config.withCredentials;connection.ajaxDataType=config.jsonp?\"jsonp\":\"text\";$(connection).bind(events.onStart,function(e,data){if($.type(callback)===\"function\"){callback.call(connection);}deferred.resolve(connection);});connection._.initHandler=_signalR.transports._logic.initHandler(connection);_initialize=function initialize(transports,index){var noTransportError=_signalR._.error(resources.noTransportOnInit);index=index||0;if(index>=transports.length){if(index===0){connection.log(\"No transports supported by the server were selected.\");}else if(index===1){connection.log(\"No fallback transports were selected.\");}else {connection.log(\"Fallback transports exhausted.\");} // No transport initialized successfully\n$(connection).triggerHandler(events.onError,[noTransportError]);deferred.reject(noTransportError); // Stop the connection if it has connected and move it into the disconnected state\nconnection.stop();return;} // The connection was aborted\nif(connection.state===_signalR.connectionState.disconnected){return;}var transportName=transports[index],transport=_signalR.transports[transportName],onFallback=function onFallback(){_initialize(transports,index+1);};connection.transport=transport;try{connection._.initHandler.start(transport,function(){ // success\n// Firefox 11+ doesn't allow sync XHR withCredentials: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#withCredentials\nvar isFirefox11OrGreater=_signalR._.firefoxMajorVersion(window.navigator.userAgent)>=11,asyncAbort=!!connection.withCredentials&&isFirefox11OrGreater;connection.log(\"The start request succeeded. Transitioning to the connected state.\");if(supportsKeepAlive(connection)){_signalR.transports._logic.monitorKeepAlive(connection);}_signalR.transports._logic.startHeartbeat(connection); // Used to ensure low activity clients maintain their authentication.\n// Must be configured once a transport has been decided to perform valid ping requests.\n_signalR._.configurePingInterval(connection);if(!changeState(connection,_signalR.connectionState.connecting,_signalR.connectionState.connected)){connection.log(\"WARNING! The connection was not in the connecting state.\");} // Drain any incoming buffered messages (messages that came in prior to connect)\nconnection._.connectingMessageBuffer.drain();$(connection).triggerHandler(events.onStart); // wire the stop handler for when the user leaves the page\n_pageWindow.bind(\"unload\",function(){connection.log(\"Window unloading, stopping the connection.\");connection.stop(asyncAbort);});if(isFirefox11OrGreater){ // Firefox does not fire cross-domain XHRs in the normal unload handler on tab close.\n// #2400\n_pageWindow.bind(\"beforeunload\",function(){ // If connection.stop() runs runs in beforeunload and fails, it will also fail\n// in unload unless connection.stop() runs after a timeout.\nwindow.setTimeout(function(){connection.stop(asyncAbort);},0);});}},onFallback);}catch(error){connection.log(transport.name+\" transport threw '\"+error.message+\"' when attempting to start.\");onFallback();}};var url=connection.url+\"/negotiate\",onFailed=function onFailed(error,connection){var err=_signalR._.error(resources.errorOnNegotiate,error,connection._.negotiateRequest);$(connection).triggerHandler(events.onError,err);deferred.reject(err); // Stop the connection if negotiate failed\nconnection.stop();};$(connection).triggerHandler(events.onStarting);url=_signalR.transports._logic.prepareQueryString(connection,url);connection.log(\"Negotiating with '\"+url+\"'.\"); // Save the ajax negotiate request object so we can abort it if stop is called while the request is in flight.\nconnection._.negotiateRequest=_signalR.transports._logic.ajax(connection,{url:url,error:function error(_error,statusText){ // We don't want to cause any errors if we're aborting our own negotiate request.\nif(statusText!==_negotiateAbortText){onFailed(_error,connection);}else { // This rejection will noop if the deferred has already been resolved or rejected.\ndeferred.reject(_signalR._.error(resources.stoppedWhileNegotiating,null /* error */,connection._.negotiateRequest));}},success:function success(result){var res,keepAliveData,protocolError,transports=[],supportedTransports=[];try{res=connection._parseResponse(result);}catch(error){onFailed(_signalR._.error(resources.errorParsingNegotiateResponse,error),connection);return;}keepAliveData=connection._.keepAliveData;connection.appRelativeUrl=res.Url;connection.id=res.ConnectionId;connection.token=res.ConnectionToken;connection.webSocketServerUrl=res.WebSocketServerUrl; // The long poll timeout is the ConnectionTimeout plus 10 seconds\nconnection._.pollTimeout=res.ConnectionTimeout*1000+10000; // in ms\n// Once the server has labeled the PersistentConnection as Disconnected, we should stop attempting to reconnect\n// after res.DisconnectTimeout seconds.\nconnection.disconnectTimeout=res.DisconnectTimeout*1000; // in ms\n// Add the TransportConnectTimeout from the response to the transportConnectTimeout from the client to calculate the total timeout\nconnection._.totalTransportConnectTimeout=connection.transportConnectTimeout+res.TransportConnectTimeout*1000; // If we have a keep alive\nif(res.KeepAliveTimeout){ // Register the keep alive data as activated\nkeepAliveData.activated=true; // Timeout to designate when to force the connection into reconnecting converted to milliseconds\nkeepAliveData.timeout=res.KeepAliveTimeout*1000; // Timeout to designate when to warn the developer that the connection may be dead or is not responding.\nkeepAliveData.timeoutWarning=keepAliveData.timeout*connection.keepAliveWarnAt; // Instantiate the frequency in which we check the keep alive.  It must be short in order to not miss/pick up any changes\nconnection._.beatInterval=(keepAliveData.timeout-keepAliveData.timeoutWarning)/3;}else {keepAliveData.activated=false;}connection.reconnectWindow=connection.disconnectTimeout+(keepAliveData.timeout||0);if(!res.ProtocolVersion||res.ProtocolVersion!==connection.clientProtocol){protocolError=_signalR._.error(_signalR._.format(resources.protocolIncompatible,connection.clientProtocol,res.ProtocolVersion));$(connection).triggerHandler(events.onError,[protocolError]);deferred.reject(protocolError);return;}$.each(_signalR.transports,function(key){if(key.indexOf(\"_\")===0||key===\"webSockets\"&&!res.TryWebSockets){return true;}supportedTransports.push(key);});if($.isArray(config.transport)){$.each(config.transport,function(_,transport){if($.inArray(transport,supportedTransports)>=0){transports.push(transport);}});}else if(config.transport===\"auto\"){transports=supportedTransports;}else if($.inArray(config.transport,supportedTransports)>=0){transports.push(config.transport);}_initialize(transports);}});return deferred.promise();},starting:function starting(callback){ /// <summary>Adds a callback that will be invoked before anything is sent over the connection</summary>\n/// <param name=\"callback\" type=\"Function\">A callback function to execute before the connection is fully instantiated.</param>\n/// <returns type=\"signalR\" />\nvar connection=this;$(connection).bind(events.onStarting,function(e,data){callback.call(connection);});return connection;},send:function send(data){ /// <summary>Sends data over the connection</summary>\n/// <param name=\"data\" type=\"String\">The data to send over the connection</param>\n/// <returns type=\"signalR\" />\nvar connection=this;if(connection.state===_signalR.connectionState.disconnected){ // Connection hasn't been started yet\nthrow new Error(\"SignalR: Connection must be started before data can be sent. Call .start() before .send()\");}if(connection.state===_signalR.connectionState.connecting){ // Connection hasn't been started yet\nthrow new Error(\"SignalR: Connection has not been fully initialized. Use .start().done() or .start().fail() to run logic after the connection has started.\");}connection.transport.send(connection,data); // REVIEW: Should we return deferred here?\nreturn connection;},received:function received(callback){ /// <summary>Adds a callback that will be invoked after anything is received over the connection</summary>\n/// <param name=\"callback\" type=\"Function\">A callback function to execute when any data is received on the connection</param>\n/// <returns type=\"signalR\" />\nvar connection=this;$(connection).bind(events.onReceived,function(e,data){callback.call(connection,data);});return connection;},stateChanged:function stateChanged(callback){ /// <summary>Adds a callback that will be invoked when the connection state changes</summary>\n/// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection state changes</param>\n/// <returns type=\"signalR\" />\nvar connection=this;$(connection).bind(events.onStateChanged,function(e,data){callback.call(connection,data);});return connection;},error:function error(callback){ /// <summary>Adds a callback that will be invoked after an error occurs with the connection</summary>\n/// <param name=\"callback\" type=\"Function\">A callback function to execute when an error occurs on the connection</param>\n/// <returns type=\"signalR\" />\nvar connection=this;$(connection).bind(events.onError,function(e,errorData,sendData){connection.lastError=errorData; // In practice 'errorData' is the SignalR built error object.\n// In practice 'sendData' is undefined for all error events except those triggered by\n// 'ajaxSend' and 'webSockets.send'.'sendData' is the original send payload.\ncallback.call(connection,errorData,sendData);});return connection;},disconnected:function disconnected(callback){ /// <summary>Adds a callback that will be invoked when the client disconnects</summary>\n/// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection is broken</param>\n/// <returns type=\"signalR\" />\nvar connection=this;$(connection).bind(events.onDisconnect,function(e,data){callback.call(connection);});return connection;},connectionSlow:function connectionSlow(callback){ /// <summary>Adds a callback that will be invoked when the client detects a slow connection</summary>\n/// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection is slow</param>\n/// <returns type=\"signalR\" />\nvar connection=this;$(connection).bind(events.onConnectionSlow,function(e,data){callback.call(connection);});return connection;},reconnecting:function reconnecting(callback){ /// <summary>Adds a callback that will be invoked when the underlying transport begins reconnecting</summary>\n/// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection enters a reconnecting state</param>\n/// <returns type=\"signalR\" />\nvar connection=this;$(connection).bind(events.onReconnecting,function(e,data){callback.call(connection);});return connection;},reconnected:function reconnected(callback){ /// <summary>Adds a callback that will be invoked when the underlying transport reconnects</summary>\n/// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection is restored</param>\n/// <returns type=\"signalR\" />\nvar connection=this;$(connection).bind(events.onReconnect,function(e,data){callback.call(connection);});return connection;},stop:function stop(async,notifyServer){ /// <summary>Stops listening</summary>\n/// <param name=\"async\" type=\"Boolean\">Whether or not to asynchronously abort the connection</param>\n/// <param name=\"notifyServer\" type=\"Boolean\">Whether we want to notify the server that we are aborting the connection</param>\n/// <returns type=\"signalR\" />\nvar connection=this, // Save deferral because this is always cleaned up\ndeferral=connection._deferral; // Verify that we've bound a load event.\nif(connection._.deferredStartHandler){ // Unbind the event.\n_pageWindow.unbind(\"load\",connection._.deferredStartHandler);} // Always clean up private non-timeout based state.\ndelete connection._.config;delete connection._.deferredStartHandler; // This needs to be checked despite the connection state because a connection start can be deferred until page load.\n// If we've deferred the start due to a page load we need to unbind the \"onLoad\" -> start event.\nif(!_pageLoaded&&(!connection._.config||connection._.config.waitForPageLoad===true)){connection.log(\"Stopping connection prior to negotiate.\"); // If we have a deferral we should reject it\nif(deferral){deferral.reject(_signalR._.error(resources.stoppedWhileLoading));} // Short-circuit because the start has not been fully started.\nreturn;}if(connection.state===_signalR.connectionState.disconnected){return;}connection.log(\"Stopping connection.\");changeState(connection,connection.state,_signalR.connectionState.disconnected); // Clear this no matter what\nwindow.clearTimeout(connection._.beatHandle);window.clearInterval(connection._.pingIntervalId);if(connection.transport){connection.transport.stop(connection);if(notifyServer!==false){connection.transport.abort(connection,async);}if(supportsKeepAlive(connection)){_signalR.transports._logic.stopMonitoringKeepAlive(connection);}connection.transport=null;}if(connection._.negotiateRequest){ // If the negotiation request has already completed this will noop.\nconnection._.negotiateRequest.abort(_negotiateAbortText);delete connection._.negotiateRequest;} // Ensure that initHandler.stop() is called before connection._deferral is deleted\nif(connection._.initHandler){connection._.initHandler.stop();} // Trigger the disconnect event\n$(connection).triggerHandler(events.onDisconnect);delete connection._deferral;delete connection.messageId;delete connection.groupsToken;delete connection.id;delete connection._.pingIntervalId;delete connection._.lastMessageAt;delete connection._.lastActiveAt; // Clear out our message buffer\nconnection._.connectingMessageBuffer.clear();return connection;},log:function log(msg){_log(msg,this.logging);}};_signalR.fn.init.prototype=_signalR.fn;_signalR.noConflict=function(){ /// <summary>Reinstates the original value of $.connection and returns the signalR object for manual assignment</summary>\n/// <returns type=\"signalR\" />\nif($.connection===_signalR){$.connection=_connection;}return _signalR;};if($.connection){_connection=$.connection;}$.connection=$.signalR=_signalR;})(window.jQuery,window); /* jquery.signalR.transports.common.js */ // Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n/*global window:false */ /// <reference path=\"jquery.signalR.core.js\" />\n(function($,window,undefined){var signalR=$.signalR,events=$.signalR.events,changeState=$.signalR.changeState,startAbortText=\"__Start Aborted__\",transportLogic;signalR.transports={};function beat(connection){if(connection._.keepAliveData.monitoring){checkIfAlive(connection);} // Ensure that we successfully marked active before continuing the heartbeat.\nif(transportLogic.markActive(connection)){connection._.beatHandle=window.setTimeout(function(){beat(connection);},connection._.beatInterval);}}function checkIfAlive(connection){var keepAliveData=connection._.keepAliveData,timeElapsed; // Only check if we're connected\nif(connection.state===signalR.connectionState.connected){timeElapsed=new Date().getTime()-connection._.lastMessageAt; // Check if the keep alive has completely timed out\nif(timeElapsed>=keepAliveData.timeout){connection.log(\"Keep alive timed out.  Notifying transport that connection has been lost.\"); // Notify transport that the connection has been lost\nconnection.transport.lostConnection(connection);}else if(timeElapsed>=keepAliveData.timeoutWarning){ // This is to assure that the user only gets a single warning\nif(!keepAliveData.userNotified){connection.log(\"Keep alive has been missed, connection may be dead/slow.\");$(connection).triggerHandler(events.onConnectionSlow);keepAliveData.userNotified=true;}}else {keepAliveData.userNotified=false;}}}function getAjaxUrl(connection,path){var url=connection.url+path;if(connection.transport){url+=\"?transport=\"+connection.transport.name;}return transportLogic.prepareQueryString(connection,url);}function InitHandler(connection){this.connection=connection;this.startRequested=false;this.startCompleted=false;this.connectionStopped=false;}InitHandler.prototype={start:function start(transport,onSuccess,onFallback){var that=this,connection=that.connection,failCalled=false;if(that.startRequested||that.connectionStopped){connection.log(\"WARNING! \"+transport.name+\" transport cannot be started. Initialization ongoing or completed.\");return;}connection.log(transport.name+\" transport starting.\");that.transportTimeoutHandle=window.setTimeout(function(){if(!failCalled){failCalled=true;connection.log(transport.name+\" transport timed out when trying to connect.\");that.transportFailed(transport,undefined,onFallback);}},connection._.totalTransportConnectTimeout);transport.start(connection,function(){if(!failCalled){that.initReceived(transport,onSuccess);}},function(error){ // Don't allow the same transport to cause onFallback to be called twice\nif(!failCalled){failCalled=true;that.transportFailed(transport,error,onFallback);} // Returns true if the transport should stop;\n// false if it should attempt to reconnect\nreturn !that.startCompleted||that.connectionStopped;});},stop:function stop(){this.connectionStopped=true;window.clearTimeout(this.transportTimeoutHandle);signalR.transports._logic.tryAbortStartRequest(this.connection);},initReceived:function initReceived(transport,onSuccess){var that=this,connection=that.connection;if(that.startRequested){connection.log(\"WARNING! The client received multiple init messages.\");return;}if(that.connectionStopped){return;}that.startRequested=true;window.clearTimeout(that.transportTimeoutHandle);connection.log(transport.name+\" transport connected. Initiating start request.\");signalR.transports._logic.ajaxStart(connection,function(){that.startCompleted=true;onSuccess();});},transportFailed:function transportFailed(transport,error,onFallback){var connection=this.connection,deferred=connection._deferral,wrappedError;if(this.connectionStopped){return;}window.clearTimeout(this.transportTimeoutHandle);if(!this.startRequested){transport.stop(connection);connection.log(transport.name+\" transport failed to connect. Attempting to fall back.\");onFallback();}else if(!this.startCompleted){ // Do not attempt to fall back if a start request is ongoing during a transport failure.\n// Instead, trigger an error and stop the connection.\nwrappedError=signalR._.error(signalR.resources.errorDuringStartRequest,error);connection.log(transport.name+\" transport failed during the start request. Stopping the connection.\");$(connection).triggerHandler(events.onError,[wrappedError]);if(deferred){deferred.reject(wrappedError);}connection.stop();}else { // The start request has completed, but the connection has not stopped.\n// No need to do anything here. The transport should attempt its normal reconnect logic.\n}}};transportLogic=signalR.transports._logic={ajax:function ajax(connection,options){return $.ajax($.extend( /*deep copy*/true,{},$.signalR.ajaxDefaults,{type:\"GET\",data:{},xhrFields:{withCredentials:connection.withCredentials},contentType:connection.contentType,dataType:connection.ajaxDataType},options));},pingServer:function pingServer(connection){ /// <summary>Pings the server</summary>\n/// <param name=\"connection\" type=\"signalr\">Connection associated with the server ping</param>\n/// <returns type=\"signalR\" />\nvar url,xhr,deferral=$.Deferred();if(connection.transport){url=connection.url+\"/ping\";url=transportLogic.addQs(url,connection.qs);xhr=transportLogic.ajax(connection,{url:url,success:function success(result){var data;try{data=connection._parseResponse(result);}catch(error){deferral.reject(signalR._.transportError(signalR.resources.pingServerFailedParse,connection.transport,error,xhr));connection.stop();return;}if(data.Response===\"pong\"){deferral.resolve();}else {deferral.reject(signalR._.transportError(signalR._.format(signalR.resources.pingServerFailedInvalidResponse,result),connection.transport,null /* error */,xhr));}},error:function error(_error2){if(_error2.status===401||_error2.status===403){deferral.reject(signalR._.transportError(signalR._.format(signalR.resources.pingServerFailedStatusCode,_error2.status),connection.transport,_error2,xhr));connection.stop();}else {deferral.reject(signalR._.transportError(signalR.resources.pingServerFailed,connection.transport,_error2,xhr));}}});}else {deferral.reject(signalR._.transportError(signalR.resources.noConnectionTransport,connection.transport));}return deferral.promise();},prepareQueryString:function prepareQueryString(connection,url){var preparedUrl; // Use addQs to start since it handles the ?/& prefix for us\npreparedUrl=transportLogic.addQs(url,\"clientProtocol=\"+connection.clientProtocol); // Add the user-specified query string params if any\npreparedUrl=transportLogic.addQs(preparedUrl,connection.qs);if(connection.token){preparedUrl+=\"&connectionToken=\"+window.encodeURIComponent(connection.token);}if(connection.data){preparedUrl+=\"&connectionData=\"+window.encodeURIComponent(connection.data);}return preparedUrl;},addQs:function addQs(url,qs){var appender=url.indexOf(\"?\")!==-1?\"&\":\"?\",firstChar;if(!qs){return url;}if((typeof qs===\"undefined\"?\"undefined\":_typeof(qs))===\"object\"){return url+appender+$.param(qs);}if(typeof qs===\"string\"){firstChar=qs.charAt(0);if(firstChar===\"?\"||firstChar===\"&\"){appender=\"\";}return url+appender+qs;}throw new Error(\"Query string property must be either a string or object.\");}, // BUG #2953: The url needs to be same otherwise it will cause a memory leak\ngetUrl:function getUrl(connection,transport,reconnecting,poll,ajaxPost){ /// <summary>Gets the url for making a GET based connect request</summary>\nvar baseUrl=transport===\"webSockets\"?\"\":connection.baseUrl,url=baseUrl+connection.appRelativeUrl,qs=\"transport=\"+transport;if(!ajaxPost&&connection.groupsToken){qs+=\"&groupsToken=\"+window.encodeURIComponent(connection.groupsToken);}if(!reconnecting){url+=\"/connect\";}else {if(poll){ // longPolling transport specific\nurl+=\"/poll\";}else {url+=\"/reconnect\";}if(!ajaxPost&&connection.messageId){qs+=\"&messageId=\"+window.encodeURIComponent(connection.messageId);}}url+=\"?\"+qs;url=transportLogic.prepareQueryString(connection,url);if(!ajaxPost){url+=\"&tid=\"+Math.floor(Math.random()*11);}return url;},maximizePersistentResponse:function maximizePersistentResponse(minPersistentResponse){return {MessageId:minPersistentResponse.C,Messages:minPersistentResponse.M,Initialized:typeof minPersistentResponse.S!==\"undefined\"?true:false,ShouldReconnect:typeof minPersistentResponse.T!==\"undefined\"?true:false,LongPollDelay:minPersistentResponse.L,GroupsToken:minPersistentResponse.G};},updateGroups:function updateGroups(connection,groupsToken){if(groupsToken){connection.groupsToken=groupsToken;}},stringifySend:function stringifySend(connection,message){if(typeof message===\"string\"||typeof message===\"undefined\"||message===null){return message;}return connection.json.stringify(message);},ajaxSend:function ajaxSend(connection,data){var payload=transportLogic.stringifySend(connection,data),url=getAjaxUrl(connection,\"/send\"),xhr,onFail=function onFail(error,connection){$(connection).triggerHandler(events.onError,[signalR._.transportError(signalR.resources.sendFailed,connection.transport,error,xhr),data]);};xhr=transportLogic.ajax(connection,{url:url,type:connection.ajaxDataType===\"jsonp\"?\"GET\":\"POST\",contentType:signalR._.defaultContentType,data:{data:payload},success:function success(result){var res;if(result){try{res=connection._parseResponse(result);}catch(error){onFail(error,connection);connection.stop();return;}transportLogic.triggerReceived(connection,res);}},error:function error(_error3,textStatus){if(textStatus===\"abort\"||textStatus===\"parsererror\"){ // The parsererror happens for sends that don't return any data, and hence\n// don't write the jsonp callback to the response. This is harder to fix on the server\n// so just hack around it on the client for now.\nreturn;}onFail(_error3,connection);}});return xhr;},ajaxAbort:function ajaxAbort(connection,async){if(typeof connection.transport===\"undefined\"){return;} // Async by default unless explicitly overidden\nasync=typeof async===\"undefined\"?true:async;var url=getAjaxUrl(connection,\"/abort\");transportLogic.ajax(connection,{url:url,async:async,timeout:1000,type:\"POST\"});connection.log(\"Fired ajax abort async = \"+async+\".\");},ajaxStart:function ajaxStart(connection,onSuccess){var rejectDeferred=function rejectDeferred(error){var deferred=connection._deferral;if(deferred){deferred.reject(error);}},triggerStartError=function triggerStartError(error){connection.log(\"The start request failed. Stopping the connection.\");$(connection).triggerHandler(events.onError,[error]);rejectDeferred(error);connection.stop();};connection._.startRequest=transportLogic.ajax(connection,{url:getAjaxUrl(connection,\"/start\"),success:function success(result,statusText,xhr){var data;try{data=connection._parseResponse(result);}catch(error){triggerStartError(signalR._.error(signalR._.format(signalR.resources.errorParsingStartResponse,result),error,xhr));return;}if(data.Response===\"started\"){onSuccess();}else {triggerStartError(signalR._.error(signalR._.format(signalR.resources.invalidStartResponse,result),null /* error */,xhr));}},error:function error(xhr,statusText,_error4){if(statusText!==startAbortText){triggerStartError(signalR._.error(signalR.resources.errorDuringStartRequest,_error4,xhr));}else { // Stop has been called, no need to trigger the error handler\n// or stop the connection again with onStartError\nconnection.log(\"The start request aborted because connection.stop() was called.\");rejectDeferred(signalR._.error(signalR.resources.stoppedDuringStartRequest,null /* error */,xhr));}}});},tryAbortStartRequest:function tryAbortStartRequest(connection){if(connection._.startRequest){ // If the start request has already completed this will noop.\nconnection._.startRequest.abort(startAbortText);delete connection._.startRequest;}},tryInitialize:function tryInitialize(persistentResponse,onInitialized){if(persistentResponse.Initialized){onInitialized();}},triggerReceived:function triggerReceived(connection,data){if(!connection._.connectingMessageBuffer.tryBuffer(data)){$(connection).triggerHandler(events.onReceived,[data]);}},processMessages:function processMessages(connection,minData,onInitialized){var data; // Update the last message time stamp\ntransportLogic.markLastMessage(connection);if(minData){data=transportLogic.maximizePersistentResponse(minData);transportLogic.updateGroups(connection,data.GroupsToken);if(data.MessageId){connection.messageId=data.MessageId;}if(data.Messages){$.each(data.Messages,function(index,message){transportLogic.triggerReceived(connection,message);});transportLogic.tryInitialize(data,onInitialized);}}},monitorKeepAlive:function monitorKeepAlive(connection){var keepAliveData=connection._.keepAliveData; // If we haven't initiated the keep alive timeouts then we need to\nif(!keepAliveData.monitoring){keepAliveData.monitoring=true;transportLogic.markLastMessage(connection); // Save the function so we can unbind it on stop\nconnection._.keepAliveData.reconnectKeepAliveUpdate=function(){ // Mark a new message so that keep alive doesn't time out connections\ntransportLogic.markLastMessage(connection);}; // Update Keep alive on reconnect\n$(connection).bind(events.onReconnect,connection._.keepAliveData.reconnectKeepAliveUpdate);connection.log(\"Now monitoring keep alive with a warning timeout of \"+keepAliveData.timeoutWarning+\", keep alive timeout of \"+keepAliveData.timeout+\" and disconnecting timeout of \"+connection.disconnectTimeout);}else {connection.log(\"Tried to monitor keep alive but it's already being monitored.\");}},stopMonitoringKeepAlive:function stopMonitoringKeepAlive(connection){var keepAliveData=connection._.keepAliveData; // Only attempt to stop the keep alive monitoring if its being monitored\nif(keepAliveData.monitoring){ // Stop monitoring\nkeepAliveData.monitoring=false; // Remove the updateKeepAlive function from the reconnect event\n$(connection).unbind(events.onReconnect,connection._.keepAliveData.reconnectKeepAliveUpdate); // Clear all the keep alive data\nconnection._.keepAliveData={};connection.log(\"Stopping the monitoring of the keep alive.\");}},startHeartbeat:function startHeartbeat(connection){connection._.lastActiveAt=new Date().getTime();beat(connection);},markLastMessage:function markLastMessage(connection){connection._.lastMessageAt=new Date().getTime();},markActive:function markActive(connection){if(transportLogic.verifyLastActive(connection)){connection._.lastActiveAt=new Date().getTime();return true;}return false;},isConnectedOrReconnecting:function isConnectedOrReconnecting(connection){return connection.state===signalR.connectionState.connected||connection.state===signalR.connectionState.reconnecting;},ensureReconnectingState:function ensureReconnectingState(connection){if(changeState(connection,signalR.connectionState.connected,signalR.connectionState.reconnecting)===true){$(connection).triggerHandler(events.onReconnecting);}return connection.state===signalR.connectionState.reconnecting;},clearReconnectTimeout:function clearReconnectTimeout(connection){if(connection&&connection._.reconnectTimeout){window.clearTimeout(connection._.reconnectTimeout);delete connection._.reconnectTimeout;}},verifyLastActive:function verifyLastActive(connection){if(new Date().getTime()-connection._.lastActiveAt>=connection.reconnectWindow){var message=signalR._.format(signalR.resources.reconnectWindowTimeout,new Date(connection._.lastActiveAt),connection.reconnectWindow);connection.log(message);$(connection).triggerHandler(events.onError,[signalR._.error(message, /* source */\"TimeoutException\")]);connection.stop( /* async */false, /* notifyServer */false);return false;}return true;},reconnect:function reconnect(connection,transportName){var transport=signalR.transports[transportName]; // We should only set a reconnectTimeout if we are currently connected\n// and a reconnectTimeout isn't already set.\nif(transportLogic.isConnectedOrReconnecting(connection)&&!connection._.reconnectTimeout){ // Need to verify before the setTimeout occurs because an application sleep could occur during the setTimeout duration.\nif(!transportLogic.verifyLastActive(connection)){return;}connection._.reconnectTimeout=window.setTimeout(function(){if(!transportLogic.verifyLastActive(connection)){return;}transport.stop(connection);if(transportLogic.ensureReconnectingState(connection)){connection.log(transportName+\" reconnecting.\");transport.start(connection);}},connection.reconnectDelay);}},handleParseFailure:function handleParseFailure(connection,result,error,onFailed,context){var wrappedError=signalR._.transportError(signalR._.format(signalR.resources.parseFailed,result),connection.transport,error,context); // If we're in the initialization phase trigger onFailed, otherwise stop the connection.\nif(onFailed&&onFailed(wrappedError)){connection.log(\"Failed to parse server response while attempting to connect.\");}else {$(connection).triggerHandler(events.onError,[wrappedError]);connection.stop();}},initHandler:function initHandler(connection){return new InitHandler(connection);},foreverFrame:{count:0,connections:{}}};})(window.jQuery,window); /* jquery.signalR.transports.webSockets.js */ // Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n/*global window:false */ /// <reference path=\"jquery.signalR.transports.common.js\" />\n(function($,window,undefined){var signalR=$.signalR,events=$.signalR.events,changeState=$.signalR.changeState,transportLogic=signalR.transports._logic;signalR.transports.webSockets={name:\"webSockets\",supportsKeepAlive:function supportsKeepAlive(){return true;},send:function send(connection,data){var payload=transportLogic.stringifySend(connection,data);try{connection.socket.send(payload);}catch(ex){$(connection).triggerHandler(events.onError,[signalR._.transportError(signalR.resources.webSocketsInvalidState,connection.transport,ex,connection.socket),data]);}},start:function start(connection,onSuccess,onFailed){var url,opened=false,that=this,reconnecting=!onSuccess,$connection=$(connection);if(!window.WebSocket){onFailed();return;}if(!connection.socket){if(connection.webSocketServerUrl){url=connection.webSocketServerUrl;}else {url=connection.wsProtocol+connection.host;}url+=transportLogic.getUrl(connection,this.name,reconnecting);connection.log(\"Connecting to websocket endpoint '\"+url+\"'.\");connection.socket=new window.WebSocket(url);connection.socket.onopen=function(){opened=true;connection.log(\"Websocket opened.\");transportLogic.clearReconnectTimeout(connection);if(changeState(connection,signalR.connectionState.reconnecting,signalR.connectionState.connected)===true){$connection.triggerHandler(events.onReconnect);}};connection.socket.onclose=function(event){var error; // Only handle a socket close if the close is from the current socket.\n// Sometimes on disconnect the server will push down an onclose event\n// to an expired socket.\nif(this===connection.socket){if(opened&&typeof event.wasClean!==\"undefined\"&&event.wasClean===false){ // Ideally this would use the websocket.onerror handler (rather than checking wasClean in onclose) but\n// I found in some circumstances Chrome won't call onerror. This implementation seems to work on all browsers.\nerror=signalR._.transportError(signalR.resources.webSocketClosed,connection.transport,event);connection.log(\"Unclean disconnect from websocket: \"+(event.reason||\"[no reason given].\"));}else {connection.log(\"Websocket closed.\");}if(!onFailed||!onFailed(error)){if(error){$(connection).triggerHandler(events.onError,[error]);}that.reconnect(connection);}}};connection.socket.onmessage=function(event){var data;try{data=connection._parseResponse(event.data);}catch(error){transportLogic.handleParseFailure(connection,event.data,error,onFailed,event);return;}if(data){ // data.M is PersistentResponse.Messages\nif($.isEmptyObject(data)||data.M){transportLogic.processMessages(connection,data,onSuccess);}else { // For websockets we need to trigger onReceived\n// for callbacks to outgoing hub calls.\ntransportLogic.triggerReceived(connection,data);}}};}},reconnect:function reconnect(connection){transportLogic.reconnect(connection,this.name);},lostConnection:function lostConnection(connection){this.reconnect(connection);},stop:function stop(connection){ // Don't trigger a reconnect after stopping\ntransportLogic.clearReconnectTimeout(connection);if(connection.socket){connection.log(\"Closing the Websocket.\");connection.socket.close();connection.socket=null;}},abort:function abort(connection,async){transportLogic.ajaxAbort(connection,async);}};})(window.jQuery,window); /* jquery.signalR.transports.serverSentEvents.js */ // Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n/*global window:false */ /// <reference path=\"jquery.signalR.transports.common.js\" />\n(function($,window,undefined){var signalR=$.signalR,events=$.signalR.events,changeState=$.signalR.changeState,transportLogic=signalR.transports._logic,clearReconnectAttemptTimeout=function clearReconnectAttemptTimeout(connection){window.clearTimeout(connection._.reconnectAttemptTimeoutHandle);delete connection._.reconnectAttemptTimeoutHandle;};signalR.transports.serverSentEvents={name:\"serverSentEvents\",supportsKeepAlive:function supportsKeepAlive(){return true;},timeOut:3000,start:function start(connection,onSuccess,onFailed){var that=this,opened=false,$connection=$(connection),reconnecting=!onSuccess,url;if(connection.eventSource){connection.log(\"The connection already has an event source. Stopping it.\");connection.stop();}if(!window.EventSource){if(onFailed){connection.log(\"This browser doesn't support SSE.\");onFailed();}return;}url=transportLogic.getUrl(connection,this.name,reconnecting);try{connection.log(\"Attempting to connect to SSE endpoint '\"+url+\"'.\");connection.eventSource=new window.EventSource(url,{withCredentials:connection.withCredentials});}catch(e){connection.log(\"EventSource failed trying to connect with error \"+e.Message+\".\");if(onFailed){ // The connection failed, call the failed callback\nonFailed();}else {$connection.triggerHandler(events.onError,[signalR._.transportError(signalR.resources.eventSourceFailedToConnect,connection.transport,e)]);if(reconnecting){ // If we were reconnecting, rather than doing initial connect, then try reconnect again\nthat.reconnect(connection);}}return;}if(reconnecting){connection._.reconnectAttemptTimeoutHandle=window.setTimeout(function(){if(opened===false){ // If we're reconnecting and the event source is attempting to connect,\n// don't keep retrying. This causes duplicate connections to spawn.\nif(connection.eventSource.readyState!==window.EventSource.OPEN){ // If we were reconnecting, rather than doing initial connect, then try reconnect again\nthat.reconnect(connection);}}},that.timeOut);}connection.eventSource.addEventListener(\"open\",function(e){connection.log(\"EventSource connected.\");clearReconnectAttemptTimeout(connection);transportLogic.clearReconnectTimeout(connection);if(opened===false){opened=true;if(changeState(connection,signalR.connectionState.reconnecting,signalR.connectionState.connected)===true){$connection.triggerHandler(events.onReconnect);}}},false);connection.eventSource.addEventListener(\"message\",function(e){var res; // process messages\nif(e.data===\"initialized\"){return;}try{res=connection._parseResponse(e.data);}catch(error){transportLogic.handleParseFailure(connection,e.data,error,onFailed,e);return;}transportLogic.processMessages(connection,res,onSuccess);},false);connection.eventSource.addEventListener(\"error\",function(e){var error=signalR._.transportError(signalR.resources.eventSourceError,connection.transport,e); // Only handle an error if the error is from the current Event Source.\n// Sometimes on disconnect the server will push down an error event\n// to an expired Event Source.\nif(this!==connection.eventSource){return;}if(onFailed&&onFailed(error)){return;}connection.log(\"EventSource readyState: \"+connection.eventSource.readyState+\".\");if(e.eventPhase===window.EventSource.CLOSED){ // We don't use the EventSource's native reconnect function as it\n// doesn't allow us to change the URL when reconnecting. We need\n// to change the URL to not include the /connect suffix, and pass\n// the last message id we received.\nconnection.log(\"EventSource reconnecting due to the server connection ending.\");that.reconnect(connection);}else { // connection error\nconnection.log(\"EventSource error.\");$connection.triggerHandler(events.onError,[error]);}},false);},reconnect:function reconnect(connection){transportLogic.reconnect(connection,this.name);},lostConnection:function lostConnection(connection){this.reconnect(connection);},send:function send(connection,data){transportLogic.ajaxSend(connection,data);},stop:function stop(connection){ // Don't trigger a reconnect after stopping\nclearReconnectAttemptTimeout(connection);transportLogic.clearReconnectTimeout(connection);if(connection&&connection.eventSource){connection.log(\"EventSource calling close().\");connection.eventSource.close();connection.eventSource=null;delete connection.eventSource;}},abort:function abort(connection,async){transportLogic.ajaxAbort(connection,async);}};})(window.jQuery,window); /* jquery.signalR.transports.foreverFrame.js */ // Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n/*global window:false */ /// <reference path=\"jquery.signalR.transports.common.js\" />\n(function($,window,undefined){var signalR=$.signalR,events=$.signalR.events,changeState=$.signalR.changeState,transportLogic=signalR.transports._logic,createFrame=function createFrame(){var frame=window.document.createElement(\"iframe\");frame.setAttribute(\"style\",\"position:absolute;top:0;left:0;width:0;height:0;visibility:hidden;\");return frame;}, // Used to prevent infinite loading icon spins in older versions of ie\n// We build this object inside a closure so we don't pollute the rest of   \n// the foreverFrame transport with unnecessary functions/utilities.\nloadPreventer=function(){var loadingFixIntervalId=null,loadingFixInterval=1000,attachedTo=0;return {prevent:function prevent(){ // Prevent additional iframe removal procedures from newer browsers\nif(signalR._.ieVersion<=8){ // We only ever want to set the interval one time, so on the first attachedTo\nif(attachedTo===0){ // Create and destroy iframe every 3 seconds to prevent loading icon, super hacky\nloadingFixIntervalId=window.setInterval(function(){var tempFrame=createFrame();window.document.body.appendChild(tempFrame);window.document.body.removeChild(tempFrame);tempFrame=null;},loadingFixInterval);}attachedTo++;}},cancel:function cancel(){ // Only clear the interval if there's only one more object that the loadPreventer is attachedTo\nif(attachedTo===1){window.clearInterval(loadingFixIntervalId);}if(attachedTo>0){attachedTo--;}}};}();signalR.transports.foreverFrame={name:\"foreverFrame\",supportsKeepAlive:function supportsKeepAlive(){return true;}, // Added as a value here so we can create tests to verify functionality\niframeClearThreshold:50,start:function start(connection,onSuccess,onFailed){var that=this,frameId=transportLogic.foreverFrame.count+=1,url,frame=createFrame(),frameLoadHandler=function frameLoadHandler(){connection.log(\"Forever frame iframe finished loading and is no longer receiving messages.\");if(!onFailed||!onFailed()){that.reconnect(connection);}};if(window.EventSource){ // If the browser supports SSE, don't use Forever Frame\nif(onFailed){connection.log(\"Forever Frame is not supported by SignalR on browsers with SSE support.\");onFailed();}return;}frame.setAttribute(\"data-signalr-connection-id\",connection.id); // Start preventing loading icon\n// This will only perform work if the loadPreventer is not attached to another connection.\nloadPreventer.prevent(); // Build the url\nurl=transportLogic.getUrl(connection,this.name);url+=\"&frameId=\"+frameId; // add frame to the document prior to setting URL to avoid caching issues.\nwindow.document.documentElement.appendChild(frame);connection.log(\"Binding to iframe's load event.\");if(frame.addEventListener){frame.addEventListener(\"load\",frameLoadHandler,false);}else if(frame.attachEvent){frame.attachEvent(\"onload\",frameLoadHandler);}frame.src=url;transportLogic.foreverFrame.connections[frameId]=connection;connection.frame=frame;connection.frameId=frameId;if(onSuccess){connection.onSuccess=function(){connection.log(\"Iframe transport started.\");onSuccess();};}},reconnect:function reconnect(connection){var that=this; // Need to verify connection state and verify before the setTimeout occurs because an application sleep could occur during the setTimeout duration.\nif(transportLogic.isConnectedOrReconnecting(connection)&&transportLogic.verifyLastActive(connection)){window.setTimeout(function(){ // Verify that we're ok to reconnect.\nif(!transportLogic.verifyLastActive(connection)){return;}if(connection.frame&&transportLogic.ensureReconnectingState(connection)){var frame=connection.frame,src=transportLogic.getUrl(connection,that.name,true)+\"&frameId=\"+connection.frameId;connection.log(\"Updating iframe src to '\"+src+\"'.\");frame.src=src;}},connection.reconnectDelay);}},lostConnection:function lostConnection(connection){this.reconnect(connection);},send:function send(connection,data){transportLogic.ajaxSend(connection,data);},receive:function receive(connection,data){var cw,body,response;if(connection.json!==connection._originalJson){ // If there's a custom JSON parser configured then serialize the object\n// using the original (browser) JSON parser and then deserialize it using\n// the custom parser (connection._parseResponse does that). This is so we\n// can easily send the response from the server as \"raw\" JSON but still \n// support custom JSON deserialization in the browser.\ndata=connection._originalJson.stringify(data);}response=connection._parseResponse(data);transportLogic.processMessages(connection,response,connection.onSuccess); // Protect against connection stopping from a callback trigger within the processMessages above.\nif(connection.state===$.signalR.connectionState.connected){ // Delete the script & div elements\nconnection.frameMessageCount=(connection.frameMessageCount||0)+1;if(connection.frameMessageCount>signalR.transports.foreverFrame.iframeClearThreshold){connection.frameMessageCount=0;cw=connection.frame.contentWindow||connection.frame.contentDocument;if(cw&&cw.document&&cw.document.body){body=cw.document.body; // Remove all the child elements from the iframe's body to conserver memory\nwhile(body.firstChild){body.removeChild(body.firstChild);}}}}},stop:function stop(connection){var cw=null; // Stop attempting to prevent loading icon\nloadPreventer.cancel();if(connection.frame){if(connection.frame.stop){connection.frame.stop();}else {try{cw=connection.frame.contentWindow||connection.frame.contentDocument;if(cw.document&&cw.document.execCommand){cw.document.execCommand(\"Stop\");}}catch(e){connection.log(\"Error occured when stopping foreverFrame transport. Message = \"+e.message+\".\");}} // Ensure the iframe is where we left it\nif(connection.frame.parentNode===window.document.body){window.document.body.removeChild(connection.frame);}delete transportLogic.foreverFrame.connections[connection.frameId];connection.frame=null;connection.frameId=null;delete connection.frame;delete connection.frameId;delete connection.onSuccess;delete connection.frameMessageCount;connection.log(\"Stopping forever frame.\");}},abort:function abort(connection,async){transportLogic.ajaxAbort(connection,async);},getConnection:function getConnection(id){return transportLogic.foreverFrame.connections[id];},started:function started(connection){if(changeState(connection,signalR.connectionState.reconnecting,signalR.connectionState.connected)===true){$(connection).triggerHandler(events.onReconnect);}}};})(window.jQuery,window); /* jquery.signalR.transports.longPolling.js */ // Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n/*global window:false */ /// <reference path=\"jquery.signalR.transports.common.js\" />\n(function($,window,undefined){var signalR=$.signalR,events=$.signalR.events,changeState=$.signalR.changeState,isDisconnecting=$.signalR.isDisconnecting,transportLogic=signalR.transports._logic;signalR.transports.longPolling={name:\"longPolling\",supportsKeepAlive:function supportsKeepAlive(){return false;},reconnectDelay:3000,start:function start(connection,onSuccess,onFailed){ /// <summary>Starts the long polling connection</summary>\n/// <param name=\"connection\" type=\"signalR\">The SignalR connection to start</param>\nvar that=this,_fireConnect=function fireConnect(){_fireConnect=$.noop;connection.log(\"LongPolling connected.\");onSuccess();},tryFailConnect=function tryFailConnect(error){if(onFailed(error)){connection.log(\"LongPolling failed to connect.\");return true;}return false;},privateData=connection._,reconnectErrors=0,fireReconnected=function fireReconnected(instance){window.clearTimeout(privateData.reconnectTimeoutId);privateData.reconnectTimeoutId=null;if(changeState(instance,signalR.connectionState.reconnecting,signalR.connectionState.connected)===true){ // Successfully reconnected!\ninstance.log(\"Raising the reconnect event\");$(instance).triggerHandler(events.onReconnect);}}, // 1 hour\nmaxFireReconnectedTimeout=3600000;if(connection.pollXhr){connection.log(\"Polling xhr requests already exists, aborting.\");connection.stop();}connection.messageId=null;privateData.reconnectTimeoutId=null;privateData.pollTimeoutId=window.setTimeout(function(){(function poll(instance,raiseReconnect){var messageId=instance.messageId,connect=messageId===null,reconnecting=!connect,polling=!raiseReconnect,url=transportLogic.getUrl(instance,that.name,reconnecting,polling,true /* use Post for longPolling */),postData={};if(instance.messageId){postData.messageId=instance.messageId;}if(instance.groupsToken){postData.groupsToken=instance.groupsToken;} // If we've disconnected during the time we've tried to re-instantiate the poll then stop.\nif(isDisconnecting(instance)===true){return;}connection.log(\"Opening long polling request to '\"+url+\"'.\");instance.pollXhr=transportLogic.ajax(connection,{xhrFields:{onprogress:function onprogress(){transportLogic.markLastMessage(connection);}},url:url,type:\"POST\",contentType:signalR._.defaultContentType,data:postData,timeout:connection._.pollTimeout,success:function success(result){var minData,delay=0,data,shouldReconnect;connection.log(\"Long poll complete.\"); // Reset our reconnect errors so if we transition into a reconnecting state again we trigger\n// reconnected quickly\nreconnectErrors=0;try{ // Remove any keep-alives from the beginning of the result\nminData=connection._parseResponse(result);}catch(error){transportLogic.handleParseFailure(instance,result,error,tryFailConnect,instance.pollXhr);return;} // If there's currently a timeout to trigger reconnect, fire it now before processing messages\nif(privateData.reconnectTimeoutId!==null){fireReconnected(instance);}if(minData){data=transportLogic.maximizePersistentResponse(minData);}transportLogic.processMessages(instance,minData,_fireConnect);if(data&&$.type(data.LongPollDelay)===\"number\"){delay=data.LongPollDelay;}if(isDisconnecting(instance)===true){return;}shouldReconnect=data&&data.ShouldReconnect;if(shouldReconnect){ // Transition into the reconnecting state\n// If this fails then that means that the user transitioned the connection into a invalid state in processMessages.\nif(!transportLogic.ensureReconnectingState(instance)){return;}} // We never want to pass a raiseReconnect flag after a successful poll.  This is handled via the error function\nif(delay>0){privateData.pollTimeoutId=window.setTimeout(function(){poll(instance,shouldReconnect);},delay);}else {poll(instance,shouldReconnect);}},error:function error(data,textStatus){var error=signalR._.transportError(signalR.resources.longPollFailed,connection.transport,data,instance.pollXhr); // Stop trying to trigger reconnect, connection is in an error state\n// If we're not in the reconnect state this will noop\nwindow.clearTimeout(privateData.reconnectTimeoutId);privateData.reconnectTimeoutId=null;if(textStatus===\"abort\"){connection.log(\"Aborted xhr request.\");return;}if(!tryFailConnect(error)){ // Increment our reconnect errors, we assume all errors to be reconnect errors\n// In the case that it's our first error this will cause Reconnect to be fired\n// after 1 second due to reconnectErrors being = 1.\nreconnectErrors++;if(connection.state!==signalR.connectionState.reconnecting){connection.log(\"An error occurred using longPolling. Status = \"+textStatus+\".  Response = \"+data.responseText+\".\");$(instance).triggerHandler(events.onError,[error]);} // We check the state here to verify that we're not in an invalid state prior to verifying Reconnect.\n// If we're not in connected or reconnecting then the next ensureReconnectingState check will fail and will return.\n// Therefore we don't want to change that failure code path.\nif((connection.state===signalR.connectionState.connected||connection.state===signalR.connectionState.reconnecting)&&!transportLogic.verifyLastActive(connection)){return;} // Transition into the reconnecting state\n// If this fails then that means that the user transitioned the connection into the disconnected or connecting state within the above error handler trigger.\nif(!transportLogic.ensureReconnectingState(instance)){return;} // Call poll with the raiseReconnect flag as true after the reconnect delay\nprivateData.pollTimeoutId=window.setTimeout(function(){poll(instance,true);},that.reconnectDelay);}}}); // This will only ever pass after an error has occured via the poll ajax procedure.\nif(reconnecting&&raiseReconnect===true){ // We wait to reconnect depending on how many times we've failed to reconnect.\n// This is essentially a heuristic that will exponentially increase in wait time before\n// triggering reconnected.  This depends on the \"error\" handler of Poll to cancel this \n// timeout if it triggers before the Reconnected event fires.\n// The Math.min at the end is to ensure that the reconnect timeout does not overflow.\nprivateData.reconnectTimeoutId=window.setTimeout(function(){fireReconnected(instance);},Math.min(1000*(Math.pow(2,reconnectErrors)-1),maxFireReconnectedTimeout));}})(connection);},250); // Have to delay initial poll so Chrome doesn't show loader spinner in tab\n},lostConnection:function lostConnection(connection){if(connection.pollXhr){connection.pollXhr.abort(\"lostConnection\");}},send:function send(connection,data){transportLogic.ajaxSend(connection,data);},stop:function stop(connection){ /// <summary>Stops the long polling connection</summary>\n/// <param name=\"connection\" type=\"signalR\">The SignalR connection to stop</param>\nwindow.clearTimeout(connection._.pollTimeoutId);window.clearTimeout(connection._.reconnectTimeoutId);delete connection._.pollTimeoutId;delete connection._.reconnectTimeoutId;if(connection.pollXhr){connection.pollXhr.abort();connection.pollXhr=null;delete connection.pollXhr;}},abort:function abort(connection,async){transportLogic.ajaxAbort(connection,async);}};})(window.jQuery,window); /* jquery.signalR.hubs.js */ // Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n/*global window:false */ /// <reference path=\"jquery.signalR.core.js\" />\n(function($,window,undefined){var eventNamespace=\".hubProxy\",signalR=$.signalR;function makeEventName(event){return event+eventNamespace;} // Equivalent to Array.prototype.map\nfunction map(arr,fun,thisp){var i,length=arr.length,result=[];for(i=0;i<length;i+=1){if(arr.hasOwnProperty(i)){result[i]=fun.call(thisp,arr[i],i,arr);}}return result;}function getArgValue(a){return $.isFunction(a)?null:$.type(a)===\"undefined\"?null:a;}function hasMembers(obj){for(var key in obj){ // If we have any properties in our callback map then we have callbacks and can exit the loop via return\nif(obj.hasOwnProperty(key)){return true;}}return false;}function clearInvocationCallbacks(connection,error){ /// <param name=\"connection\" type=\"hubConnection\" />\nvar callbacks=connection._.invocationCallbacks,callback;if(hasMembers(callbacks)){connection.log(\"Clearing hub invocation callbacks with error: \"+error+\".\");} // Reset the callback cache now as we have a local var referencing it\nconnection._.invocationCallbackId=0;delete connection._.invocationCallbacks;connection._.invocationCallbacks={}; // Loop over the callbacks and invoke them.\n// We do this using a local var reference and *after* we've cleared the cache\n// so that if a fail callback itself tries to invoke another method we don't \n// end up with its callback in the list we're looping over.\nfor(var callbackId in callbacks){callback=callbacks[callbackId];callback.method.call(callback.scope,{E:error});}} // hubProxy\nfunction hubProxy(hubConnection,hubName){ /// <summary>\n///     Creates a new proxy object for the given hub connection that can be used to invoke\n///     methods on server hubs and handle client method invocation requests from the server.\n/// </summary>\nreturn new hubProxy.fn.init(hubConnection,hubName);}hubProxy.fn=hubProxy.prototype={init:function init(connection,hubName){this.state={};this.connection=connection;this.hubName=hubName;this._={callbackMap:{}};},constructor:hubProxy,hasSubscriptions:function hasSubscriptions(){return hasMembers(this._.callbackMap);},on:function on(eventName,callback){ /// <summary>Wires up a callback to be invoked when a invocation request is received from the server hub.</summary>\n/// <param name=\"eventName\" type=\"String\">The name of the hub event to register the callback for.</param>\n/// <param name=\"callback\" type=\"Function\">The callback to be invoked.</param>\nvar that=this,callbackMap=that._.callbackMap; // Normalize the event name to lowercase\neventName=eventName.toLowerCase(); // If there is not an event registered for this callback yet we want to create its event space in the callback map.\nif(!callbackMap[eventName]){callbackMap[eventName]={};} // Map the callback to our encompassed function\ncallbackMap[eventName][callback]=function(e,data){callback.apply(that,data);};$(that).bind(makeEventName(eventName),callbackMap[eventName][callback]);return that;},off:function off(eventName,callback){ /// <summary>Removes the callback invocation request from the server hub for the given event name.</summary>\n/// <param name=\"eventName\" type=\"String\">The name of the hub event to unregister the callback for.</param>\n/// <param name=\"callback\" type=\"Function\">The callback to be invoked.</param>\nvar that=this,callbackMap=that._.callbackMap,callbackSpace; // Normalize the event name to lowercase\neventName=eventName.toLowerCase();callbackSpace=callbackMap[eventName]; // Verify that there is an event space to unbind\nif(callbackSpace){ // Only unbind if there's an event bound with eventName and a callback with the specified callback\nif(callbackSpace[callback]){$(that).unbind(makeEventName(eventName),callbackSpace[callback]); // Remove the callback from the callback map\ndelete callbackSpace[callback]; // Check if there are any members left on the event, if not we need to destroy it.\nif(!hasMembers(callbackSpace)){delete callbackMap[eventName];}}else if(!callback){ // Check if we're removing the whole event and we didn't error because of an invalid callback\n$(that).unbind(makeEventName(eventName));delete callbackMap[eventName];}}return that;},invoke:function invoke(methodName){ /// <summary>Invokes a server hub method with the given arguments.</summary>\n/// <param name=\"methodName\" type=\"String\">The name of the server hub method.</param>\nvar that=this,connection=that.connection,args=$.makeArray(arguments).slice(1),argValues=map(args,getArgValue),data={H:that.hubName,M:methodName,A:argValues,I:connection._.invocationCallbackId},d=$.Deferred(),callback=function callback(minResult){var result=that._maximizeHubResponse(minResult),source,error; // Update the hub state\n$.extend(that.state,result.State);if(result.Progress){if(d.notifyWith){ // Progress is only supported in jQuery 1.7+\nd.notifyWith(that,[result.Progress.Data]);}else if(!connection._.progressjQueryVersionLogged){connection.log(\"A hub method invocation progress update was received but the version of jQuery in use (\"+$.prototype.jquery+\") does not support progress updates. Upgrade to jQuery 1.7+ to receive progress notifications.\");connection._.progressjQueryVersionLogged=true;}}else if(result.Error){ // Server hub method threw an exception, log it & reject the deferred\nif(result.StackTrace){connection.log(result.Error+\"\\n\"+result.StackTrace+\".\");} // result.ErrorData is only set if a HubException was thrown\nsource=result.IsHubException?\"HubException\":\"Exception\";error=signalR._.error(result.Error,source);error.data=result.ErrorData;connection.log(that.hubName+\".\"+methodName+\" failed to execute. Error: \"+error.message);d.rejectWith(that,[error]);}else { // Server invocation succeeded, resolve the deferred\nconnection.log(\"Invoked \"+that.hubName+\".\"+methodName);d.resolveWith(that,[result.Result]);}};connection._.invocationCallbacks[connection._.invocationCallbackId.toString()]={scope:that,method:callback};connection._.invocationCallbackId+=1;if(!$.isEmptyObject(that.state)){data.S=that.state;}connection.log(\"Invoking \"+that.hubName+\".\"+methodName);connection.send(data);return d.promise();},_maximizeHubResponse:function _maximizeHubResponse(minHubResponse){return {State:minHubResponse.S,Result:minHubResponse.R,Progress:minHubResponse.P?{Id:minHubResponse.P.I,Data:minHubResponse.P.D}:null,Id:minHubResponse.I,IsHubException:minHubResponse.H,Error:minHubResponse.E,StackTrace:minHubResponse.T,ErrorData:minHubResponse.D};}};hubProxy.fn.init.prototype=hubProxy.fn; // hubConnection\nfunction hubConnection(url,options){ /// <summary>Creates a new hub connection.</summary>\n/// <param name=\"url\" type=\"String\">[Optional] The hub route url, defaults to \"/signalr\".</param>\n/// <param name=\"options\" type=\"Object\">[Optional] Settings to use when creating the hubConnection.</param>\nvar settings={qs:null,logging:false,useDefaultPath:true};$.extend(settings,options);if(!url||settings.useDefaultPath){url=(url||\"\")+\"/signalr\";}return new hubConnection.fn.init(url,settings);}hubConnection.fn=hubConnection.prototype=$.connection();hubConnection.fn.init=function(url,options){var settings={qs:null,logging:false,useDefaultPath:true},connection=this;$.extend(settings,options); // Call the base constructor\n$.signalR.fn.init.call(connection,url,settings.qs,settings.logging); // Object to store hub proxies for this connection\nconnection.proxies={};connection._.invocationCallbackId=0;connection._.invocationCallbacks={}; // Wire up the received handler\nconnection.received(function(minData){var data,proxy,dataCallbackId,callback,hubName,eventName;if(!minData){return;} // We have to handle progress updates first in order to ensure old clients that receive\n// progress updates enter the return value branch and then no-op when they can't find\n// the callback in the map (because the minData.I value will not be a valid callback ID)\nif(typeof minData.P!==\"undefined\"){ // Process progress notification\ndataCallbackId=minData.P.I.toString();callback=connection._.invocationCallbacks[dataCallbackId];if(callback){callback.method.call(callback.scope,minData);}}else if(typeof minData.I!==\"undefined\"){ // We received the return value from a server method invocation, look up callback by id and call it\ndataCallbackId=minData.I.toString();callback=connection._.invocationCallbacks[dataCallbackId];if(callback){ // Delete the callback from the proxy\nconnection._.invocationCallbacks[dataCallbackId]=null;delete connection._.invocationCallbacks[dataCallbackId]; // Invoke the callback\ncallback.method.call(callback.scope,minData);}}else {data=this._maximizeClientHubInvocation(minData); // We received a client invocation request, i.e. broadcast from server hub\nconnection.log(\"Triggering client hub event '\"+data.Method+\"' on hub '\"+data.Hub+\"'.\"); // Normalize the names to lowercase\nhubName=data.Hub.toLowerCase();eventName=data.Method.toLowerCase(); // Trigger the local invocation event\nproxy=this.proxies[hubName]; // Update the hub state\n$.extend(proxy.state,data.State);$(proxy).triggerHandler(makeEventName(eventName),[data.Args]);}});connection.error(function(errData,origData){var callbackId,callback;if(!origData){ // No original data passed so this is not a send error\nreturn;}callbackId=origData.I;callback=connection._.invocationCallbacks[callbackId]; // Verify that there is a callback bound (could have been cleared)\nif(callback){ // Delete the callback\nconnection._.invocationCallbacks[callbackId]=null;delete connection._.invocationCallbacks[callbackId]; // Invoke the callback with an error to reject the promise\ncallback.method.call(callback.scope,{E:errData});}});connection.reconnecting(function(){if(connection.transport&&connection.transport.name===\"webSockets\"){clearInvocationCallbacks(connection,\"Connection started reconnecting before invocation result was received.\");}});connection.disconnected(function(){clearInvocationCallbacks(connection,\"Connection was disconnected before invocation result was received.\");});};hubConnection.fn._maximizeClientHubInvocation=function(minClientHubInvocation){return {Hub:minClientHubInvocation.H,Method:minClientHubInvocation.M,Args:minClientHubInvocation.A,State:minClientHubInvocation.S};};hubConnection.fn._registerSubscribedHubs=function(){ /// <summary>\n///     Sets the starting event to loop through the known hubs and register any new hubs \n///     that have been added to the proxy.\n/// </summary>\nvar connection=this;if(!connection._subscribedToHubs){connection._subscribedToHubs=true;connection.starting(function(){ // Set the connection's data object with all the hub proxies with active subscriptions.\n// These proxies will receive notifications from the server.\nvar subscribedHubs=[];$.each(connection.proxies,function(key){if(this.hasSubscriptions()){subscribedHubs.push({name:key});connection.log(\"Client subscribed to hub '\"+key+\"'.\");}});if(subscribedHubs.length===0){connection.log(\"No hubs have been subscribed to.  The client will not receive data from hubs.  To fix, declare at least one client side function prior to connection start for each hub you wish to subscribe to.\");}connection.data=connection.json.stringify(subscribedHubs);});}};hubConnection.fn.createHubProxy=function(hubName){ /// <summary>\n///     Creates a new proxy object for the given hub connection that can be used to invoke\n///     methods on server hubs and handle client method invocation requests from the server.\n/// </summary>\n/// <param name=\"hubName\" type=\"String\">\n///     The name of the hub on the server to create the proxy for.\n/// </param>\n// Normalize the name to lowercase\nhubName=hubName.toLowerCase();var proxy=this.proxies[hubName];if(!proxy){proxy=hubProxy(this,hubName);this.proxies[hubName]=proxy;}this._registerSubscribedHubs();return proxy;};hubConnection.fn.init.prototype=hubConnection.fn;$.hubConnection=hubConnection;})(window.jQuery,window); /* jquery.signalR.version.js */ // Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n/*global window:false */ /// <reference path=\"jquery.signalR.core.js\" />\n(function($,undefined){$.signalR.version=\"2.2.0\";})(window.jQuery);\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.OtherTreeClient = undefined;\n\nvar _signalr = require(\"./..\\\\bower_components\\\\signalr\\\\jquery.signalR.js\");\n\nvar signalr = _interopRequireWildcard(_signalr);\n\nvar _bytebuffer = require(\"./..\\\\bower_components\\\\bytebuffer\\\\dist\\\\ByteBufferAB.js\");\n\nvar byteBuffer = _interopRequireWildcard(_bytebuffer);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// let byteBuffer=require(\"bytebuffer\");\n\nvar OtherTreeClient = exports.OtherTreeClient = function () {\n    function OtherTreeClient(url, token) {\n        _classCallCheck(this, OtherTreeClient);\n\n        this.token = token;\n        this.url = url;\n        this.tempBuffer = byteBuffer.ByteBuffer.allocate(1024);\n        this.signalr = signalr;\n    }\n\n    _createClass(OtherTreeClient, [{\n        key: \"connect\",\n        value: function connect() {}\n    }]);\n\n    return OtherTreeClient;\n}();\n\n},{\"./..\\\\bower_components\\\\bytebuffer\\\\dist\\\\ByteBufferAB.js\":1,\"./..\\\\bower_components\\\\signalr\\\\jquery.signalR.js\":3}]},{},[4])\n\n","/*\n Copyright 2013-2014 Daniel Wirtz <dcode@dcode.io>\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n/**\n * @license ByteBuffer.js (c) 2013-2014 Daniel Wirtz <dcode@dcode.io>\n * This version of ByteBuffer.js uses an ArrayBuffer as its backing buffer which is accessed through a DataView and is\n * compatible with modern browsers.\n * Released under the Apache License, Version 2.0\n * see: https://github.com/dcodeIO/ByteBuffer.js for details\n */ //\n(function(global) {\n    \"use strict\";\n\n    /**\n     * @param {function(new: Long, number, number, boolean=)=} Long\n     * @returns {function(new: ByteBuffer, number=, boolean=, boolean=)}}\n     * @inner\n     */\n    function loadByteBuffer(Long) {\n\n        /**\n         * Constructs a new ByteBuffer.\n         * @class The swiss army knife for binary data in JavaScript.\n         * @exports ByteBuffer\n         * @constructor\n         * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @expose\n         */\n        var ByteBuffer = function(capacity, littleEndian, noAssert) {\n            if (typeof capacity     === 'undefined') capacity     = ByteBuffer.DEFAULT_CAPACITY;\n            if (typeof littleEndian === 'undefined') littleEndian = ByteBuffer.DEFAULT_ENDIAN;\n            if (typeof noAssert     === 'undefined') noAssert     = ByteBuffer.DEFAULT_NOASSERT;\n            if (!noAssert) {\n                capacity = capacity | 0;\n                if (capacity < 0)\n                    throw RangeError(\"Illegal capacity\");\n                littleEndian = !!littleEndian;\n                noAssert = !!noAssert;\n            }\n\n            /**\n             * Backing buffer.\n             * @type {!ArrayBuffer}\n             * @expose\n             */\n            this.buffer = capacity === 0 ? EMPTY_BUFFER : new ArrayBuffer(capacity);\n\n            /**\n             * Data view to manipulate the backing buffer. Becomes `null` if the backing buffer has a capacity of `0`.\n             * @type {?DataView}\n             * @expose\n             */\n            this.view = capacity === 0 ? null : new DataView(this.buffer);\n\n            /**\n             * Absolute read/write offset.\n             * @type {number}\n             * @expose\n             * @see ByteBuffer#flip\n             * @see ByteBuffer#clear\n             */\n            this.offset = 0;\n\n            /**\n             * Marked offset.\n             * @type {number}\n             * @expose\n             * @see ByteBuffer#mark\n             * @see ByteBuffer#reset\n             */\n            this.markedOffset = -1;\n\n            /**\n             * Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.\n             * @type {number}\n             * @expose\n             * @see ByteBuffer#flip\n             * @see ByteBuffer#clear\n             */\n            this.limit = capacity;\n\n            /**\n             * Whether to use little endian byte order, defaults to `false` for big endian.\n             * @type {boolean}\n             * @expose\n             */\n            this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : false;\n\n            /**\n             * Whether to skip assertions of offsets and values, defaults to `false`.\n             * @type {boolean}\n             * @expose\n             */\n            this.noAssert = !!noAssert;\n        };\n\n        /**\n         * ByteBuffer version.\n         * @type {string}\n         * @const\n         * @expose\n         */\n        ByteBuffer.VERSION = \"3.5.5\";\n\n        /**\n         * Little endian constant that can be used instead of its boolean value. Evaluates to `true`.\n         * @type {boolean}\n         * @const\n         * @expose\n         */\n        ByteBuffer.LITTLE_ENDIAN = true;\n\n        /**\n         * Big endian constant that can be used instead of its boolean value. Evaluates to `false`.\n         * @type {boolean}\n         * @const\n         * @expose\n         */\n        ByteBuffer.BIG_ENDIAN = false;\n\n        /**\n         * Default initial capacity of `16`.\n         * @type {number}\n         * @expose\n         */\n        ByteBuffer.DEFAULT_CAPACITY = 16;\n\n        /**\n         * Default endianess of `false` for big endian.\n         * @type {boolean}\n         * @expose\n         */\n        ByteBuffer.DEFAULT_ENDIAN = ByteBuffer.BIG_ENDIAN;\n\n        /**\n         * Default no assertions flag of `false`.\n         * @type {boolean}\n         * @expose\n         */\n        ByteBuffer.DEFAULT_NOASSERT = false;\n\n        /**\n         * A `Long` class for representing a 64-bit two's-complement integer value. May be `null` if Long.js has not been loaded\n         *  and int64 support is not available.\n         * @type {?Long}\n         * @const\n         * @see https://github.com/dcodeIO/Long.js\n         * @expose\n         */\n        ByteBuffer.Long = Long || null;\n\n        /**\n         * @alias ByteBuffer.prototype\n         * @inner\n         */\n        var ByteBufferPrototype = ByteBuffer.prototype;\n\n        // helpers\n\n        /**\n         * @type {!ArrayBuffer}\n         * @inner\n         */\n        var EMPTY_BUFFER = new ArrayBuffer(0);\n\n        /**\n         * String.fromCharCode reference for compile-time renaming.\n         * @type {function(...number):string}\n         * @inner\n         */\n        var stringFromCharCode = String.fromCharCode;\n\n        /**\n         * Creates a source function for a string.\n         * @param {string} s String to read from\n         * @returns {function():number|null} Source function returning the next char code respectively `null` if there are\n         *  no more characters left.\n         * @throws {TypeError} If the argument is invalid\n         * @inner\n         */\n        function stringSource(s) {\n            var i=0; return function() {\n                return i < s.length ? s.charCodeAt(i++) : null;\n            };\n        }\n\n        /**\n         * Creates a destination function for a string.\n         * @returns {function(number=):undefined|string} Destination function successively called with the next char code.\n         *  Returns the final string when called without arguments.\n         * @inner\n         */\n        function stringDestination() {\n            var cs = [], ps = []; return function() {\n                if (arguments.length === 0)\n                    return ps.join('')+stringFromCharCode.apply(String, cs);\n                if (cs.length + arguments.length > 1024)\n                    ps.push(stringFromCharCode.apply(String, cs)),\n                        cs.length = 0;\n                Array.prototype.push.apply(cs, arguments);\n            };\n        }\n\n        /**\n         * Allocates a new ByteBuffer backed by a buffer of the specified capacity.\n         * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer}\n         * @expose\n         */\n        ByteBuffer.allocate = function(capacity, littleEndian, noAssert) {\n            return new ByteBuffer(capacity, littleEndian, noAssert);\n        };\n\n        /**\n         * Concatenates multiple ByteBuffers into one.\n         * @param {!Array.<!ByteBuffer|!ArrayBuffer|!Uint8Array|string>} buffers Buffers to concatenate\n         * @param {(string|boolean)=} encoding String encoding if `buffers` contains a string (\"base64\", \"hex\", \"binary\",\n         *  defaults to \"utf8\")\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order for the resulting ByteBuffer. Defaults\n         *  to {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values for the resulting ByteBuffer. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} Concatenated ByteBuffer\n         * @expose\n         */\n        ByteBuffer.concat = function(buffers, encoding, littleEndian, noAssert) {\n            if (typeof encoding === 'boolean' || typeof encoding !== 'string') {\n                noAssert = littleEndian;\n                littleEndian = encoding;\n                encoding = undefined;\n            }\n            var capacity = 0;\n            for (var i=0, k=buffers.length, length; i<k; ++i) {\n                if (!ByteBuffer.isByteBuffer(buffers[i]))\n                    buffers[i] = ByteBuffer.wrap(buffers[i], encoding);\n                length = buffers[i].limit - buffers[i].offset;\n                if (length > 0) capacity += length;\n            }\n            if (capacity === 0)\n                return new ByteBuffer(0, littleEndian, noAssert);\n            var bb = new ByteBuffer(capacity, littleEndian, noAssert),\n                bi;\n            var view = new Uint8Array(bb.buffer);\n            i=0; while (i<k) {\n                bi = buffers[i++];\n                length = bi.limit - bi.offset;\n                if (length <= 0) continue;\n                view.set(new Uint8Array(bi.buffer).subarray(bi.offset, bi.limit), bb.offset);\n                bb.offset += length;\n            }\n            bb.limit = bb.offset;\n            bb.offset = 0;\n            return bb;\n        };\n\n        /**\n         * Tests if the specified type is a ByteBuffer.\n         * @param {*} bb ByteBuffer to test\n         * @returns {boolean} `true` if it is a ByteBuffer, otherwise `false`\n         * @expose\n         */\n        ByteBuffer.isByteBuffer = function(bb) {\n            return (bb && bb instanceof ByteBuffer) === true;\n        };\n        /**\n         * Gets the backing buffer type.\n         * @returns {Function} `Buffer` for NB builds, `ArrayBuffer` for AB builds (classes)\n         * @expose\n         */\n        ByteBuffer.type = function() {\n            return ArrayBuffer;\n        };\n\n        /**\n         * Wraps a buffer or a string. Sets the allocated ByteBuffer's {@link ByteBuffer#offset} to `0` and its\n         *  {@link ByteBuffer#limit} to the length of the wrapped data.\n         * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string|!Array.<number>} buffer Anything that can be wrapped\n         * @param {(string|boolean)=} encoding String encoding if `buffer` is a string (\"base64\", \"hex\", \"binary\", defaults to\n         *  \"utf8\")\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} A ByteBuffer wrapping `buffer`\n         * @expose\n         */\n        ByteBuffer.wrap = function(buffer, encoding, littleEndian, noAssert) {\n            if (typeof encoding !== 'string') {\n                noAssert = littleEndian;\n                littleEndian = encoding;\n                encoding = undefined;\n            }\n            if (typeof buffer === 'string') {\n                if (typeof encoding === 'undefined')\n                    encoding = \"utf8\";\n                switch (encoding) {\n                    case \"base64\":\n                        return ByteBuffer.fromBase64(buffer, littleEndian);\n                    case \"hex\":\n                        return ByteBuffer.fromHex(buffer, littleEndian);\n                    case \"binary\":\n                        return ByteBuffer.fromBinary(buffer, littleEndian);\n                    case \"utf8\":\n                        return ByteBuffer.fromUTF8(buffer, littleEndian);\n                    case \"debug\":\n                        return ByteBuffer.fromDebug(buffer, littleEndian);\n                    default:\n                        throw Error(\"Unsupported encoding: \"+encoding);\n                }\n            }\n            if (buffer === null || typeof buffer !== 'object')\n                throw TypeError(\"Illegal buffer\");\n            var bb;\n            if (ByteBuffer.isByteBuffer(buffer)) {\n                bb = ByteBufferPrototype.clone.call(buffer);\n                bb.markedOffset = -1;\n                return bb;\n            }\n            if (buffer instanceof Uint8Array) { // Extract ArrayBuffer from Uint8Array\n                bb = new ByteBuffer(0, littleEndian, noAssert);\n                if (buffer.length > 0) { // Avoid references to more than one EMPTY_BUFFER\n                    bb.buffer = buffer.buffer;\n                    bb.offset = buffer.byteOffset;\n                    bb.limit = buffer.byteOffset + buffer.length;\n                    bb.view = buffer.length > 0 ? new DataView(buffer.buffer) : null;\n                }\n            } else if (buffer instanceof ArrayBuffer) { // Reuse ArrayBuffer\n                bb = new ByteBuffer(0, littleEndian, noAssert);\n                if (buffer.byteLength > 0) {\n                    bb.buffer = buffer;\n                    bb.offset = 0;\n                    bb.limit = buffer.byteLength;\n                    bb.view = buffer.byteLength > 0 ? new DataView(buffer) : null;\n                }\n            } else if (Object.prototype.toString.call(buffer) === \"[object Array]\") { // Create from octets\n                bb = new ByteBuffer(buffer.length, littleEndian, noAssert);\n                bb.limit = buffer.length;\n                for (i=0; i<buffer.length; ++i)\n                    bb.view.setUint8(i, buffer[i]);\n            } else\n                throw TypeError(\"Illegal buffer\"); // Otherwise fail\n            return bb;\n        };\n\n        // types/ints/int8\n\n        /**\n         * Writes an 8bit signed integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.writeInt8 = function(value, offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value |= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            offset += 1;\n            var capacity0 = this.buffer.byteLength;\n            if (offset > capacity0)\n                this.resize((capacity0 *= 2) > offset ? capacity0 : offset);\n            offset -= 1;\n            this.view.setInt8(offset, value);\n            if (relative) this.offset += 1;\n            return this;\n        };\n\n        /**\n         * Writes an 8bit signed integer. This is an alias of {@link ByteBuffer#writeInt8}.\n         * @function\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.writeByte = ByteBufferPrototype.writeInt8;\n\n        /**\n         * Reads an 8bit signed integer.\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\n         * @returns {number} Value read\n         * @expose\n         */\n        ByteBufferPrototype.readInt8 = function(offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n            }\n            var value = this.view.getInt8(offset);\n            if (relative) this.offset += 1;\n            return value;\n        };\n\n        /**\n         * Reads an 8bit signed integer. This is an alias of {@link ByteBuffer#readInt8}.\n         * @function\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\n         * @returns {number} Value read\n         * @expose\n         */\n        ByteBufferPrototype.readByte = ByteBufferPrototype.readInt8;\n\n        /**\n         * Writes an 8bit unsigned integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.writeUint8 = function(value, offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value >>>= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            offset += 1;\n            var capacity1 = this.buffer.byteLength;\n            if (offset > capacity1)\n                this.resize((capacity1 *= 2) > offset ? capacity1 : offset);\n            offset -= 1;\n            this.view.setUint8(offset, value);\n            if (relative) this.offset += 1;\n            return this;\n        };\n\n        /**\n         * Reads an 8bit unsigned integer.\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\n         * @returns {number} Value read\n         * @expose\n         */\n        ByteBufferPrototype.readUint8 = function(offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n            }\n            var value = this.view.getUint8(offset);\n            if (relative) this.offset += 1;\n            return value;\n        };\n\n        // types/ints/int16\n\n        /**\n         * Writes a 16bit signed integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\n         * @throws {TypeError} If `offset` or `value` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @expose\n         */\n        ByteBufferPrototype.writeInt16 = function(value, offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value |= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            offset += 2;\n            var capacity2 = this.buffer.byteLength;\n            if (offset > capacity2)\n                this.resize((capacity2 *= 2) > offset ? capacity2 : offset);\n            offset -= 2;\n            this.view.setInt16(offset, value, this.littleEndian);\n            if (relative) this.offset += 2;\n            return this;\n        };\n\n        /**\n         * Writes a 16bit signed integer. This is an alias of {@link ByteBuffer#writeInt16}.\n         * @function\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\n         * @throws {TypeError} If `offset` or `value` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @expose\n         */\n        ByteBufferPrototype.writeShort = ByteBufferPrototype.writeInt16;\n\n        /**\n         * Reads a 16bit signed integer.\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\n         * @returns {number} Value read\n         * @throws {TypeError} If `offset` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @expose\n         */\n        ByteBufferPrototype.readInt16 = function(offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 2 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+2+\") <= \"+this.buffer.byteLength);\n            }\n            var value = this.view.getInt16(offset, this.littleEndian);\n            if (relative) this.offset += 2;\n            return value;\n        };\n\n        /**\n         * Reads a 16bit signed integer. This is an alias of {@link ByteBuffer#readInt16}.\n         * @function\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\n         * @returns {number} Value read\n         * @throws {TypeError} If `offset` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @expose\n         */\n        ByteBufferPrototype.readShort = ByteBufferPrototype.readInt16;\n\n        /**\n         * Writes a 16bit unsigned integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\n         * @throws {TypeError} If `offset` or `value` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @expose\n         */\n        ByteBufferPrototype.writeUint16 = function(value, offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value >>>= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            offset += 2;\n            var capacity3 = this.buffer.byteLength;\n            if (offset > capacity3)\n                this.resize((capacity3 *= 2) > offset ? capacity3 : offset);\n            offset -= 2;\n            this.view.setUint16(offset, value, this.littleEndian);\n            if (relative) this.offset += 2;\n            return this;\n        };\n\n        /**\n         * Reads a 16bit unsigned integer.\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\n         * @returns {number} Value read\n         * @throws {TypeError} If `offset` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @expose\n         */\n        ByteBufferPrototype.readUint16 = function(offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 2 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+2+\") <= \"+this.buffer.byteLength);\n            }\n            var value = this.view.getUint16(offset, this.littleEndian);\n            if (relative) this.offset += 2;\n            return value;\n        };\n\n        // types/ints/int32\n\n        /**\n         * Writes a 32bit signed integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @expose\n         */\n        ByteBufferPrototype.writeInt32 = function(value, offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value |= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            offset += 4;\n            var capacity4 = this.buffer.byteLength;\n            if (offset > capacity4)\n                this.resize((capacity4 *= 2) > offset ? capacity4 : offset);\n            offset -= 4;\n            this.view.setInt32(offset, value, this.littleEndian);\n            if (relative) this.offset += 4;\n            return this;\n        };\n\n        /**\n         * Writes a 32bit signed integer. This is an alias of {@link ByteBuffer#writeInt32}.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @expose\n         */\n        ByteBufferPrototype.writeInt = ByteBufferPrototype.writeInt32;\n\n        /**\n         * Reads a 32bit signed integer.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {number} Value read\n         * @expose\n         */\n        ByteBufferPrototype.readInt32 = function(offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 4 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);\n            }\n            var value = this.view.getInt32(offset, this.littleEndian);\n            if (relative) this.offset += 4;\n            return value;\n        };\n\n        /**\n         * Reads a 32bit signed integer. This is an alias of {@link ByteBuffer#readInt32}.\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {number} Value read\n         * @expose\n         */\n        ByteBufferPrototype.readInt = ByteBufferPrototype.readInt32;\n\n        /**\n         * Writes a 32bit unsigned integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @expose\n         */\n        ByteBufferPrototype.writeUint32 = function(value, offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value >>>= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            offset += 4;\n            var capacity5 = this.buffer.byteLength;\n            if (offset > capacity5)\n                this.resize((capacity5 *= 2) > offset ? capacity5 : offset);\n            offset -= 4;\n            this.view.setUint32(offset, value, this.littleEndian);\n            if (relative) this.offset += 4;\n            return this;\n        };\n\n        /**\n         * Reads a 32bit unsigned integer.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {number} Value read\n         * @expose\n         */\n        ByteBufferPrototype.readUint32 = function(offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 4 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);\n            }\n            var value = this.view.getUint32(offset, this.littleEndian);\n            if (relative) this.offset += 4;\n            return value;\n        };\n\n        // types/ints/int64\n\n        if (Long) {\n\n            /**\n             * Writes a 64bit signed integer.\n             * @param {number|!Long} value Value to write\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n             * @returns {!ByteBuffer} this\n             * @expose\n             */\n            ByteBufferPrototype.writeInt64 = function(value, offset) {\n                var relative = typeof offset === 'undefined';\n                if (relative) offset = this.offset;\n                if (!this.noAssert) {\n                    if (typeof value === 'number')\n                        value = Long.fromNumber(value);\n                    else if (typeof value === 'string')\n                        value = Long.fromString(value);\n                    else if (!(value && value instanceof Long))\n                        throw TypeError(\"Illegal value: \"+value+\" (not an integer or Long)\");\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n                }\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value);\n                else if (typeof value === 'string')\n                    value = Long.fromString(value);\n                offset += 8;\n                var capacity6 = this.buffer.byteLength;\n                if (offset > capacity6)\n                    this.resize((capacity6 *= 2) > offset ? capacity6 : offset);\n                offset -= 8;\n                if (this.littleEndian) {\n                    this.view.setInt32(offset  , value.low , true);\n                    this.view.setInt32(offset+4, value.high, true);\n                } else {\n                    this.view.setInt32(offset  , value.high, false);\n                    this.view.setInt32(offset+4, value.low , false);\n                }\n                if (relative) this.offset += 8;\n                return this;\n            };\n\n            /**\n             * Writes a 64bit signed integer. This is an alias of {@link ByteBuffer#writeInt64}.\n             * @param {number|!Long} value Value to write\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n             * @returns {!ByteBuffer} this\n             * @expose\n             */\n            ByteBufferPrototype.writeLong = ByteBufferPrototype.writeInt64;\n\n            /**\n             * Reads a 64bit signed integer.\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n             * @returns {!Long}\n             * @expose\n             */\n            ByteBufferPrototype.readInt64 = function(offset) {\n                var relative = typeof offset === 'undefined';\n                if (relative) offset = this.offset;\n                if (!this.noAssert) {\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + 8 > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+8+\") <= \"+this.buffer.byteLength);\n                }\n                var value = this.littleEndian\n                    ? new Long(this.view.getInt32(offset  , true ), this.view.getInt32(offset+4, true ), false)\n                    : new Long(this.view.getInt32(offset+4, false), this.view.getInt32(offset  , false), false);\n                if (relative) this.offset += 8;\n                return value;\n            };\n\n            /**\n             * Reads a 64bit signed integer. This is an alias of {@link ByteBuffer#readInt64}.\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n             * @returns {!Long}\n             * @expose\n             */\n            ByteBufferPrototype.readLong = ByteBufferPrototype.readInt64;\n\n            /**\n             * Writes a 64bit unsigned integer.\n             * @param {number|!Long} value Value to write\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n             * @returns {!ByteBuffer} this\n             * @expose\n             */\n            ByteBufferPrototype.writeUint64 = function(value, offset) {\n                var relative = typeof offset === 'undefined';\n                if (relative) offset = this.offset;\n                if (!this.noAssert) {\n                    if (typeof value === 'number')\n                        value = Long.fromNumber(value);\n                    else if (typeof value === 'string')\n                        value = Long.fromString(value);\n                    else if (!(value && value instanceof Long))\n                        throw TypeError(\"Illegal value: \"+value+\" (not an integer or Long)\");\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n                }\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value);\n                else if (typeof value === 'string')\n                    value = Long.fromString(value);\n                offset += 8;\n                var capacity7 = this.buffer.byteLength;\n                if (offset > capacity7)\n                    this.resize((capacity7 *= 2) > offset ? capacity7 : offset);\n                offset -= 8;\n                if (this.littleEndian) {\n                    this.view.setInt32(offset  , value.low , true);\n                    this.view.setInt32(offset+4, value.high, true);\n                } else {\n                    this.view.setInt32(offset  , value.high, false);\n                    this.view.setInt32(offset+4, value.low , false);\n                }\n                if (relative) this.offset += 8;\n                return this;\n            };\n\n            /**\n             * Reads a 64bit unsigned integer.\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n             * @returns {!Long}\n             * @expose\n             */\n            ByteBufferPrototype.readUint64 = function(offset) {\n                var relative = typeof offset === 'undefined';\n                if (relative) offset = this.offset;\n                if (!this.noAssert) {\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + 8 > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+8+\") <= \"+this.buffer.byteLength);\n                }\n                var value = this.littleEndian\n                    ? new Long(this.view.getInt32(offset  , true ), this.view.getInt32(offset+4, true ), true)\n                    : new Long(this.view.getInt32(offset+4, false), this.view.getInt32(offset  , false), true);\n                if (relative) this.offset += 8;\n                return value;\n            };\n\n        } // Long\n\n\n        // types/floats/float32\n\n        /**\n         * Writes a 32bit float.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.writeFloat32 = function(value, offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof value !== 'number')\n                    throw TypeError(\"Illegal value: \"+value+\" (not a number)\");\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            offset += 4;\n            var capacity8 = this.buffer.byteLength;\n            if (offset > capacity8)\n                this.resize((capacity8 *= 2) > offset ? capacity8 : offset);\n            offset -= 4;\n            this.view.setFloat32(offset, value, this.littleEndian);\n            if (relative) this.offset += 4;\n            return this;\n        };\n\n        /**\n         * Writes a 32bit float. This is an alias of {@link ByteBuffer#writeFloat32}.\n         * @function\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.writeFloat = ByteBufferPrototype.writeFloat32;\n\n        /**\n         * Reads a 32bit float.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {number}\n         * @expose\n         */\n        ByteBufferPrototype.readFloat32 = function(offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 4 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);\n            }\n            var value = this.view.getFloat32(offset, this.littleEndian);\n            if (relative) this.offset += 4;\n            return value;\n        };\n\n        /**\n         * Reads a 32bit float. This is an alias of {@link ByteBuffer#readFloat32}.\n         * @function\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\n         * @returns {number}\n         * @expose\n         */\n        ByteBufferPrototype.readFloat = ByteBufferPrototype.readFloat32;\n\n        // types/floats/float64\n\n        /**\n         * Writes a 64bit float.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.writeFloat64 = function(value, offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof value !== 'number')\n                    throw TypeError(\"Illegal value: \"+value+\" (not a number)\");\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            offset += 8;\n            var capacity9 = this.buffer.byteLength;\n            if (offset > capacity9)\n                this.resize((capacity9 *= 2) > offset ? capacity9 : offset);\n            offset -= 8;\n            this.view.setFloat64(offset, value, this.littleEndian);\n            if (relative) this.offset += 8;\n            return this;\n        };\n\n        /**\n         * Writes a 64bit float. This is an alias of {@link ByteBuffer#writeFloat64}.\n         * @function\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.writeDouble = ByteBufferPrototype.writeFloat64;\n\n        /**\n         * Reads a 64bit float.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n         * @returns {number}\n         * @expose\n         */\n        ByteBufferPrototype.readFloat64 = function(offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 8 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+8+\") <= \"+this.buffer.byteLength);\n            }\n            var value = this.view.getFloat64(offset, this.littleEndian);\n            if (relative) this.offset += 8;\n            return value;\n        };\n\n        /**\n         * Reads a 64bit float. This is an alias of {@link ByteBuffer#readFloat64}.\n         * @function\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\n         * @returns {number}\n         * @expose\n         */\n        ByteBufferPrototype.readDouble = ByteBufferPrototype.readFloat64;\n\n\n        // types/varints/varint32\n\n        /**\n         * Maximum number of bytes required to store a 32bit base 128 variable-length integer.\n         * @type {number}\n         * @const\n         * @expose\n         */\n        ByteBuffer.MAX_VARINT32_BYTES = 5;\n\n        /**\n         * Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.\n         * @param {number} value Value to encode\n         * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT32_BYTES}\n         * @expose\n         */\n        ByteBuffer.calculateVarint32 = function(value) {\n            // ref: src/google/protobuf/io/coded_stream.cc\n            value = value >>> 0;\n                 if (value < 1 << 7 ) return 1;\n            else if (value < 1 << 14) return 2;\n            else if (value < 1 << 21) return 3;\n            else if (value < 1 << 28) return 4;\n            else                      return 5;\n        };\n\n        /**\n         * Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.\n         * @param {number} n Signed 32bit integer\n         * @returns {number} Unsigned zigzag encoded 32bit integer\n         * @expose\n         */\n        ByteBuffer.zigZagEncode32 = function(n) {\n            return (((n |= 0) << 1) ^ (n >> 31)) >>> 0; // ref: src/google/protobuf/wire_format_lite.h\n        };\n\n        /**\n         * Decodes a zigzag encoded signed 32bit integer.\n         * @param {number} n Unsigned zigzag encoded 32bit integer\n         * @returns {number} Signed 32bit integer\n         * @expose\n         */\n        ByteBuffer.zigZagDecode32 = function(n) {\n            return ((n >>> 1) ^ -(n & 1)) | 0; // // ref: src/google/protobuf/wire_format_lite.h\n        };\n\n        /**\n         * Writes a 32bit base 128 variable-length integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted.\n         * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written\n         * @expose\n         */\n        ByteBufferPrototype.writeVarint32 = function(value, offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value |= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            var size = ByteBuffer.calculateVarint32(value),\n                b;\n            offset += size;\n            var capacity10 = this.buffer.byteLength;\n            if (offset > capacity10)\n                this.resize((capacity10 *= 2) > offset ? capacity10 : offset);\n            offset -= size;\n            // ref: http://code.google.com/searchframe#WTeibokF6gE/trunk/src/google/protobuf/io/coded_stream.cc\n            this.view.setUint8(offset, b = value | 0x80);\n            value >>>= 0;\n            if (value >= 1 << 7) {\n                b = (value >> 7) | 0x80;\n                this.view.setUint8(offset+1, b);\n                if (value >= 1 << 14) {\n                    b = (value >> 14) | 0x80;\n                    this.view.setUint8(offset+2, b);\n                    if (value >= 1 << 21) {\n                        b = (value >> 21) | 0x80;\n                        this.view.setUint8(offset+3, b);\n                        if (value >= 1 << 28) {\n                            this.view.setUint8(offset+4, (value >> 28) & 0x0F);\n                            size = 5;\n                        } else {\n                            this.view.setUint8(offset+3, b & 0x7F);\n                            size = 4;\n                        }\n                    } else {\n                        this.view.setUint8(offset+2, b & 0x7F);\n                        size = 3;\n                    }\n                } else {\n                    this.view.setUint8(offset+1, b & 0x7F);\n                    size = 2;\n                }\n            } else {\n                this.view.setUint8(offset, b & 0x7F);\n                size = 1;\n            }\n            if (relative) {\n                this.offset += size;\n                return this;\n            }\n            return size;\n        };\n\n        /**\n         * Writes a zig-zag encoded 32bit base 128 variable-length integer.\n         * @param {number} value Value to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted.\n         * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written\n         * @expose\n         */\n        ByteBufferPrototype.writeVarint32ZigZag = function(value, offset) {\n            return this.writeVarint32(ByteBuffer.zigZagEncode32(value), offset);\n        };\n\n        /**\n         * Reads a 32bit base 128 variable-length integer.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted.\n         * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read\n         *  and the actual number of bytes read.\n         * @throws {Error} If it's not a valid varint. Has a property `truncated = true` if there is not enough data available\n         *  to fully decode the varint.\n         * @expose\n         */\n        ByteBufferPrototype.readVarint32 = function(offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n            }\n            // ref: src/google/protobuf/io/coded_stream.cc\n            var size = 0,\n                value = 0 >>> 0,\n                temp,\n                ioffset;\n            do {\n                ioffset = offset+size;\n                if (!this.noAssert && ioffset > this.limit) {\n                    var err = Error(\"Truncated\");\n                    err['truncated'] = true;\n                    throw err;\n                }\n                temp = this.view.getUint8(ioffset);\n                if (size < 5)\n                    value |= ((temp&0x7F)<<(7*size)) >>> 0;\n                ++size;\n            } while ((temp & 0x80) === 0x80);\n            value = value | 0; // Make sure to discard the higher order bits\n            if (relative) {\n                this.offset += size;\n                return value;\n            }\n            return {\n                \"value\": value,\n                \"length\": size\n            };\n        };\n\n        /**\n         * Reads a zig-zag encoded 32bit base 128 variable-length integer.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted.\n         * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read\n         *  and the actual number of bytes read.\n         * @throws {Error} If it's not a valid varint\n         * @expose\n         */\n        ByteBufferPrototype.readVarint32ZigZag = function(offset) {\n            var val = this.readVarint32(offset);\n            if (typeof val === 'object')\n                val[\"value\"] = ByteBuffer.zigZagDecode32(val[\"value\"]);\n            else\n                val = ByteBuffer.zigZagDecode32(val);\n            return val;\n        };\n\n        // types/varints/varint64\n\n        if (Long) {\n\n            /**\n             * Maximum number of bytes required to store a 64bit base 128 variable-length integer.\n             * @type {number}\n             * @const\n             * @expose\n             */\n            ByteBuffer.MAX_VARINT64_BYTES = 10;\n\n            /**\n             * Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.\n             * @param {number|!Long} value Value to encode\n             * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT64_BYTES}\n             * @expose\n             */\n            ByteBuffer.calculateVarint64 = function(value) {\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value);\n                else if (typeof value === 'string')\n                    value = Long.fromString(value);\n                // ref: src/google/protobuf/io/coded_stream.cc\n                var part0 = value.toInt() >>> 0,\n                    part1 = value.shiftRightUnsigned(28).toInt() >>> 0,\n                    part2 = value.shiftRightUnsigned(56).toInt() >>> 0;\n                if (part2 == 0) {\n                    if (part1 == 0) {\n                        if (part0 < 1 << 14)\n                            return part0 < 1 << 7 ? 1 : 2;\n                        else\n                            return part0 < 1 << 21 ? 3 : 4;\n                    } else {\n                        if (part1 < 1 << 14)\n                            return part1 < 1 << 7 ? 5 : 6;\n                        else\n                            return part1 < 1 << 21 ? 7 : 8;\n                    }\n                } else\n                    return part2 < 1 << 7 ? 9 : 10;\n            };\n\n            /**\n             * Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.\n             * @param {number|!Long} value Signed long\n             * @returns {!Long} Unsigned zigzag encoded long\n             * @expose\n             */\n            ByteBuffer.zigZagEncode64 = function(value) {\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value, false);\n                else if (typeof value === 'string')\n                    value = Long.fromString(value, false);\n                else if (value.unsigned !== false) value = value.toSigned();\n                // ref: src/google/protobuf/wire_format_lite.h\n                return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();\n            };\n\n            /**\n             * Decodes a zigzag encoded signed 64bit integer.\n             * @param {!Long|number} value Unsigned zigzag encoded long or JavaScript number\n             * @returns {!Long} Signed long\n             * @expose\n             */\n            ByteBuffer.zigZagDecode64 = function(value) {\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value, false);\n                else if (typeof value === 'string')\n                    value = Long.fromString(value, false);\n                else if (value.unsigned !== false) value = value.toSigned();\n                // ref: src/google/protobuf/wire_format_lite.h\n                return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();\n            };\n\n            /**\n             * Writes a 64bit base 128 variable-length integer.\n             * @param {number|Long} value Value to write\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n             *  written if omitted.\n             * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.\n             * @expose\n             */\n            ByteBufferPrototype.writeVarint64 = function(value, offset) {\n                var relative = typeof offset === 'undefined';\n                if (relative) offset = this.offset;\n                if (!this.noAssert) {\n                    if (typeof value === 'number')\n                        value = Long.fromNumber(value);\n                    else if (typeof value === 'string')\n                        value = Long.fromString(value);\n                    else if (!(value && value instanceof Long))\n                        throw TypeError(\"Illegal value: \"+value+\" (not an integer or Long)\");\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n                }\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value, false);\n                else if (typeof value === 'string')\n                    value = Long.fromString(value, false);\n                else if (value.unsigned !== false) value = value.toSigned();\n                var size = ByteBuffer.calculateVarint64(value),\n                    part0 = value.toInt() >>> 0,\n                    part1 = value.shiftRightUnsigned(28).toInt() >>> 0,\n                    part2 = value.shiftRightUnsigned(56).toInt() >>> 0;\n                offset += size;\n                var capacity11 = this.buffer.byteLength;\n                if (offset > capacity11)\n                    this.resize((capacity11 *= 2) > offset ? capacity11 : offset);\n                offset -= size;\n                switch (size) {\n                    case 10: this.view.setUint8(offset+9, (part2 >>>  7) & 0x01);\n                    case 9 : this.view.setUint8(offset+8, size !== 9 ? (part2       ) | 0x80 : (part2       ) & 0x7F);\n                    case 8 : this.view.setUint8(offset+7, size !== 8 ? (part1 >>> 21) | 0x80 : (part1 >>> 21) & 0x7F);\n                    case 7 : this.view.setUint8(offset+6, size !== 7 ? (part1 >>> 14) | 0x80 : (part1 >>> 14) & 0x7F);\n                    case 6 : this.view.setUint8(offset+5, size !== 6 ? (part1 >>>  7) | 0x80 : (part1 >>>  7) & 0x7F);\n                    case 5 : this.view.setUint8(offset+4, size !== 5 ? (part1       ) | 0x80 : (part1       ) & 0x7F);\n                    case 4 : this.view.setUint8(offset+3, size !== 4 ? (part0 >>> 21) | 0x80 : (part0 >>> 21) & 0x7F);\n                    case 3 : this.view.setUint8(offset+2, size !== 3 ? (part0 >>> 14) | 0x80 : (part0 >>> 14) & 0x7F);\n                    case 2 : this.view.setUint8(offset+1, size !== 2 ? (part0 >>>  7) | 0x80 : (part0 >>>  7) & 0x7F);\n                    case 1 : this.view.setUint8(offset  , size !== 1 ? (part0       ) | 0x80 : (part0       ) & 0x7F);\n                }\n                if (relative) {\n                    this.offset += size;\n                    return this;\n                } else {\n                    return size;\n                }\n            };\n\n            /**\n             * Writes a zig-zag encoded 64bit base 128 variable-length integer.\n             * @param {number|Long} value Value to write\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n             *  written if omitted.\n             * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.\n             * @expose\n             */\n            ByteBufferPrototype.writeVarint64ZigZag = function(value, offset) {\n                return this.writeVarint64(ByteBuffer.zigZagEncode64(value), offset);\n            };\n\n            /**\n             * Reads a 64bit base 128 variable-length integer. Requires Long.js.\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n             *  read if omitted.\n             * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and\n             *  the actual number of bytes read.\n             * @throws {Error} If it's not a valid varint\n             * @expose\n             */\n            ByteBufferPrototype.readVarint64 = function(offset) {\n                var relative = typeof offset === 'undefined';\n                if (relative) offset = this.offset;\n                if (!this.noAssert) {\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n                }\n                // ref: src/google/protobuf/io/coded_stream.cc\n                var start = offset,\n                    part0 = 0,\n                    part1 = 0,\n                    part2 = 0,\n                    b  = 0;\n                b = this.view.getUint8(offset++); part0  = (b & 0x7F)      ; if (b & 0x80) {\n                b = this.view.getUint8(offset++); part0 |= (b & 0x7F) <<  7; if (b & 0x80) {\n                b = this.view.getUint8(offset++); part0 |= (b & 0x7F) << 14; if (b & 0x80) {\n                b = this.view.getUint8(offset++); part0 |= (b & 0x7F) << 21; if (b & 0x80) {\n                b = this.view.getUint8(offset++); part1  = (b & 0x7F)      ; if (b & 0x80) {\n                b = this.view.getUint8(offset++); part1 |= (b & 0x7F) <<  7; if (b & 0x80) {\n                b = this.view.getUint8(offset++); part1 |= (b & 0x7F) << 14; if (b & 0x80) {\n                b = this.view.getUint8(offset++); part1 |= (b & 0x7F) << 21; if (b & 0x80) {\n                b = this.view.getUint8(offset++); part2  = (b & 0x7F)      ; if (b & 0x80) {\n                b = this.view.getUint8(offset++); part2 |= (b & 0x7F) <<  7; if (b & 0x80) {\n                throw Error(\"Buffer overrun\"); }}}}}}}}}}\n                var value = Long.fromBits(part0 | (part1 << 28), (part1 >>> 4) | (part2) << 24, false);\n                if (relative) {\n                    this.offset = offset;\n                    return value;\n                } else {\n                    return {\n                        'value': value,\n                        'length': offset-start\n                    };\n                }\n            };\n\n            /**\n             * Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n             *  read if omitted.\n             * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and\n             *  the actual number of bytes read.\n             * @throws {Error} If it's not a valid varint\n             * @expose\n             */\n            ByteBufferPrototype.readVarint64ZigZag = function(offset) {\n                var val = this.readVarint64(offset);\n                if (val && val['value'] instanceof Long)\n                    val[\"value\"] = ByteBuffer.zigZagDecode64(val[\"value\"]);\n                else\n                    val = ByteBuffer.zigZagDecode64(val);\n                return val;\n            };\n\n        } // Long\n\n\n        // types/strings/cstring\n\n        /**\n         * Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL\n         *  characters itself.\n         * @param {string} str String to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  contained in `str` + 1 if omitted.\n         * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written\n         * @expose\n         */\n        ByteBufferPrototype.writeCString = function(str, offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            var i,\n                k = str.length;\n            if (!this.noAssert) {\n                if (typeof str !== 'string')\n                    throw TypeError(\"Illegal str: Not a string\");\n                for (i=0; i<k; ++i) {\n                    if (str.charCodeAt(i) === 0)\n                        throw RangeError(\"Illegal str: Contains NULL-characters\");\n                }\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            // UTF8 strings do not contain zero bytes in between except for the zero character, so:\n            k = utfx.calculateUTF16asUTF8(stringSource(str))[1];\n            offset += k+1;\n            var capacity12 = this.buffer.byteLength;\n            if (offset > capacity12)\n                this.resize((capacity12 *= 2) > offset ? capacity12 : offset);\n            offset -= k+1;\n            utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\n                this.view.setUint8(offset++, b);\n            }.bind(this));\n            this.view.setUint8(offset++, 0);\n            if (relative) {\n                this.offset = offset;\n                return this;\n            }\n            return k;\n        };\n\n        /**\n         * Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters\n         *  itself.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\n         *  read and the actual number of bytes read.\n         * @expose\n         */\n        ByteBufferPrototype.readCString = function(offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n            }\n            var start = offset,\n                temp;\n            // UTF8 strings do not contain zero bytes in between except for the zero character itself, so:\n            var sd, b = -1;\n            utfx.decodeUTF8toUTF16(function() {\n                if (b === 0) return null;\n                if (offset >= this.limit)\n                    throw RangeError(\"Illegal range: Truncated data, \"+offset+\" < \"+this.limit);\n                return (b = this.view.getUint8(offset++)) === 0 ? null : b;\n            }.bind(this), sd = stringDestination(), true);\n            if (relative) {\n                this.offset = offset;\n                return sd();\n            } else {\n                return {\n                    \"string\": sd(),\n                    \"length\": offset - start\n                };\n            }\n        };\n\n        // types/strings/istring\n\n        /**\n         * Writes a length as uint32 prefixed UTF8 encoded string.\n         * @param {string} str String to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted.\n         * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written\n         * @expose\n         * @see ByteBuffer#writeVarint32\n         */\n        ByteBufferPrototype.writeIString = function(str, offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof str !== 'string')\n                    throw TypeError(\"Illegal str: Not a string\");\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            var start = offset,\n                k;\n            k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];\n            offset += 4+k;\n            var capacity13 = this.buffer.byteLength;\n            if (offset > capacity13)\n                this.resize((capacity13 *= 2) > offset ? capacity13 : offset);\n            offset -= 4+k;\n            this.view.setUint32(offset, k, this.littleEndian);\n            offset += 4;\n            utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\n                this.view.setUint8(offset++, b);\n            }.bind(this));\n            if (offset !== start + 4 + k)\n                throw RangeError(\"Illegal range: Truncated data, \"+offset+\" == \"+(offset+4+k));\n            if (relative) {\n                this.offset = offset;\n                return this;\n            }\n            return offset - start;\n        };\n\n        /**\n         * Reads a length as uint32 prefixed UTF8 encoded string.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\n         *  read and the actual number of bytes read.\n         * @expose\n         * @see ByteBuffer#readVarint32\n         */\n        ByteBufferPrototype.readIString = function(offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 4 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);\n            }\n            var temp = 0,\n                start = offset,\n                str;\n            temp = this.view.getUint32(offset, this.littleEndian);\n            offset += 4;\n            var k = offset + temp,\n                sd;\n            utfx.decodeUTF8toUTF16(function() {\n                return offset < k ? this.view.getUint8(offset++) : null;\n            }.bind(this), sd = stringDestination(), this.noAssert);\n            str = sd();\n            if (relative) {\n                this.offset = offset;\n                return str;\n            } else {\n                return {\n                    'string': str,\n                    'length': offset - start\n                };\n            }\n        };\n\n        // types/strings/utf8string\n\n        /**\n         * Metrics representing number of UTF8 characters. Evaluates to `c`.\n         * @type {string}\n         * @const\n         * @expose\n         */\n        ByteBuffer.METRICS_CHARS = 'c';\n\n        /**\n         * Metrics representing number of bytes. Evaluates to `b`.\n         * @type {string}\n         * @const\n         * @expose\n         */\n        ByteBuffer.METRICS_BYTES = 'b';\n\n        /**\n         * Writes an UTF8 encoded string.\n         * @param {string} str String to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.\n         * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.\n         * @expose\n         */\n        ByteBufferPrototype.writeUTF8String = function(str, offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            var k;\n            var start = offset;\n            k = utfx.calculateUTF16asUTF8(stringSource(str))[1];\n            offset += k;\n            var capacity14 = this.buffer.byteLength;\n            if (offset > capacity14)\n                this.resize((capacity14 *= 2) > offset ? capacity14 : offset);\n            offset -= k;\n            utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\n                this.view.setUint8(offset++, b);\n            }.bind(this));\n            if (relative) {\n                this.offset = offset;\n                return this;\n            }\n            return offset - start;\n        };\n\n        /**\n         * Writes an UTF8 encoded string. This is an alias of {@link ByteBuffer#writeUTF8String}.\n         * @function\n         * @param {string} str String to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.\n         * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.\n         * @expose\n         */\n        ByteBufferPrototype.writeString = ByteBufferPrototype.writeUTF8String;\n\n        /**\n         * Calculates the number of UTF8 characters of a string. JavaScript itself uses UTF-16, so that a string's\n         *  `length` property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.\n         * @function\n         * @param {string} str String to calculate\n         * @returns {number} Number of UTF8 characters\n         * @expose\n         */\n        ByteBuffer.calculateUTF8Chars = function(str) {\n            return utfx.calculateUTF16asUTF8(stringSource(str))[0];\n        };\n\n        /**\n         * Calculates the number of UTF8 bytes of a string.\n         * @function\n         * @param {string} str String to calculate\n         * @returns {number} Number of UTF8 bytes\n         * @expose\n         */\n        ByteBuffer.calculateUTF8Bytes = function(str) {\n            return utfx.calculateUTF16asUTF8(stringSource(str))[1];\n        };\n\n        /**\n         * Reads an UTF8 encoded string.\n         * @param {number} length Number of characters or bytes to read.\n         * @param {string=} metrics Metrics specifying what `length` is meant to count. Defaults to\n         *  {@link ByteBuffer.METRICS_CHARS}.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\n         *  read and the actual number of bytes read.\n         * @expose\n         */\n        ByteBufferPrototype.readUTF8String = function(length, metrics, offset) {\n            if (typeof metrics === 'number') {\n                offset = metrics;\n                metrics = undefined;\n            }\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (typeof metrics === 'undefined') metrics = ByteBuffer.METRICS_CHARS;\n            if (!this.noAssert) {\n                if (typeof length !== 'number' || length % 1 !== 0)\n                    throw TypeError(\"Illegal length: \"+length+\" (not an integer)\");\n                length |= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            var i = 0,\n                start = offset,\n                sd;\n            if (metrics === ByteBuffer.METRICS_CHARS) { // The same for node and the browser\n                sd = stringDestination();\n                utfx.decodeUTF8(function() {\n                    return i < length && offset < this.limit ? this.view.getUint8(offset++) : null;\n                }.bind(this), function(cp) {\n                    ++i; utfx.UTF8toUTF16(cp, sd);\n                }.bind(this));\n                if (i !== length)\n                    throw RangeError(\"Illegal range: Truncated data, \"+i+\" == \"+length);\n                if (relative) {\n                    this.offset = offset;\n                    return sd();\n                } else {\n                    return {\n                        \"string\": sd(),\n                        \"length\": offset - start\n                    };\n                }\n            } else if (metrics === ByteBuffer.METRICS_BYTES) {\n                if (!this.noAssert) {\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + length > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+length+\") <= \"+this.buffer.byteLength);\n                }\n                var k = offset + length;\n                utfx.decodeUTF8toUTF16(function() {\n                    return offset < k ? this.view.getUint8(offset++) : null;\n                }.bind(this), sd = stringDestination(), this.noAssert);\n                if (offset !== k)\n                    throw RangeError(\"Illegal range: Truncated data, \"+offset+\" == \"+k);\n                if (relative) {\n                    this.offset = offset;\n                    return sd();\n                } else {\n                    return {\n                        'string': sd(),\n                        'length': offset - start\n                    };\n                }\n            } else\n                throw TypeError(\"Unsupported metrics: \"+metrics);\n        };\n\n        /**\n         * Reads an UTF8 encoded string. This is an alias of {@link ByteBuffer#readUTF8String}.\n         * @function\n         * @param {number} length Number of characters or bytes to read\n         * @param {number=} metrics Metrics specifying what `n` is meant to count. Defaults to\n         *  {@link ByteBuffer.METRICS_CHARS}.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\n         *  read and the actual number of bytes read.\n         * @expose\n         */\n        ByteBufferPrototype.readString = ByteBufferPrototype.readUTF8String;\n\n        // types/strings/vstring\n\n        /**\n         * Writes a length as varint32 prefixed UTF8 encoded string.\n         * @param {string} str String to write\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted.\n         * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written\n         * @expose\n         * @see ByteBuffer#writeVarint32\n         */\n        ByteBufferPrototype.writeVString = function(str, offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof str !== 'string')\n                    throw TypeError(\"Illegal str: Not a string\");\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            var start = offset,\n                k, l;\n            k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];\n            l = ByteBuffer.calculateVarint32(k);\n            offset += l+k;\n            var capacity15 = this.buffer.byteLength;\n            if (offset > capacity15)\n                this.resize((capacity15 *= 2) > offset ? capacity15 : offset);\n            offset -= l+k;\n            offset += this.writeVarint32(k, offset);\n            utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\n                this.view.setUint8(offset++, b);\n            }.bind(this));\n            if (offset !== start+k+l)\n                throw RangeError(\"Illegal range: Truncated data, \"+offset+\" == \"+(offset+k+l));\n            if (relative) {\n                this.offset = offset;\n                return this;\n            }\n            return offset - start;\n        };\n\n        /**\n         * Reads a length as varint32 prefixed UTF8 encoded string.\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\n         *  read and the actual number of bytes read.\n         * @expose\n         * @see ByteBuffer#readVarint32\n         */\n        ByteBufferPrototype.readVString = function(offset) {\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n            }\n            var temp = this.readVarint32(offset),\n                start = offset,\n                str;\n            offset += temp['length'];\n            temp = temp['value'];\n            var k = offset + temp,\n                sd = stringDestination();\n            utfx.decodeUTF8toUTF16(function() {\n                return offset < k ? this.view.getUint8(offset++) : null;\n            }.bind(this), sd, this.noAssert);\n            str = sd();\n            if (relative) {\n                this.offset = offset;\n                return str;\n            } else {\n                return {\n                    'string': str,\n                    'length': offset - start\n                };\n            }\n        };\n\n\n        /**\n         * Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended\n         *  data's length.\n         * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to append. If `source` is a ByteBuffer, its offsets\n         *  will be modified according to the performed read operation.\n         * @param {(string|number)=} encoding Encoding if `data` is a string (\"base64\", \"hex\", \"binary\", defaults to \"utf8\")\n         * @param {number=} offset Offset to append at. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         * @example A relative `<01 02>03.append(<04 05>)` will result in `<01 02 04 05>, 04 05|`\n         * @example An absolute `<01 02>03.append(04 05>, 1)` will result in `<01 04>05, 04 05|`\n         */\n        ByteBufferPrototype.append = function(source, encoding, offset) {\n            if (typeof encoding === 'number' || typeof encoding !== 'string') {\n                offset = encoding;\n                encoding = undefined;\n            }\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            if (!(source instanceof ByteBuffer))\n                source = ByteBuffer.wrap(source, encoding);\n            var length = source.limit - source.offset;\n            if (length <= 0) return this; // Nothing to append\n            offset += length;\n            var capacity16 = this.buffer.byteLength;\n            if (offset > capacity16)\n                this.resize((capacity16 *= 2) > offset ? capacity16 : offset);\n            offset -= length;\n            new Uint8Array(this.buffer, offset).set(new Uint8Array(source.buffer).subarray(source.offset, source.limit));\n            source.offset += length;\n            if (relative) this.offset += length;\n            return this;\n        };\n\n        /**\n         * Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents at and after the\n            specified offset up to the length of this ByteBuffer's data.\n         * @param {!ByteBuffer} target Target ByteBuffer\n         * @param {number=} offset Offset to append to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  read if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         * @see ByteBuffer#append\n         */\n        ByteBufferPrototype.appendTo = function(target, offset) {\n            target.append(this, offset);\n            return this;\n        };\n\n        /**\n         * Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to\n         *  disable them if your code already makes sure that everything is valid.\n         * @param {boolean} assert `true` to enable assertions, otherwise `false`\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.assert = function(assert) {\n            this.noAssert = !assert;\n            return this;\n        };\n\n        /**\n         * Gets the capacity of this ByteBuffer's backing buffer.\n         * @returns {number} Capacity of the backing buffer\n         * @expose\n         */\n        ByteBufferPrototype.capacity = function() {\n            return this.buffer.byteLength;\n        };\n\n        /**\n         * Clears this ByteBuffer's offsets by setting {@link ByteBuffer#offset} to `0` and {@link ByteBuffer#limit} to the\n         *  backing buffer's capacity. Discards {@link ByteBuffer#markedOffset}.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.clear = function() {\n            this.offset = 0;\n            this.limit = this.buffer.byteLength;\n            this.markedOffset = -1;\n            return this;\n        };\n\n        /**\n         * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for {@link ByteBuffer#offset},\n         *  {@link ByteBuffer#markedOffset} and {@link ByteBuffer#limit}.\n         * @param {boolean=} copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`\n         * @returns {!ByteBuffer} Cloned instance\n         * @expose\n         */\n        ByteBufferPrototype.clone = function(copy) {\n            var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);\n            if (copy) {\n                var buffer = new ArrayBuffer(this.buffer.byteLength);\n                new Uint8Array(buffer).set(this.buffer);\n                bb.buffer = buffer;\n                bb.view = new DataView(buffer);\n            } else {\n                bb.buffer = this.buffer;\n                bb.view = this.view;\n            }\n            bb.offset = this.offset;\n            bb.markedOffset = this.markedOffset;\n            bb.limit = this.limit;\n            return bb;\n        };\n\n        /**\n         * Compacts this ByteBuffer to be backed by a {@link ByteBuffer#buffer} of its contents' length. Contents are the bytes\n         *  between {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will set `offset = 0` and `limit = capacity` and\n         *  adapt {@link ByteBuffer#markedOffset} to the same relative position if set.\n         * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}\n         * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.compact = function(begin, end) {\n            if (typeof begin === 'undefined') begin = this.offset;\n            if (typeof end === 'undefined') end = this.limit;\n            if (!this.noAssert) {\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\n            if (begin === 0 && end === this.buffer.byteLength)\n                return this; // Already compacted\n            var len = end - begin;\n            if (len === 0) {\n                this.buffer = EMPTY_BUFFER;\n                this.view = null;\n                if (this.markedOffset >= 0) this.markedOffset -= begin;\n                this.offset = 0;\n                this.limit = 0;\n                return this;\n            }\n            var buffer = new ArrayBuffer(len);\n            new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(begin, end));\n            this.buffer = buffer;\n            this.view = new DataView(buffer);\n            if (this.markedOffset >= 0) this.markedOffset -= begin;\n            this.offset = 0;\n            this.limit = len;\n            return this;\n        };\n\n        /**\n         * Creates a copy of this ByteBuffer's contents. Contents are the bytes between {@link ByteBuffer#offset} and\n         *  {@link ByteBuffer#limit}.\n         * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.\n         * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.\n         * @returns {!ByteBuffer} Copy\n         * @expose\n         */\n        ByteBufferPrototype.copy = function(begin, end) {\n            if (typeof begin === 'undefined') begin = this.offset;\n            if (typeof end === 'undefined') end = this.limit;\n            if (!this.noAssert) {\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\n            if (begin === end)\n                return new ByteBuffer(0, this.littleEndian, this.noAssert);\n            var capacity = end - begin,\n                bb = new ByteBuffer(capacity, this.littleEndian, this.noAssert);\n            bb.offset = 0;\n            bb.limit = capacity;\n            if (bb.markedOffset >= 0) bb.markedOffset -= begin;\n            this.copyTo(bb, 0, begin, end);\n            return bb;\n        };\n\n        /**\n         * Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between {@link ByteBuffer#offset} and\n         *  {@link ByteBuffer#limit}.\n         * @param {!ByteBuffer} target Target ByteBuffer\n         * @param {number=} targetOffset Offset to copy to. Will use and increase the target's {@link ByteBuffer#offset}\n         *  by the number of bytes copied if omitted.\n         * @param {number=} sourceOffset Offset to start copying from. Will use and increase {@link ByteBuffer#offset} by the\n         *  number of bytes copied if omitted.\n         * @param {number=} sourceLimit Offset to end copying from, defaults to {@link ByteBuffer#limit}\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.copyTo = function(target, targetOffset, sourceOffset, sourceLimit) {\n            var relative,\n                targetRelative;\n            if (!this.noAssert) {\n                if (!ByteBuffer.isByteBuffer(target))\n                    throw TypeError(\"Illegal target: Not a ByteBuffer\");\n            }\n            targetOffset = (targetRelative = typeof targetOffset === 'undefined') ? target.offset : targetOffset | 0;\n            sourceOffset = (relative = typeof sourceOffset === 'undefined') ? this.offset : sourceOffset | 0;\n            sourceLimit = typeof sourceLimit === 'undefined' ? this.limit : sourceLimit | 0;\n\n            if (targetOffset < 0 || targetOffset > target.buffer.byteLength)\n                throw RangeError(\"Illegal target range: 0 <= \"+targetOffset+\" <= \"+target.buffer.byteLength);\n            if (sourceOffset < 0 || sourceLimit > this.buffer.byteLength)\n                throw RangeError(\"Illegal source range: 0 <= \"+sourceOffset+\" <= \"+this.buffer.byteLength);\n\n            var len = sourceLimit - sourceOffset;\n            if (len === 0)\n                return target; // Nothing to copy\n\n            target.ensureCapacity(targetOffset + len);\n\n            new Uint8Array(target.buffer).set(new Uint8Array(this.buffer).subarray(sourceOffset, sourceLimit), targetOffset);\n\n            if (relative) this.offset += len;\n            if (targetRelative) target.offset += len;\n\n            return this;\n        };\n\n        /**\n         * Makes sure that this ByteBuffer is backed by a {@link ByteBuffer#buffer} of at least the specified capacity. If the\n         *  current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity,\n         *  the required capacity will be used instead.\n         * @param {number} capacity Required capacity\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.ensureCapacity = function(capacity) {\n            var current = this.buffer.byteLength;\n            if (current < capacity)\n                return this.resize((current *= 2) > capacity ? current : capacity);\n            return this;\n        };\n\n        /**\n         * Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between\n         *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.\n         * @param {number|string} value Byte value to fill with. If given as a string, the first character is used.\n         * @param {number=} begin Begin offset. Will use and increase {@link ByteBuffer#offset} by the number of bytes\n         *  written if omitted. defaults to {@link ByteBuffer#offset}.\n         * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.\n         * @returns {!ByteBuffer} this\n         * @expose\n         * @example `someByteBuffer.clear().fill(0)` fills the entire backing buffer with zeroes\n         */\n        ByteBufferPrototype.fill = function(value, begin, end) {\n            var relative = typeof begin === 'undefined';\n            if (relative) begin = this.offset;\n            if (typeof value === 'string' && value.length > 0)\n                value = value.charCodeAt(0);\n            if (typeof begin === 'undefined') begin = this.offset;\n            if (typeof end === 'undefined') end = this.limit;\n            if (!this.noAssert) {\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value |= 0;\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\n            if (begin >= end)\n                return this; // Nothing to fill\n            while (begin < end) this.view.setUint8(begin++, value);\n            if (relative) this.offset = begin;\n            return this;\n        };\n\n        /**\n         * Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets `limit = offset` and\n         *  `offset = 0`. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.flip = function() {\n            this.limit = this.offset;\n            this.offset = 0;\n            return this;\n        };\n        /**\n         * Marks an offset on this ByteBuffer to be used later.\n         * @param {number=} offset Offset to mark. Defaults to {@link ByteBuffer#offset}.\n         * @returns {!ByteBuffer} this\n         * @throws {TypeError} If `offset` is not a valid number\n         * @throws {RangeError} If `offset` is out of bounds\n         * @see ByteBuffer#reset\n         * @expose\n         */\n        ByteBufferPrototype.mark = function(offset) {\n            offset = typeof offset === 'undefined' ? this.offset : offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            this.markedOffset = offset;\n            return this;\n        };\n        /**\n         * Sets the byte order.\n         * @param {boolean} littleEndian `true` for little endian byte order, `false` for big endian\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.order = function(littleEndian) {\n            if (!this.noAssert) {\n                if (typeof littleEndian !== 'boolean')\n                    throw TypeError(\"Illegal littleEndian: Not a boolean\");\n            }\n            this.littleEndian = !!littleEndian;\n            return this;\n        };\n\n        /**\n         * Switches (to) little endian byte order.\n         * @param {boolean=} littleEndian Defaults to `true`, otherwise uses big endian\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.LE = function(littleEndian) {\n            this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : true;\n            return this;\n        };\n\n        /**\n         * Switches (to) big endian byte order.\n         * @param {boolean=} bigEndian Defaults to `true`, otherwise uses little endian\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.BE = function(bigEndian) {\n            this.littleEndian = typeof bigEndian !== 'undefined' ? !bigEndian : false;\n            return this;\n        };\n        /**\n         * Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the\n         *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer\n         *  will be resized and its contents moved accordingly.\n         * @param {!ByteBuffer|string|!ArrayBuffer} source Data to prepend. If `source` is a ByteBuffer, its offset will be\n         *  modified according to the performed read operation.\n         * @param {(string|number)=} encoding Encoding if `data` is a string (\"base64\", \"hex\", \"binary\", defaults to \"utf8\")\n         * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes\n         *  prepended if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         * @example A relative `00<01 02 03>.prepend(<04 05>)` results in `<04 05 01 02 03>, 04 05|`\n         * @example An absolute `00<01 02 03>.prepend(<04 05>, 2)` results in `04<05 02 03>, 04 05|`\n         */\n        ByteBufferPrototype.prepend = function(source, encoding, offset) {\n            if (typeof encoding === 'number' || typeof encoding !== 'string') {\n                offset = encoding;\n                encoding = undefined;\n            }\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\n            if (!(source instanceof ByteBuffer))\n                source = ByteBuffer.wrap(source, encoding);\n            var len = source.limit - source.offset;\n            if (len <= 0) return this; // Nothing to prepend\n            var diff = len - offset;\n            var arrayView;\n            if (diff > 0) { // Not enough space before offset, so resize + move\n                var buffer = new ArrayBuffer(this.buffer.byteLength + diff);\n                arrayView = new Uint8Array(buffer);\n                arrayView.set(new Uint8Array(this.buffer).subarray(offset, this.buffer.byteLength), len);\n                this.buffer = buffer;\n                this.view = new DataView(buffer);\n                this.offset += diff;\n                if (this.markedOffset >= 0) this.markedOffset += diff;\n                this.limit += diff;\n                offset += diff;\n            } else {\n                arrayView = new Uint8Array(this.buffer);\n            }\n            arrayView.set(new Uint8Array(source.buffer).subarray(source.offset, source.limit), offset - len);\n            source.offset = source.limit;\n            if (relative)\n                this.offset -= len;\n            return this;\n        };\n\n        /**\n         * Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the\n         *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer\n         *  will be resized and its contents moved accordingly.\n         * @param {!ByteBuffer} target Target ByteBuffer\n         * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes\n         *  prepended if omitted.\n         * @returns {!ByteBuffer} this\n         * @expose\n         * @see ByteBuffer#prepend\n         */\n        ByteBufferPrototype.prependTo = function(target, offset) {\n            target.prepend(this, offset);\n            return this;\n        };\n        /**\n         * Prints debug information about this ByteBuffer's contents.\n         * @param {function(string)=} out Output function to call, defaults to console.log\n         * @expose\n         */\n        ByteBufferPrototype.printDebug = function(out) {\n            if (typeof out !== 'function') out = console.log.bind(console);\n            out(\n                this.toString()+\"\\n\"+\n                \"-------------------------------------------------------------------\\n\"+\n                this.toDebug(/* columns */ true)\n            );\n        };\n\n        /**\n         * Gets the number of remaining readable bytes. Contents are the bytes between {@link ByteBuffer#offset} and\n         *  {@link ByteBuffer#limit}, so this returns `limit - offset`.\n         * @returns {number} Remaining readable bytes. May be negative if `offset > limit`.\n         * @expose\n         */\n        ByteBufferPrototype.remaining = function() {\n            return this.limit - this.offset;\n        };\n        /**\n         * Resets this ByteBuffer's {@link ByteBuffer#offset}. If an offset has been marked through {@link ByteBuffer#mark}\n         *  before, `offset` will be set to {@link ByteBuffer#markedOffset}, which will then be discarded. If no offset has been\n         *  marked, sets `offset = 0`.\n         * @returns {!ByteBuffer} this\n         * @see ByteBuffer#mark\n         * @expose\n         */\n        ByteBufferPrototype.reset = function() {\n            if (this.markedOffset >= 0) {\n                this.offset = this.markedOffset;\n                this.markedOffset = -1;\n            } else {\n                this.offset = 0;\n            }\n            return this;\n        };\n        /**\n         * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that\n         *  large or larger.\n         * @param {number} capacity Capacity required\n         * @returns {!ByteBuffer} this\n         * @throws {TypeError} If `capacity` is not a number\n         * @throws {RangeError} If `capacity < 0`\n         * @expose\n         */\n        ByteBufferPrototype.resize = function(capacity) {\n            if (!this.noAssert) {\n                if (typeof capacity !== 'number' || capacity % 1 !== 0)\n                    throw TypeError(\"Illegal capacity: \"+capacity+\" (not an integer)\");\n                capacity |= 0;\n                if (capacity < 0)\n                    throw RangeError(\"Illegal capacity: 0 <= \"+capacity);\n            }\n            if (this.buffer.byteLength < capacity) {\n                var buffer = new ArrayBuffer(capacity);\n                new Uint8Array(buffer).set(new Uint8Array(this.buffer));\n                this.buffer = buffer;\n                this.view = new DataView(buffer);\n            }\n            return this;\n        };\n        /**\n         * Reverses this ByteBuffer's contents.\n         * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}\n         * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.reverse = function(begin, end) {\n            if (typeof begin === 'undefined') begin = this.offset;\n            if (typeof end === 'undefined') end = this.limit;\n            if (!this.noAssert) {\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\n            if (begin === end)\n                return this; // Nothing to reverse\n            Array.prototype.reverse.call(new Uint8Array(this.buffer).subarray(begin, end));\n            this.view = new DataView(this.buffer); // FIXME: Why exactly is this necessary?\n            return this;\n        };\n        /**\n         * Skips the next `length` bytes. This will just advance\n         * @param {number} length Number of bytes to skip. May also be negative to move the offset back.\n         * @returns {!ByteBuffer} this\n         * @expose\n         */\n        ByteBufferPrototype.skip = function(length) {\n            if (!this.noAssert) {\n                if (typeof length !== 'number' || length % 1 !== 0)\n                    throw TypeError(\"Illegal length: \"+length+\" (not an integer)\");\n                length |= 0;\n            }\n            var offset = this.offset + length;\n            if (!this.noAssert) {\n                if (offset < 0 || offset > this.buffer.byteLength)\n                    throw RangeError(\"Illegal length: 0 <= \"+this.offset+\" + \"+length+\" <= \"+this.buffer.byteLength);\n            }\n            this.offset = offset;\n            return this;\n        };\n\n        /**\n         * Slices this ByteBuffer by creating a cloned instance with `offset = begin` and `limit = end`.\n         * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.\n         * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.\n         * @returns {!ByteBuffer} Clone of this ByteBuffer with slicing applied, backed by the same {@link ByteBuffer#buffer}\n         * @expose\n         */\n        ByteBufferPrototype.slice = function(begin, end) {\n            if (typeof begin === 'undefined') begin = this.offset;\n            if (typeof end === 'undefined') end = this.limit;\n            if (!this.noAssert) {\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\n            var bb = this.clone();\n            bb.offset = begin;\n            bb.limit = end;\n            return bb;\n        };\n        /**\n         * Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between\n         *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will transparently {@link ByteBuffer#flip} this\n         *  ByteBuffer if `offset > limit` but the actual offsets remain untouched.\n         * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory if\n         *  possible. Defaults to `false`\n         * @returns {!ArrayBuffer} Contents as an ArrayBuffer\n         * @expose\n         */\n        ByteBufferPrototype.toBuffer = function(forceCopy) {\n            var offset = this.offset,\n                limit = this.limit;\n            if (offset > limit) {\n                var t = offset;\n                offset = limit;\n                limit = t;\n            }\n            if (!this.noAssert) {\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: Not an integer\");\n                offset >>>= 0;\n                if (typeof limit !== 'number' || limit % 1 !== 0)\n                    throw TypeError(\"Illegal limit: Not an integer\");\n                limit >>>= 0;\n                if (offset < 0 || offset > limit || limit > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+offset+\" <= \"+limit+\" <= \"+this.buffer.byteLength);\n            }\n            // NOTE: It's not possible to have another ArrayBuffer reference the same memory as the backing buffer. This is\n            // possible with Uint8Array#subarray only, but we have to return an ArrayBuffer by contract. So:\n            if (!forceCopy && offset === 0 && limit === this.buffer.byteLength) {\n                return this.buffer;\n            }\n            if (offset === limit) {\n                return EMPTY_BUFFER;\n            }\n            var buffer = new ArrayBuffer(limit - offset);\n            new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset, limit), 0);\n            return buffer;\n        };\n\n        /**\n         * Returns a raw buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between\n         *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will transparently {@link ByteBuffer#flip} this\n         *  ByteBuffer if `offset > limit` but the actual offsets remain untouched. This is an alias of\n         *  {@link ByteBuffer#toBuffer}.\n         * @function\n         * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory.\n         *  Defaults to `false`\n         * @returns {!ArrayBuffer} Contents as an ArrayBuffer\n         * @expose\n         */\n        ByteBufferPrototype.toArrayBuffer = ByteBufferPrototype.toBuffer;\n\n\n        /**\n         * Converts the ByteBuffer's contents to a string.\n         * @param {string=} encoding Output encoding. Returns an informative string representation if omitted but also allows\n         *  direct conversion to \"utf8\", \"hex\", \"base64\" and \"binary\" encoding. \"debug\" returns a hex representation with\n         *  highlighted offsets.\n         * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}\n         * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}\n         * @returns {string} String representation\n         * @throws {Error} If `encoding` is invalid\n         * @expose\n         */\n        ByteBufferPrototype.toString = function(encoding, begin, end) {\n            if (typeof encoding === 'undefined')\n                return \"ByteBufferAB(offset=\"+this.offset+\",markedOffset=\"+this.markedOffset+\",limit=\"+this.limit+\",capacity=\"+this.capacity()+\")\";\n            if (typeof encoding === 'number')\n                encoding = \"utf8\",\n                begin = encoding,\n                end = begin;\n            switch (encoding) {\n                case \"utf8\":\n                    return this.toUTF8(begin, end);\n                case \"base64\":\n                    return this.toBase64(begin, end);\n                case \"hex\":\n                    return this.toHex(begin, end);\n                case \"binary\":\n                    return this.toBinary(begin, end);\n                case \"debug\":\n                    return this.toDebug();\n                case \"columns\":\n                    return this.toColumns();\n                default:\n                    throw Error(\"Unsupported encoding: \"+encoding);\n            }\n        };\n\n        // lxiv-embeddable\n\n        /**\n         * lxiv-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>\n         * Released under the Apache License, Version 2.0\n         * see: https://github.com/dcodeIO/lxiv for details\n         */\n        var lxiv = function() {\n            \"use strict\";\n\n            /**\n             * lxiv namespace.\n             * @type {!Object.<string,*>}\n             * @exports lxiv\n             */\n            var lxiv = {};\n\n            /**\n             * Character codes for output.\n             * @type {!Array.<number>}\n             * @inner\n             */\n            var aout = [\n                65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n                81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102,\n                103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,\n                119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47\n            ];\n\n            /**\n             * Character codes for input.\n             * @type {!Array.<number>}\n             * @inner\n             */\n            var ain = [];\n            for (var i=0, k=aout.length; i<k; ++i)\n                ain[aout[i]] = i;\n\n            /**\n             * Encodes bytes to base64 char codes.\n             * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if\n             *  there are no more bytes left.\n             * @param {!function(number)} dst Characters destination as a function successively called with each encoded char\n             *  code.\n             */\n            lxiv.encode = function(src, dst) {\n                var b, t;\n                while ((b = src()) !== null) {\n                    dst(aout[(b>>2)&0x3f]);\n                    t = (b&0x3)<<4;\n                    if ((b = src()) !== null) {\n                        t |= (b>>4)&0xf;\n                        dst(aout[(t|((b>>4)&0xf))&0x3f]);\n                        t = (b&0xf)<<2;\n                        if ((b = src()) !== null)\n                            dst(aout[(t|((b>>6)&0x3))&0x3f]),\n                            dst(aout[b&0x3f]);\n                        else\n                            dst(aout[t&0x3f]),\n                            dst(61);\n                    } else\n                        dst(aout[t&0x3f]),\n                        dst(61),\n                        dst(61);\n                }\n            };\n\n            /**\n             * Decodes base64 char codes to bytes.\n             * @param {!function():number|null} src Characters source as a function returning the next char code respectively\n             *  `null` if there are no more characters left.\n             * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\n             * @throws {Error} If a character code is invalid\n             */\n            lxiv.decode = function(src, dst) {\n                var c, t1, t2;\n                function fail(c) {\n                    throw Error(\"Illegal character code: \"+c);\n                }\n                while ((c = src()) !== null) {\n                    t1 = ain[c];\n                    if (typeof t1 === 'undefined') fail(c);\n                    if ((c = src()) !== null) {\n                        t2 = ain[c];\n                        if (typeof t2 === 'undefined') fail(c);\n                        dst((t1<<2)>>>0|(t2&0x30)>>4);\n                        if ((c = src()) !== null) {\n                            t1 = ain[c];\n                            if (typeof t1 === 'undefined')\n                                if (c === 61) break; else fail(c);\n                            dst(((t2&0xf)<<4)>>>0|(t1&0x3c)>>2);\n                            if ((c = src()) !== null) {\n                                t2 = ain[c];\n                                if (typeof t2 === 'undefined')\n                                    if (c === 61) break; else fail(c);\n                                dst(((t1&0x3)<<6)>>>0|t2);\n                            }\n                        }\n                    }\n                }\n            };\n\n            /**\n             * Tests if a string is valid base64.\n             * @param {string} str String to test\n             * @returns {boolean} `true` if valid, otherwise `false`\n             */\n            lxiv.test = function(str) {\n                return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);\n            };\n\n            return lxiv;\n        }();\n\n        // encodings/base64\n\n        /**\n         * Encodes this ByteBuffer's contents to a base64 encoded string.\n         * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}.\n         * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}.\n         * @returns {string} Base64 encoded string\n         * @expose\n         */\n        ByteBufferPrototype.toBase64 = function(begin, end) {\n            if (typeof begin === 'undefined')\n                begin = this.offset;\n            if (typeof end === 'undefined')\n                end = this.limit;\n            if (!this.noAssert) {\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\n            var sd; lxiv.encode(function() {\n                return begin < end ? this.view.getUint8(begin++) : null;\n            }.bind(this), sd = stringDestination());\n            return sd();\n        };\n\n        /**\n         * Decodes a base64 encoded string to a ByteBuffer.\n         * @param {string} str String to decode\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} ByteBuffer\n         * @expose\n         */\n        ByteBuffer.fromBase64 = function(str, littleEndian, noAssert) {\n            if (!noAssert) {\n                if (typeof str !== 'string')\n                    throw TypeError(\"Illegal str: Not a string\");\n                if (str.length % 4 !== 0)\n                    throw TypeError(\"Illegal str: Length not a multiple of 4\");\n            }\n            var bb = new ByteBuffer(str.length/4*3, littleEndian, noAssert),\n                i = 0;\n            lxiv.decode(stringSource(str), function(b) {\n                bb.view.setUint8(i++, b);\n            });\n            bb.limit = i;\n            return bb;\n        };\n\n        /**\n         * Encodes a binary string to base64 like `window.btoa` does.\n         * @param {string} str Binary string\n         * @returns {string} Base64 encoded string\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa\n         * @expose\n         */\n        ByteBuffer.btoa = function(str) {\n            return ByteBuffer.fromBinary(str).toBase64();\n        };\n\n        /**\n         * Decodes a base64 encoded string to binary like `window.atob` does.\n         * @param {string} b64 Base64 encoded string\n         * @returns {string} Binary string\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.atob\n         * @expose\n         */\n        ByteBuffer.atob = function(b64) {\n            return ByteBuffer.fromBase64(b64).toBinary();\n        };\n\n        // encodings/binary\n\n        /**\n         * Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.\n         * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.\n         * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.\n         * @returns {string} Binary encoded string\n         * @throws {RangeError} If `offset > limit`\n         * @expose\n         */\n        ByteBufferPrototype.toBinary = function(begin, end) {\n            begin = typeof begin === 'undefined' ? this.offset : begin;\n            end = typeof end === 'undefined' ? this.limit : end;\n            if (!this.noAssert) {\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\n            if (begin === end)\n                return \"\";\n            var cc = [], pt = [];\n            while (begin < end) {\n                cc.push(this.view.getUint8(begin++));\n                if (cc.length >= 1024)\n                    pt.push(String.fromCharCode.apply(String, cc)),\n                    cc = [];\n            }\n            return pt.join('') + String.fromCharCode.apply(String, cc);\n        };\n\n        /**\n         * Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.\n         * @param {string} str String to decode\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} ByteBuffer\n         * @expose\n         */\n        ByteBuffer.fromBinary = function(str, littleEndian, noAssert) {\n            if (!noAssert) {\n                if (typeof str !== 'string')\n                    throw TypeError(\"Illegal str: Not a string\");\n            }\n            var i = 0, k = str.length, charCode,\n                bb = new ByteBuffer(k, littleEndian, noAssert);\n            while (i<k) {\n                charCode = str.charCodeAt(i);\n                if (!noAssert && charCode > 255)\n                    throw RangeError(\"Illegal charCode at \"+i+\": 0 <= \"+charCode+\" <= 255\");\n                bb.view.setUint8(i++, charCode);\n            }\n            bb.limit = k;\n            return bb;\n        };\n\n        // encodings/debug\n\n        /**\n         * Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:\n         * * `<` : offset,\n         * * `'` : markedOffset,\n         * * `>` : limit,\n         * * `|` : offset and limit,\n         * * `[` : offset and markedOffset,\n         * * `]` : markedOffset and limit,\n         * * `!` : offset, markedOffset and limit\n         * @param {boolean=} columns If `true` returns two columns hex + ascii, defaults to `false`\n         * @returns {string|!Array.<string>} Debug string or array of lines if `asArray = true`\n         * @expose\n         * @example `>00'01 02<03` contains four bytes with `limit=0, markedOffset=1, offset=3`\n         * @example `00[01 02 03>` contains four bytes with `offset=markedOffset=1, limit=4`\n         * @example `00|01 02 03` contains four bytes with `offset=limit=1, markedOffset=-1`\n         * @example `|` contains zero bytes with `offset=limit=0, markedOffset=-1`\n         */\n        ByteBufferPrototype.toDebug = function(columns) {\n            var i = -1,\n                k = this.buffer.byteLength,\n                b,\n                hex = \"\",\n                asc = \"\",\n                out = \"\";\n            while (i<k) {\n                if (i !== -1) {\n                    b = this.view.getUint8(i);\n                    if (b < 0x10) hex += \"0\"+b.toString(16).toUpperCase();\n                    else hex += b.toString(16).toUpperCase();\n                    if (columns) {\n                        asc += b > 32 && b < 127 ? String.fromCharCode(b) : '.';\n                    }\n                }\n                ++i;\n                if (columns) {\n                    if (i > 0 && i % 16 === 0 && i !== k) {\n                        while (hex.length < 3*16+3) hex += \" \";\n                        out += hex+asc+\"\\n\";\n                        hex = asc = \"\";\n                    }\n                }\n                if (i === this.offset && i === this.limit)\n                    hex += i === this.markedOffset ? \"!\" : \"|\";\n                else if (i === this.offset)\n                    hex += i === this.markedOffset ? \"[\" : \"<\";\n                else if (i === this.limit)\n                    hex += i === this.markedOffset ? \"]\" : \">\";\n                else\n                    hex += i === this.markedOffset ? \"'\" : (columns || (i !== 0 && i !== k) ? \" \" : \"\");\n            }\n            if (columns && hex !== \" \") {\n                while (hex.length < 3*16+3) hex += \" \";\n                out += hex+asc+\"\\n\";\n            }\n            return columns ? out : hex;\n        };\n\n        /**\n         * Decodes a hex encoded string with marked offsets to a ByteBuffer.\n         * @param {string} str Debug string to decode (not be generated with `columns = true`)\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} ByteBuffer\n         * @expose\n         * @see ByteBuffer#toDebug\n         */\n        ByteBuffer.fromDebug = function(str, littleEndian, noAssert) {\n            var k = str.length,\n                bb = new ByteBuffer(((k+1)/3)|0, littleEndian, noAssert);\n            var i = 0, j = 0, ch, b,\n                rs = false, // Require symbol next\n                ho = false, hm = false, hl = false, // Already has offset, markedOffset, limit?\n                fail = false;\n            while (i<k) {\n                switch (ch = str.charAt(i++)) {\n                    case '!':\n                        if (!noAssert) {\n                            if (ho || hm || hl) {\n                                fail = true; break;\n                            }\n                            ho = hm = hl = true;\n                        }\n                        bb.offset = bb.markedOffset = bb.limit = j;\n                        rs = false;\n                        break;\n                    case '|':\n                        if (!noAssert) {\n                            if (ho || hl) {\n                                fail = true; break;\n                            }\n                            ho = hl = true;\n                        }\n                        bb.offset = bb.limit = j;\n                        rs = false;\n                        break;\n                    case '[':\n                        if (!noAssert) {\n                            if (ho || hm) {\n                                fail = true; break;\n                            }\n                            ho = hm = true;\n                        }\n                        bb.offset = bb.markedOffset = j;\n                        rs = false;\n                        break;\n                    case '<':\n                        if (!noAssert) {\n                            if (ho) {\n                                fail = true; break;\n                            }\n                            ho = true;\n                        }\n                        bb.offset = j;\n                        rs = false;\n                        break;\n                    case ']':\n                        if (!noAssert) {\n                            if (hl || hm) {\n                                fail = true; break;\n                            }\n                            hl = hm = true;\n                        }\n                        bb.limit = bb.markedOffset = j;\n                        rs = false;\n                        break;\n                    case '>':\n                        if (!noAssert) {\n                            if (hl) {\n                                fail = true; break;\n                            }\n                            hl = true;\n                        }\n                        bb.limit = j;\n                        rs = false;\n                        break;\n                    case \"'\":\n                        if (!noAssert) {\n                            if (hm) {\n                                fail = true; break;\n                            }\n                            hm = true;\n                        }\n                        bb.markedOffset = j;\n                        rs = false;\n                        break;\n                    case ' ':\n                        rs = false;\n                        break;\n                    default:\n                        if (!noAssert) {\n                            if (rs) {\n                                fail = true; break;\n                            }\n                        }\n                        b = parseInt(ch+str.charAt(i++), 16);\n                        if (!noAssert) {\n                            if (isNaN(b) || b < 0 || b > 255)\n                                throw TypeError(\"Illegal str: Not a debug encoded string\");\n                        }\n                        bb.view.setUint8(j++, b);\n                        rs = true;\n                }\n                if (fail)\n                    throw TypeError(\"Illegal str: Invalid symbol at \"+i);\n            }\n            if (!noAssert) {\n                if (!ho || !hl)\n                    throw TypeError(\"Illegal str: Missing offset or limit\");\n                if (j<bb.buffer.byteLength)\n                    throw TypeError(\"Illegal str: Not a debug encoded string (is it hex?) \"+j+\" < \"+k);\n            }\n            return bb;\n        };\n\n        // encodings/hex\n\n        /**\n         * Encodes this ByteBuffer's contents to a hex encoded string.\n         * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.\n         * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.\n         * @returns {string} Hex encoded string\n         * @expose\n         */\n        ByteBufferPrototype.toHex = function(begin, end) {\n            begin = typeof begin === 'undefined' ? this.offset : begin;\n            end = typeof end === 'undefined' ? this.limit : end;\n            if (!this.noAssert) {\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\n            var out = new Array(end - begin),\n                b;\n            while (begin < end) {\n                b = this.view.getUint8(begin++);\n                if (b < 0x10)\n                    out.push(\"0\", b.toString(16));\n                else out.push(b.toString(16));\n            }\n            return out.join('');\n        };\n\n        /**\n         * Decodes a hex encoded string to a ByteBuffer.\n         * @param {string} str String to decode\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} ByteBuffer\n         * @expose\n         */\n        ByteBuffer.fromHex = function(str, littleEndian, noAssert) {\n            if (!noAssert) {\n                if (typeof str !== 'string')\n                    throw TypeError(\"Illegal str: Not a string\");\n                if (str.length % 2 !== 0)\n                    throw TypeError(\"Illegal str: Length not a multiple of 2\");\n            }\n            var k = str.length,\n                bb = new ByteBuffer((k / 2) | 0, littleEndian),\n                b;\n            for (var i=0, j=0; i<k; i+=2) {\n                b = parseInt(str.substring(i, i+2), 16);\n                if (!noAssert)\n                    if (!isFinite(b) || b < 0 || b > 255)\n                        throw TypeError(\"Illegal str: Contains non-hex characters\");\n                bb.view.setUint8(j++, b);\n            }\n            bb.limit = j;\n            return bb;\n        };\n\n        // utfx-embeddable\n\n        /**\n         * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>\n         * Released under the Apache License, Version 2.0\n         * see: https://github.com/dcodeIO/utfx for details\n         */\n        var utfx = function() {\n            \"use strict\";\n\n            /**\n             * utfx namespace.\n             * @inner\n             * @type {!Object.<string,*>}\n             */\n            var utfx = {};\n\n            /**\n             * Maximum valid code point.\n             * @type {number}\n             * @const\n             */\n            utfx.MAX_CODEPOINT = 0x10FFFF;\n\n            /**\n             * Encodes UTF8 code points to UTF8 bytes.\n             * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\n             *  respectively `null` if there are no more code points left or a single numeric code point.\n             * @param {!function(number)} dst Bytes destination as a function successively called with the next byte\n             */\n            utfx.encodeUTF8 = function(src, dst) {\n                var cp = null;\n                if (typeof src === 'number')\n                    cp = src,\n                    src = function() { return null; };\n                while (cp !== null || (cp = src()) !== null) {\n                    if (cp < 0x80)\n                        dst(cp&0x7F);\n                    else if (cp < 0x800)\n                        dst(((cp>>6)&0x1F)|0xC0),\n                        dst((cp&0x3F)|0x80);\n                    else if (cp < 0x10000)\n                        dst(((cp>>12)&0x0F)|0xE0),\n                        dst(((cp>>6)&0x3F)|0x80),\n                        dst((cp&0x3F)|0x80);\n                    else\n                        dst(((cp>>18)&0x07)|0xF0),\n                        dst(((cp>>12)&0x3F)|0x80),\n                        dst(((cp>>6)&0x3F)|0x80),\n                        dst((cp&0x3F)|0x80);\n                    cp = null;\n                }\n            };\n\n            /**\n             * Decodes UTF8 bytes to UTF8 code points.\n             * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\n             *  are no more bytes left.\n             * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.\n             * @throws {RangeError} If a starting byte is invalid in UTF8\n             * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the\n             *  remaining bytes.\n             */\n            utfx.decodeUTF8 = function(src, dst) {\n                var a, b, c, d, fail = function(b) {\n                    b = b.slice(0, b.indexOf(null));\n                    var err = Error(b.toString());\n                    err.name = \"TruncatedError\";\n                    err['bytes'] = b;\n                    throw err;\n                };\n                while ((a = src()) !== null) {\n                    if ((a&0x80) === 0)\n                        dst(a);\n                    else if ((a&0xE0) === 0xC0)\n                        ((b = src()) === null) && fail([a, b]),\n                        dst(((a&0x1F)<<6) | (b&0x3F));\n                    else if ((a&0xF0) === 0xE0)\n                        ((b=src()) === null || (c=src()) === null) && fail([a, b, c]),\n                        dst(((a&0x0F)<<12) | ((b&0x3F)<<6) | (c&0x3F));\n                    else if ((a&0xF8) === 0xF0)\n                        ((b=src()) === null || (c=src()) === null || (d=src()) === null) && fail([a, b, c ,d]),\n                        dst(((a&0x07)<<18) | ((b&0x3F)<<12) | ((c&0x3F)<<6) | (d&0x3F));\n                    else throw RangeError(\"Illegal starting byte: \"+a);\n                }\n            };\n\n            /**\n             * Converts UTF16 characters to UTF8 code points.\n             * @param {!function():number|null} src Characters source as a function returning the next char code respectively\n             *  `null` if there are no more characters left.\n             * @param {!function(number)} dst Code points destination as a function successively called with each converted code\n             *  point.\n             */\n            utfx.UTF16toUTF8 = function(src, dst) {\n                var c1, c2 = null;\n                while (true) {\n                    if ((c1 = c2 !== null ? c2 : src()) === null)\n                        break;\n                    if (c1 >= 0xD800 && c1 <= 0xDFFF) {\n                        if ((c2 = src()) !== null) {\n                            if (c2 >= 0xDC00 && c2 <= 0xDFFF) {\n                                dst((c1-0xD800)*0x400+c2-0xDC00+0x10000);\n                                c2 = null; continue;\n                            }\n                        }\n                    }\n                    dst(c1);\n                }\n                if (c2 !== null) dst(c2);\n            };\n\n            /**\n             * Converts UTF8 code points to UTF16 characters.\n             * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\n             *  respectively `null` if there are no more code points left or a single numeric code point.\n             * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\n             * @throws {RangeError} If a code point is out of range\n             */\n            utfx.UTF8toUTF16 = function(src, dst) {\n                var cp = null;\n                if (typeof src === 'number')\n                    cp = src, src = function() { return null; };\n                while (cp !== null || (cp = src()) !== null) {\n                    if (cp <= 0xFFFF)\n                        dst(cp);\n                    else\n                        cp -= 0x10000,\n                        dst((cp>>10)+0xD800),\n                        dst((cp%0x400)+0xDC00);\n                    cp = null;\n                }\n            };\n\n            /**\n             * Converts and encodes UTF16 characters to UTF8 bytes.\n             * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`\n             *  if there are no more characters left.\n             * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\n             */\n            utfx.encodeUTF16toUTF8 = function(src, dst) {\n                utfx.UTF16toUTF8(src, function(cp) {\n                    utfx.encodeUTF8(cp, dst);\n                });\n            };\n\n            /**\n             * Decodes and converts UTF8 bytes to UTF16 characters.\n             * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\n             *  are no more bytes left.\n             * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\n             * @throws {RangeError} If a starting byte is invalid in UTF8\n             * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.\n             */\n            utfx.decodeUTF8toUTF16 = function(src, dst) {\n                utfx.decodeUTF8(src, function(cp) {\n                    utfx.UTF8toUTF16(cp, dst);\n                });\n            };\n\n            /**\n             * Calculates the byte length of an UTF8 code point.\n             * @param {number} cp UTF8 code point\n             * @returns {number} Byte length\n             */\n            utfx.calculateCodePoint = function(cp) {\n                return (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;\n            };\n\n            /**\n             * Calculates the number of UTF8 bytes required to store UTF8 code points.\n             * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively\n             *  `null` if there are no more code points left.\n             * @returns {number} The number of UTF8 bytes required\n             */\n            utfx.calculateUTF8 = function(src) {\n                var cp, l=0;\n                while ((cp = src()) !== null)\n                    l += utfx.calculateCodePoint(cp);\n                return l;\n            };\n\n            /**\n             * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.\n             * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively\n             *  `null` if there are no more characters left.\n             * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.\n             */\n            utfx.calculateUTF16asUTF8 = function(src) {\n                var n=0, l=0;\n                utfx.UTF16toUTF8(src, function(cp) {\n                    ++n; l += utfx.calculateCodePoint(cp);\n                });\n                return [n,l];\n            };\n\n            return utfx;\n        }();\n\n        // encodings/utf8\n\n        /**\n         * Encodes this ByteBuffer's contents between {@link ByteBuffer#offset} and {@link ByteBuffer#limit} to an UTF8 encoded\n         *  string.\n         * @returns {string} Hex encoded string\n         * @throws {RangeError} If `offset > limit`\n         * @expose\n         */\n        ByteBufferPrototype.toUTF8 = function(begin, end) {\n            if (typeof begin === 'undefined') begin = this.offset;\n            if (typeof end === 'undefined') end = this.limit;\n            if (!this.noAssert) {\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\n            var sd; try {\n                utfx.decodeUTF8toUTF16(function() {\n                    return begin < end ? this.view.getUint8(begin++) : null;\n                }.bind(this), sd = stringDestination());\n            } catch (e) {\n                if (begin !== end)\n                    throw RangeError(\"Illegal range: Truncated data, \"+begin+\" != \"+end);\n            }\n            return sd();\n        };\n\n        /**\n         * Decodes an UTF8 encoded string to a ByteBuffer.\n         * @param {string} str String to decode\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\n         * @returns {!ByteBuffer} ByteBuffer\n         * @expose\n         */\n        ByteBuffer.fromUTF8 = function(str, littleEndian, noAssert) {\n            if (!noAssert)\n                if (typeof str !== 'string')\n                    throw TypeError(\"Illegal str: Not a string\");\n            var bb = new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str), true)[1], littleEndian, noAssert),\n                i = 0;\n            utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\n                bb.view.setUint8(i++, b);\n            });\n            bb.limit = i;\n            return bb;\n        };\n\n\n        return ByteBuffer;\n    }\n\n    /* CommonJS */ if (typeof require === 'function' && typeof module === 'object' && module && typeof exports === 'object' && exports)\n        module['exports'] = (function() {\n            var Long; try { Long = require(\"long\"); } catch (e) {}\n            return loadByteBuffer(Long);\n        })();\n    /* AMD */ else if (typeof define === 'function' && define[\"amd\"])\n        define(\"ByteBuffer\", [\"Long\"], function(Long) { return loadByteBuffer(Long); });\n    /* Global */ else\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"ByteBuffer\"] = loadByteBuffer(global[\"dcodeIO\"][\"Long\"]);\n\n})(this);\n","/*\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS-IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n/**\n * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\n * Released under the Apache License, Version 2.0\n * see: https://github.com/dcodeIO/long.js for details\n */\n(function(global, factory) {\n\n    /* AMD */ if (typeof define === 'function' && define[\"amd\"])\n        define([], factory);\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"])\n        module[\"exports\"] = factory();\n    /* Global */ else\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\n\n})(this, function() {\n    \"use strict\";\n\n    /**\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n     *  See the from* functions below for more convenient ways of constructing Longs.\n     * @exports Long\n     * @class A Long class for representing a 64 bit two's-complement integer value.\n     * @param {number} low The low (signed) 32 bits of the long\n     * @param {number} high The high (signed) 32 bits of the long\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @constructor\n     */\n    function Long(low, high, unsigned) {\n\n        /**\n         * The low 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.low = low|0;\n\n        /**\n         * The high 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.high = high|0;\n\n        /**\n         * Whether unsigned or not.\n         * @type {boolean}\n         * @expose\n         */\n        this.unsigned = !!unsigned;\n    }\n\n    // The internal representation of a long is the two given signed, 32-bit values.\n    // We use 32-bit pieces because these are the size of integers on which\n    // Javascript performs bit-operations.  For operations like addition and\n    // multiplication, we split each number into 16 bit pieces, which can easily be\n    // multiplied within Javascript's floating-point representation without overflow\n    // or change in sign.\n    //\n    // In the algorithms below, we frequently reduce the negative case to the\n    // positive case by negating the input(s) and then post-processing the result.\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n    // a positive number, it overflows back into a negative).  Not handling this\n    // case would often result in infinite recursion.\n    //\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n    // methods on which they depend.\n\n    /**\n     * An indicator used to reliably determine if an object is a Long or not.\n     * @type {boolean}\n     * @const\n     * @expose\n     * @private\n     */\n    Long.__isLong__;\n\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\n        value: true,\n        enumerable: false,\n        configurable: false\n    });\n\n    /**\n     * Tests if the specified object is a Long.\n     * @param {*} obj Object\n     * @returns {boolean}\n     * @expose\n     */\n    Long.isLong = function isLong(obj) {\n        return (obj && obj[\"__isLong__\"]) === true;\n    };\n\n    /**\n     * A cache of the Long representations of small integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var INT_CACHE = {};\n\n    /**\n     * A cache of the Long representations of small unsigned integer values.\n     * @type {!Object}\n     * @inner\n     */\n    var UINT_CACHE = {};\n\n    /**\n     * Returns a Long representing the given 32 bit integer value.\n     * @param {number} value The 32 bit integer in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromInt = function fromInt(value, unsigned) {\n        var obj, cachedObj, cache;\n        if (!unsigned) {\n            value = value | 0;\n            if (cache = (-128 <= value && value < 128)) {\n                cachedObj = INT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = new Long(value, value < 0 ? -1 : 0, false);\n            if (cache)\n                INT_CACHE[value] = obj;\n            return obj;\n        } else {\n            value = value >>> 0;\n            if (cache = (0 <= value && value < 256)) {\n                cachedObj = UINT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);\n            if (cache)\n                UINT_CACHE[value] = obj;\n            return obj;\n        }\n    };\n\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @param {number} value The number in question\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromNumber = function fromNumber(value, unsigned) {\n        unsigned = !!unsigned;\n        if (isNaN(value) || !isFinite(value))\n            return Long.ZERO;\n        if (!unsigned && value <= -TWO_PWR_63_DBL)\n            return Long.MIN_VALUE;\n        if (!unsigned && value + 1 >= TWO_PWR_63_DBL)\n            return Long.MAX_VALUE;\n        if (unsigned && value >= TWO_PWR_64_DBL)\n            return Long.MAX_UNSIGNED_VALUE;\n        if (value < 0)\n            return Long.fromNumber(-value, unsigned).neg();\n        return new Long((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n    };\n\n    /**\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n     *  assumed to use 32 bits.\n     * @param {number} lowBits The low 32 bits\n     * @param {number} highBits The high 32 bits\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromBits = function fromBits(lowBits, highBits, unsigned) {\n        return new Long(lowBits, highBits, unsigned);\n    };\n\n    /**\n     * Returns a Long representation of the given string, written using the specified radix.\n     * @param {string} str The textual representation of the Long\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n     * @returns {!Long} The corresponding Long value\n     * @expose\n     */\n    Long.fromString = function fromString(str, unsigned, radix) {\n        if (str.length === 0)\n            throw Error('number format error: empty string');\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n            return Long.ZERO;\n        if (typeof unsigned === 'number') // For goog.math.long compatibility\n            radix = unsigned,\n            unsigned = false;\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix)\n            throw Error('radix out of range: ' + radix);\n\n        var p;\n        if ((p = str.indexOf('-')) > 0)\n            throw Error('number format error: interior \"-\" character: ' + str);\n        else if (p === 0)\n            return Long.fromString(str.substring(1), unsigned, radix).neg();\n\n        // Do several (8) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n\n        var result = Long.ZERO;\n        for (var i = 0; i < str.length; i += 8) {\n            var size = Math.min(8, str.length - i);\n            var value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                var power = Long.fromNumber(Math.pow(radix, size));\n                result = result.mul(power).add(Long.fromNumber(value));\n            } else {\n                result = result.mul(radixToPower);\n                result = result.add(Long.fromNumber(value));\n            }\n        }\n        result.unsigned = unsigned;\n        return result;\n    };\n\n    /**\n     * Converts the specified value to a Long.\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n     * @returns {!Long}\n     * @expose\n     */\n    Long.fromValue = function fromValue(val) {\n        if (val /* is compatible */ instanceof Long)\n            return val;\n        if (typeof val === 'number')\n            return Long.fromNumber(val);\n        if (typeof val === 'string')\n            return Long.fromString(val);\n        // Throws for non-objects, converts non-instanceof Long:\n        return new Long(val.low, val.high, val.unsigned);\n    };\n\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n    // no runtime penalty for these.\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_16_DBL = 1 << 16;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24_DBL = 1 << 24;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n    /**\n     * @type {number}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n    /**\n     * @type {!Long}\n     * @const\n     * @inner\n     */\n    var TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\n\n    /**\n     * Signed zero.\n     * @type {!Long}\n     * @expose\n     */\n    Long.ZERO = Long.fromInt(0);\n\n    /**\n     * Unsigned zero.\n     * @type {!Long}\n     * @expose\n     */\n    Long.UZERO = Long.fromInt(0, true);\n\n    /**\n     * Signed one.\n     * @type {!Long}\n     * @expose\n     */\n    Long.ONE = Long.fromInt(1);\n\n    /**\n     * Unsigned one.\n     * @type {!Long}\n     * @expose\n     */\n    Long.UONE = Long.fromInt(1, true);\n\n    /**\n     * Signed negative one.\n     * @type {!Long}\n     * @expose\n     */\n    Long.NEG_ONE = Long.fromInt(-1);\n\n    /**\n     * Maximum signed value.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_VALUE = new Long(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\n\n    /**\n     * Maximum unsigned value.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_UNSIGNED_VALUE = new Long(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\n\n    /**\n     * Minimum signed value.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MIN_VALUE = new Long(0, 0x80000000|0, false);\n\n    /**\n     * @alias Long.prototype\n     * @inner\n     */\n    var LongPrototype = Long.prototype;\n\n    /**\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n     * @returns {number}\n     * @expose\n     */\n    LongPrototype.toInt = function toInt() {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    };\n\n    /**\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n     * @returns {number}\n     * @expose\n     */\n    LongPrototype.toNumber = function toNumber() {\n        if (this.unsigned) {\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n        }\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n\n    /**\n     * Converts the Long to a string written in the specified radix.\n     * @param {number=} radix Radix (2-36), defaults to 10\n     * @returns {string}\n     * @override\n     * @throws {RangeError} If `radix` is out of range\n     * @expose\n     */\n    LongPrototype.toString = function toString(radix) {\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix)\n            throw RangeError('radix out of range: ' + radix);\n        if (this.isZero())\n            return '0';\n        var rem;\n        if (this.isNegative()) { // Unsigned Longs are never negative\n            if (this.eq(Long.MIN_VALUE)) {\n                // We need to change the Long value before it can be negated, so we remove\n                // the bottom-most digit in this base and then recurse to do the rest.\n                var radixLong = Long.fromNumber(radix);\n                var div = this.div(radixLong);\n                rem = div.mul(radixLong).sub(this);\n                return div.toString(radix) + rem.toInt().toString(radix);\n            } else\n                return '-' + this.neg().toString(radix);\n        }\n\n        // Do several (6) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\n        rem = this;\n        var result = '';\n        while (true) {\n            var remDiv = rem.div(radixToPower),\n                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n                digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero())\n                return digits + result;\n            else {\n                while (digits.length < 6)\n                    digits = '0' + digits;\n                result = '' + digits + result;\n            }\n        }\n    };\n\n    /**\n     * Gets the high 32 bits as a signed integer.\n     * @returns {number} Signed high bits\n     * @expose\n     */\n    LongPrototype.getHighBits = function getHighBits() {\n        return this.high;\n    };\n\n    /**\n     * Gets the high 32 bits as an unsigned integer.\n     * @returns {number} Unsigned high bits\n     * @expose\n     */\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n        return this.high >>> 0;\n    };\n\n    /**\n     * Gets the low 32 bits as a signed integer.\n     * @returns {number} Signed low bits\n     * @expose\n     */\n    LongPrototype.getLowBits = function getLowBits() {\n        return this.low;\n    };\n\n    /**\n     * Gets the low 32 bits as an unsigned integer.\n     * @returns {number} Unsigned low bits\n     * @expose\n     */\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n        return this.low >>> 0;\n    };\n\n    /**\n     * Gets the number of bits needed to represent the absolute value of this Long.\n     * @returns {number}\n     * @expose\n     */\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n        if (this.isNegative()) // Unsigned Longs are never negative\n            return this.eq(Long.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n        var val = this.high != 0 ? this.high : this.low;\n        for (var bit = 31; bit > 0; bit--)\n            if ((val & (1 << bit)) != 0)\n                break;\n        return this.high != 0 ? bit + 33 : bit + 1;\n    };\n\n    /**\n     * Tests if this Long's value equals zero.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isZero = function isZero() {\n        return this.high === 0 && this.low === 0;\n    };\n\n    /**\n     * Tests if this Long's value is negative.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isNegative = function isNegative() {\n        return !this.unsigned && this.high < 0;\n    };\n\n    /**\n     * Tests if this Long's value is positive.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isPositive = function isPositive() {\n        return this.unsigned || this.high >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is odd.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isOdd = function isOdd() {\n        return (this.low & 1) === 1;\n    };\n\n    /**\n     * Tests if this Long's value is even.\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.isEven = function isEven() {\n        return (this.low & 1) === 0;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.equals = function equals(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n            return false;\n        return this.high === other.high && this.low === other.low;\n    };\n\n    /**\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.eq = LongPrototype.equals;\n\n    /**\n     * Tests if this Long's value differs from the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.notEquals = function notEquals(other) {\n        return !this.eq(/* validates */ other);\n    };\n\n    /**\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.neq = LongPrototype.notEquals;\n\n    /**\n     * Tests if this Long's value is less than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lessThan = function lessThan(other) {\n        return this.compare(/* validates */ other) < 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lt = LongPrototype.lessThan;\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n        return this.compare(/* validates */ other) <= 0;\n    };\n\n    /**\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n    /**\n     * Tests if this Long's value is greater than the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.greaterThan = function greaterThan(other) {\n        return this.compare(/* validates */ other) > 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.gt = LongPrototype.greaterThan;\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n        return this.compare(/* validates */ other) >= 0;\n    };\n\n    /**\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n    /**\n     * Compares this Long's value with the specified's.\n     * @param {!Long|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     * @expose\n     */\n    LongPrototype.compare = function compare(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        if (this.eq(other))\n            return 0;\n        var thisNeg = this.isNegative(),\n            otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg)\n            return -1;\n        if (!thisNeg && otherNeg)\n            return 1;\n        // At this point the sign bits are the same\n        if (!this.unsigned)\n            return this.sub(other).isNegative() ? -1 : 1;\n        // Both are positive if at least one is unsigned\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n    };\n\n    /**\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n     * @function\n     * @param {!Long|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     * @expose\n     */\n    LongPrototype.comp = LongPrototype.compare;\n\n    /**\n     * Negates this Long's value.\n     * @returns {!Long} Negated Long\n     * @expose\n     */\n    LongPrototype.negate = function negate() {\n        if (!this.unsigned && this.eq(Long.MIN_VALUE))\n            return Long.MIN_VALUE;\n        return this.not().add(Long.ONE);\n    };\n\n    /**\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\n     * @function\n     * @returns {!Long} Negated Long\n     * @expose\n     */\n    LongPrototype.neg = LongPrototype.negate;\n\n    /**\n     * Returns the sum of this and the specified Long.\n     * @param {!Long|number|string} addend Addend\n     * @returns {!Long} Sum\n     * @expose\n     */\n    LongPrototype.add = function add(addend) {\n        if (!Long.isLong(addend))\n            addend = Long.fromValue(addend);\n\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = addend.high >>> 16;\n        var b32 = addend.high & 0xFFFF;\n        var b16 = addend.low >>> 16;\n        var b00 = addend.low & 0xFFFF;\n\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 + b48;\n        c48 &= 0xFFFF;\n        return new Long((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the difference of this and the specified Long.\n     * @param {!Long|number|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     * @expose\n     */\n    LongPrototype.subtract = function subtract(subtrahend) {\n        if (!Long.isLong(subtrahend))\n            subtrahend = Long.fromValue(subtrahend);\n        return this.add(subtrahend.neg());\n    };\n\n    /**\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n     * @function\n     * @param {!Long|number|string} subtrahend Subtrahend\n     * @returns {!Long} Difference\n     * @expose\n     */\n    LongPrototype.sub = LongPrototype.subtract;\n\n    /**\n     * Returns the product of this and the specified Long.\n     * @param {!Long|number|string} multiplier Multiplier\n     * @returns {!Long} Product\n     * @expose\n     */\n    LongPrototype.multiply = function multiply(multiplier) {\n        if (this.isZero())\n            return Long.ZERO;\n        if (!Long.isLong(multiplier))\n            multiplier = Long.fromValue(multiplier);\n        if (multiplier.isZero())\n            return Long.ZERO;\n        if (this.eq(Long.MIN_VALUE))\n            return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        if (multiplier.eq(Long.MIN_VALUE))\n            return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n\n        if (this.isNegative()) {\n            if (multiplier.isNegative())\n                return this.neg().mul(multiplier.neg());\n            else\n                return this.neg().mul(multiplier).neg();\n        } else if (multiplier.isNegative())\n            return this.mul(multiplier.neg()).neg();\n\n        // If both longs are small, use float multiplication\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n            return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n        // We can skip products that would overflow.\n\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = multiplier.high >>> 16;\n        var b32 = multiplier.high & 0xFFFF;\n        var b16 = multiplier.low >>> 16;\n        var b00 = multiplier.low & 0xFFFF;\n\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xFFFF;\n        return new Long((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n     * @function\n     * @param {!Long|number|string} multiplier Multiplier\n     * @returns {!Long} Product\n     * @expose\n     */\n    LongPrototype.mul = LongPrototype.multiply;\n\n    /**\n     * Returns this Long divided by the specified.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Quotient\n     * @expose\n     */\n    LongPrototype.divide = function divide(divisor) {\n        if (!Long.isLong(divisor))\n            divisor = Long.fromValue(divisor);\n        if (divisor.isZero())\n            throw Error('division by zero');\n        if (this.isZero())\n            return this.unsigned ? Long.UZERO : Long.ZERO;\n        var approx, rem, res;\n        if (this.eq(Long.MIN_VALUE)) {\n            if (divisor.eq(Long.ONE) || divisor.eq(Long.NEG_ONE))\n                return Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n            else if (divisor.eq(Long.MIN_VALUE))\n                return Long.ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = this.shr(1);\n                approx = halfThis.div(divisor).shl(1);\n                if (approx.eq(Long.ZERO)) {\n                    return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\n                } else {\n                    rem = this.sub(divisor.mul(approx));\n                    res = approx.add(rem.div(divisor));\n                    return res;\n                }\n            }\n        } else if (divisor.eq(Long.MIN_VALUE))\n            return this.unsigned ? Long.UZERO : Long.ZERO;\n        if (this.isNegative()) {\n            if (divisor.isNegative())\n                return this.neg().div(divisor.neg());\n            return this.neg().div(divisor).neg();\n        } else if (divisor.isNegative())\n            return this.div(divisor.neg()).neg();\n\n        // Repeat the following until the remainder is less than other:  find a\n        // floating-point that approximates remainder / other *from below*, add this\n        // into the result, and subtract it from the remainder.  It is critical that\n        // the approximate value is less than or equal to the real value so that the\n        // remainder never becomes negative.\n        res = Long.ZERO;\n        rem = this;\n        while (rem.gte(divisor)) {\n            // Approximate the result of division. This may be a little greater or\n            // smaller than the actual value.\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n            // We will tweak the approximate result by changing it in the 48-th digit or\n            // the smallest non-fractional digit, whichever is larger.\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n                delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48),\n\n            // Decrease the approximation until it is smaller than the remainder.  Note\n            // that if it is too large, the product overflows and is negative.\n                approxRes = Long.fromNumber(approx),\n                approxRem = approxRes.mul(divisor);\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\n                approx -= delta;\n                approxRes = Long.fromNumber(approx, this.unsigned);\n                approxRem = approxRes.mul(divisor);\n            }\n\n            // We know the answer can't be zero... and actually, zero would cause\n            // infinite recursion since we would make no progress.\n            if (approxRes.isZero())\n                approxRes = Long.ONE;\n\n            res = res.add(approxRes);\n            rem = rem.sub(approxRem);\n        }\n        return res;\n    };\n\n    /**\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n     * @function\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Quotient\n     * @expose\n     */\n    LongPrototype.div = LongPrototype.divide;\n\n    /**\n     * Returns this Long modulo the specified.\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Remainder\n     * @expose\n     */\n    LongPrototype.modulo = function modulo(divisor) {\n        if (!Long.isLong(divisor))\n            divisor = Long.fromValue(divisor);\n        return this.sub(this.div(divisor).mul(divisor));\n    };\n\n    /**\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n     * @function\n     * @param {!Long|number|string} divisor Divisor\n     * @returns {!Long} Remainder\n     * @expose\n     */\n    LongPrototype.mod = LongPrototype.modulo;\n\n    /**\n     * Returns the bitwise NOT of this Long.\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.not = function not() {\n        return new Long(~this.low, ~this.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise AND of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.and = function and(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        return new Long(this.low & other.low, this.high & other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise OR of this Long and the specified.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.or = function or(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        return new Long(this.low | other.low, this.high | other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise XOR of this Long and the given one.\n     * @param {!Long|number|string} other Other Long\n     * @returns {!Long}\n     * @expose\n     */\n    LongPrototype.xor = function xor(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        return new Long(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\n        if (Long.isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return new Long(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n        else\n            return new Long(0, this.low << (numBits - 32), this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shl = LongPrototype.shiftLeft;\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shiftRight = function shiftRight(numBits) {\n        if (Long.isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return new Long((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n        else\n            return new Long(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shr = LongPrototype.shiftRight;\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount.\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n        if (Long.isLong(numBits))\n            numBits = numBits.toInt();\n        numBits &= 63;\n        if (numBits === 0)\n            return this;\n        else {\n            var high = this.high;\n            if (numBits < 32) {\n                var low = this.low;\n                return new Long((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\n            } else if (numBits === 32)\n                return new Long(high, 0, this.unsigned);\n            else\n                return new Long(high >>> (numBits - 32), 0, this.unsigned);\n        }\n    };\n\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n     * @function\n     * @param {number|!Long} numBits Number of bits\n     * @returns {!Long} Shifted Long\n     * @expose\n     */\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n    /**\n     * Converts this Long to signed.\n     * @returns {!Long} Signed long\n     * @expose\n     */\n    LongPrototype.toSigned = function toSigned() {\n        if (!this.unsigned)\n            return this;\n        return new Long(this.low, this.high, false);\n    };\n\n    /**\n     * Converts this Long to unsigned.\n     * @returns {!Long} Unsigned long\n     * @expose\n     */\n    LongPrototype.toUnsigned = function toUnsigned() {\n        if (this.unsigned)\n            return this;\n        return new Long(this.low, this.high, true);\n    };\n\n    return Long;\n});\n","/* jquery.signalR.core.js */\n/*global window:false */\n/*!\n * ASP.NET SignalR JavaScript Library v2.2.0\n * http://signalr.net/\n *\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *\n */\n\n/// <reference path=\"Scripts/jquery-1.6.4.js\" />\n/// <reference path=\"jquery.signalR.version.js\" />\n(function ($, window, undefined) {\n\n    var resources = {\n        nojQuery: \"jQuery was not found. Please ensure jQuery is referenced before the SignalR client JavaScript file.\",\n        noTransportOnInit: \"No transport could be initialized successfully. Try specifying a different transport or none at all for auto initialization.\",\n        errorOnNegotiate: \"Error during negotiation request.\",\n        stoppedWhileLoading: \"The connection was stopped during page load.\",\n        stoppedWhileNegotiating: \"The connection was stopped during the negotiate request.\",\n        errorParsingNegotiateResponse: \"Error parsing negotiate response.\",\n        errorDuringStartRequest: \"Error during start request. Stopping the connection.\",\n        stoppedDuringStartRequest: \"The connection was stopped during the start request.\",\n        errorParsingStartResponse: \"Error parsing start response: '{0}'. Stopping the connection.\",\n        invalidStartResponse: \"Invalid start response: '{0}'. Stopping the connection.\",\n        protocolIncompatible: \"You are using a version of the client that isn't compatible with the server. Client version {0}, server version {1}.\",\n        sendFailed: \"Send failed.\",\n        parseFailed: \"Failed at parsing response: {0}\",\n        longPollFailed: \"Long polling request failed.\",\n        eventSourceFailedToConnect: \"EventSource failed to connect.\",\n        eventSourceError: \"Error raised by EventSource\",\n        webSocketClosed: \"WebSocket closed.\",\n        pingServerFailedInvalidResponse: \"Invalid ping response when pinging server: '{0}'.\",\n        pingServerFailed: \"Failed to ping server.\",\n        pingServerFailedStatusCode: \"Failed to ping server.  Server responded with status code {0}, stopping the connection.\",\n        pingServerFailedParse: \"Failed to parse ping server response, stopping the connection.\",\n        noConnectionTransport: \"Connection is in an invalid state, there is no transport active.\",\n        webSocketsInvalidState: \"The Web Socket transport is in an invalid state, transitioning into reconnecting.\",\n        reconnectTimeout: \"Couldn't reconnect within the configured timeout of {0} ms, disconnecting.\",\n        reconnectWindowTimeout: \"The client has been inactive since {0} and it has exceeded the inactivity timeout of {1} ms. Stopping the connection.\"\n    };\n\n    if (typeof ($) !== \"function\") {\n        // no jQuery!\n        throw new Error(resources.nojQuery);\n    }\n\n    var signalR,\n        _connection,\n        _pageLoaded = (window.document.readyState === \"complete\"),\n        _pageWindow = $(window),\n        _negotiateAbortText = \"__Negotiate Aborted__\",\n        events = {\n            onStart: \"onStart\",\n            onStarting: \"onStarting\",\n            onReceived: \"onReceived\",\n            onError: \"onError\",\n            onConnectionSlow: \"onConnectionSlow\",\n            onReconnecting: \"onReconnecting\",\n            onReconnect: \"onReconnect\",\n            onStateChanged: \"onStateChanged\",\n            onDisconnect: \"onDisconnect\"\n        },\n        ajaxDefaults = {\n            processData: true,\n            timeout: null,\n            async: true,\n            global: false,\n            cache: false\n        },\n        log = function (msg, logging) {\n            if (logging === false) {\n                return;\n            }\n            var m;\n            if (typeof (window.console) === \"undefined\") {\n                return;\n            }\n            m = \"[\" + new Date().toTimeString() + \"] SignalR: \" + msg;\n            if (window.console.debug) {\n                window.console.debug(m);\n            } else if (window.console.log) {\n                window.console.log(m);\n            }\n        },\n\n        changeState = function (connection, expectedState, newState) {\n            if (expectedState === connection.state) {\n                connection.state = newState;\n\n                $(connection).triggerHandler(events.onStateChanged, [{ oldState: expectedState, newState: newState }]);\n                return true;\n            }\n\n            return false;\n        },\n\n        isDisconnecting = function (connection) {\n            return connection.state === signalR.connectionState.disconnected;\n        },\n\n        supportsKeepAlive = function (connection) {\n            return connection._.keepAliveData.activated &&\n                   connection.transport.supportsKeepAlive(connection);\n        },\n\n        configureStopReconnectingTimeout = function (connection) {\n            var stopReconnectingTimeout,\n                onReconnectTimeout;\n\n            // Check if this connection has already been configured to stop reconnecting after a specified timeout.\n            // Without this check if a connection is stopped then started events will be bound multiple times.\n            if (!connection._.configuredStopReconnectingTimeout) {\n                onReconnectTimeout = function (connection) {\n                    var message = signalR._.format(signalR.resources.reconnectTimeout, connection.disconnectTimeout);\n                    connection.log(message);\n                    $(connection).triggerHandler(events.onError, [signalR._.error(message, /* source */ \"TimeoutException\")]);\n                    connection.stop(/* async */ false, /* notifyServer */ false);\n                };\n\n                connection.reconnecting(function () {\n                    var connection = this;\n\n                    // Guard against state changing in a previous user defined even handler\n                    if (connection.state === signalR.connectionState.reconnecting) {\n                        stopReconnectingTimeout = window.setTimeout(function () { onReconnectTimeout(connection); }, connection.disconnectTimeout);\n                    }\n                });\n\n                connection.stateChanged(function (data) {\n                    if (data.oldState === signalR.connectionState.reconnecting) {\n                        // Clear the pending reconnect timeout check\n                        window.clearTimeout(stopReconnectingTimeout);\n                    }\n                });\n\n                connection._.configuredStopReconnectingTimeout = true;\n            }\n        };\n\n    signalR = function (url, qs, logging) {\n        /// <summary>Creates a new SignalR connection for the given url</summary>\n        /// <param name=\"url\" type=\"String\">The URL of the long polling endpoint</param>\n        /// <param name=\"qs\" type=\"Object\">\n        ///     [Optional] Custom querystring parameters to add to the connection URL.\n        ///     If an object, every non-function member will be added to the querystring.\n        ///     If a string, it's added to the QS as specified.\n        /// </param>\n        /// <param name=\"logging\" type=\"Boolean\">\n        ///     [Optional] A flag indicating whether connection logging is enabled to the browser\n        ///     console/log. Defaults to false.\n        /// </param>\n\n        return new signalR.fn.init(url, qs, logging);\n    };\n\n    signalR._ = {\n        defaultContentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n        ieVersion: (function () {\n            var version,\n                matches;\n\n            if (window.navigator.appName === 'Microsoft Internet Explorer') {\n                // Check if the user agent has the pattern \"MSIE (one or more numbers).(one or more numbers)\";\n                matches = /MSIE ([0-9]+\\.[0-9]+)/.exec(window.navigator.userAgent);\n\n                if (matches) {\n                    version = window.parseFloat(matches[1]);\n                }\n            }\n\n            // undefined value means not IE\n            return version;\n        })(),\n\n        error: function (message, source, context) {\n            var e = new Error(message);\n            e.source = source;\n\n            if (typeof context !== \"undefined\") {\n                e.context = context;\n            }\n\n            return e;\n        },\n\n        transportError: function (message, transport, source, context) {\n            var e = this.error(message, source, context);\n            e.transport = transport ? transport.name : undefined;\n            return e;\n        },\n\n        format: function () {\n            /// <summary>Usage: format(\"Hi {0}, you are {1}!\", \"Foo\", 100) </summary>\n            var s = arguments[0];\n            for (var i = 0; i < arguments.length - 1; i++) {\n                s = s.replace(\"{\" + i + \"}\", arguments[i + 1]);\n            }\n            return s;\n        },\n\n        firefoxMajorVersion: function (userAgent) {\n            // Firefox user agents: http://useragentstring.com/pages/Firefox/\n            var matches = userAgent.match(/Firefox\\/(\\d+)/);\n            if (!matches || !matches.length || matches.length < 2) {\n                return 0;\n            }\n            return parseInt(matches[1], 10 /* radix */);\n        },\n\n        configurePingInterval: function (connection) {\n            var config = connection._.config,\n                onFail = function (error) {\n                    $(connection).triggerHandler(events.onError, [error]);\n                };\n\n            if (config && !connection._.pingIntervalId && config.pingInterval) {\n                connection._.pingIntervalId = window.setInterval(function () {\n                    signalR.transports._logic.pingServer(connection).fail(onFail);\n                }, config.pingInterval);\n            }\n        }\n    };\n\n    signalR.events = events;\n\n    signalR.resources = resources;\n\n    signalR.ajaxDefaults = ajaxDefaults;\n\n    signalR.changeState = changeState;\n\n    signalR.isDisconnecting = isDisconnecting;\n\n    signalR.connectionState = {\n        connecting: 0,\n        connected: 1,\n        reconnecting: 2,\n        disconnected: 4\n    };\n\n    signalR.hub = {\n        start: function () {\n            // This will get replaced with the real hub connection start method when hubs is referenced correctly\n            throw new Error(\"SignalR: Error loading hubs. Ensure your hubs reference is correct, e.g. <script src='/signalr/js'></script>.\");\n        }\n    };\n\n    _pageWindow.load(function () { _pageLoaded = true; });\n\n    function validateTransport(requestedTransport, connection) {\n        /// <summary>Validates the requested transport by cross checking it with the pre-defined signalR.transports</summary>\n        /// <param name=\"requestedTransport\" type=\"Object\">The designated transports that the user has specified.</param>\n        /// <param name=\"connection\" type=\"signalR\">The connection that will be using the requested transports.  Used for logging purposes.</param>\n        /// <returns type=\"Object\" />\n\n        if ($.isArray(requestedTransport)) {\n            // Go through transport array and remove an \"invalid\" tranports\n            for (var i = requestedTransport.length - 1; i >= 0; i--) {\n                var transport = requestedTransport[i];\n                if ($.type(transport) !== \"string\" || !signalR.transports[transport]) {\n                    connection.log(\"Invalid transport: \" + transport + \", removing it from the transports list.\");\n                    requestedTransport.splice(i, 1);\n                }\n            }\n\n            // Verify we still have transports left, if we dont then we have invalid transports\n            if (requestedTransport.length === 0) {\n                connection.log(\"No transports remain within the specified transport array.\");\n                requestedTransport = null;\n            }\n        } else if (!signalR.transports[requestedTransport] && requestedTransport !== \"auto\") {\n            connection.log(\"Invalid transport: \" + requestedTransport.toString() + \".\");\n            requestedTransport = null;\n        } else if (requestedTransport === \"auto\" && signalR._.ieVersion <= 8) {\n            // If we're doing an auto transport and we're IE8 then force longPolling, #1764\n            return [\"longPolling\"];\n\n        }\n\n        return requestedTransport;\n    }\n\n    function getDefaultPort(protocol) {\n        if (protocol === \"http:\") {\n            return 80;\n        } else if (protocol === \"https:\") {\n            return 443;\n        }\n    }\n\n    function addDefaultPort(protocol, url) {\n        // Remove ports  from url.  We have to check if there's a / or end of line\n        // following the port in order to avoid removing ports such as 8080.\n        if (url.match(/:\\d+$/)) {\n            return url;\n        } else {\n            return url + \":\" + getDefaultPort(protocol);\n        }\n    }\n\n    function ConnectingMessageBuffer(connection, drainCallback) {\n        var that = this,\n            buffer = [];\n\n        that.tryBuffer = function (message) {\n            if (connection.state === $.signalR.connectionState.connecting) {\n                buffer.push(message);\n\n                return true;\n            }\n\n            return false;\n        };\n\n        that.drain = function () {\n            // Ensure that the connection is connected when we drain (do not want to drain while a connection is not active)\n            if (connection.state === $.signalR.connectionState.connected) {\n                while (buffer.length > 0) {\n                    drainCallback(buffer.shift());\n                }\n            }\n        };\n\n        that.clear = function () {\n            buffer = [];\n        };\n    }\n\n    signalR.fn = signalR.prototype = {\n        init: function (url, qs, logging) {\n            var $connection = $(this);\n\n            this.url = url;\n            this.qs = qs;\n            this.lastError = null;\n            this._ = {\n                keepAliveData: {},\n                connectingMessageBuffer: new ConnectingMessageBuffer(this, function (message) {\n                    $connection.triggerHandler(events.onReceived, [message]);\n                }),\n                lastMessageAt: new Date().getTime(),\n                lastActiveAt: new Date().getTime(),\n                beatInterval: 5000, // Default value, will only be overridden if keep alive is enabled,\n                beatHandle: null,\n                totalTransportConnectTimeout: 0 // This will be the sum of the TransportConnectTimeout sent in response to negotiate and connection.transportConnectTimeout\n            };\n            if (typeof (logging) === \"boolean\") {\n                this.logging = logging;\n            }\n        },\n\n        _parseResponse: function (response) {\n            var that = this;\n\n            if (!response) {\n                return response;\n            } else if (typeof response === \"string\") {\n                return that.json.parse(response);\n            } else {\n                return response;\n            }\n        },\n\n        _originalJson: window.JSON,\n\n        json: window.JSON,\n\n        isCrossDomain: function (url, against) {\n            /// <summary>Checks if url is cross domain</summary>\n            /// <param name=\"url\" type=\"String\">The base URL</param>\n            /// <param name=\"against\" type=\"Object\">\n            ///     An optional argument to compare the URL against, if not specified it will be set to window.location.\n            ///     If specified it must contain a protocol and a host property.\n            /// </param>\n            var link;\n\n            url = $.trim(url);\n\n            against = against || window.location;\n\n            if (url.indexOf(\"http\") !== 0) {\n                return false;\n            }\n\n            // Create an anchor tag.\n            link = window.document.createElement(\"a\");\n            link.href = url;\n\n            // When checking for cross domain we have to special case port 80 because the window.location will remove the \n            return link.protocol + addDefaultPort(link.protocol, link.host) !== against.protocol + addDefaultPort(against.protocol, against.host);\n        },\n\n        ajaxDataType: \"text\",\n\n        contentType: \"application/json; charset=UTF-8\",\n\n        logging: false,\n\n        state: signalR.connectionState.disconnected,\n\n        clientProtocol: \"1.5\",\n\n        reconnectDelay: 2000,\n\n        transportConnectTimeout: 0,\n\n        disconnectTimeout: 30000, // This should be set by the server in response to the negotiate request (30s default)\n\n        reconnectWindow: 30000, // This should be set by the server in response to the negotiate request \n\n        keepAliveWarnAt: 2 / 3, // Warn user of slow connection if we breach the X% mark of the keep alive timeout\n\n        start: function (options, callback) {\n            /// <summary>Starts the connection</summary>\n            /// <param name=\"options\" type=\"Object\">Options map</param>\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection has started</param>\n            var connection = this,\n                config = {\n                    pingInterval: 300000,\n                    waitForPageLoad: true,\n                    transport: \"auto\",\n                    jsonp: false\n                },\n                initialize,\n                deferred = connection._deferral || $.Deferred(), // Check to see if there is a pre-existing deferral that's being built on, if so we want to keep using it\n                parser = window.document.createElement(\"a\");\n\n            connection.lastError = null;\n\n            // Persist the deferral so that if start is called multiple times the same deferral is used.\n            connection._deferral = deferred;\n\n            if (!connection.json) {\n                // no JSON!\n                throw new Error(\"SignalR: No JSON parser found. Please ensure json2.js is referenced before the SignalR.js file if you need to support clients without native JSON parsing support, e.g. IE<8.\");\n            }\n\n            if ($.type(options) === \"function\") {\n                // Support calling with single callback parameter\n                callback = options;\n            } else if ($.type(options) === \"object\") {\n                $.extend(config, options);\n                if ($.type(config.callback) === \"function\") {\n                    callback = config.callback;\n                }\n            }\n\n            config.transport = validateTransport(config.transport, connection);\n\n            // If the transport is invalid throw an error and abort start\n            if (!config.transport) {\n                throw new Error(\"SignalR: Invalid transport(s) specified, aborting start.\");\n            }\n\n            connection._.config = config;\n\n            // Check to see if start is being called prior to page load\n            // If waitForPageLoad is true we then want to re-direct function call to the window load event\n            if (!_pageLoaded && config.waitForPageLoad === true) {\n                connection._.deferredStartHandler = function () {\n                    connection.start(options, callback);\n                };\n                _pageWindow.bind(\"load\", connection._.deferredStartHandler);\n\n                return deferred.promise();\n            }\n\n            // If we're already connecting just return the same deferral as the original connection start\n            if (connection.state === signalR.connectionState.connecting) {\n                return deferred.promise();\n            } else if (changeState(connection,\n                            signalR.connectionState.disconnected,\n                            signalR.connectionState.connecting) === false) {\n                // We're not connecting so try and transition into connecting.\n                // If we fail to transition then we're either in connected or reconnecting.\n\n                deferred.resolve(connection);\n                return deferred.promise();\n            }\n\n            configureStopReconnectingTimeout(connection);\n\n            // Resolve the full url\n            parser.href = connection.url;\n            if (!parser.protocol || parser.protocol === \":\") {\n                connection.protocol = window.document.location.protocol;\n                connection.host = parser.host || window.document.location.host;\n            } else {\n                connection.protocol = parser.protocol;\n                connection.host = parser.host;\n            }\n\n            connection.baseUrl = connection.protocol + \"//\" + connection.host;\n\n            // Set the websocket protocol\n            connection.wsProtocol = connection.protocol === \"https:\" ? \"wss://\" : \"ws://\";\n\n            // If jsonp with no/auto transport is specified, then set the transport to long polling\n            // since that is the only transport for which jsonp really makes sense.\n            // Some developers might actually choose to specify jsonp for same origin requests\n            // as demonstrated by Issue #623.\n            if (config.transport === \"auto\" && config.jsonp === true) {\n                config.transport = \"longPolling\";\n            }\n\n            // If the url is protocol relative, prepend the current windows protocol to the url. \n            if (connection.url.indexOf(\"//\") === 0) {\n                connection.url = window.location.protocol + connection.url;\n                connection.log(\"Protocol relative URL detected, normalizing it to '\" + connection.url + \"'.\");\n            }\n\n            if (this.isCrossDomain(connection.url)) {\n                connection.log(\"Auto detected cross domain url.\");\n\n                if (config.transport === \"auto\") {\n                    // TODO: Support XDM with foreverFrame\n                    config.transport = [\"webSockets\", \"serverSentEvents\", \"longPolling\"];\n                }\n\n                if (typeof (config.withCredentials) === \"undefined\") {\n                    config.withCredentials = true;\n                }\n\n                // Determine if jsonp is the only choice for negotiation, ajaxSend and ajaxAbort.\n                // i.e. if the browser doesn't supports CORS\n                // If it is, ignore any preference to the contrary, and switch to jsonp.\n                if (!config.jsonp) {\n                    config.jsonp = !$.support.cors;\n\n                    if (config.jsonp) {\n                        connection.log(\"Using jsonp because this browser doesn't support CORS.\");\n                    }\n                }\n\n                connection.contentType = signalR._.defaultContentType;\n            }\n\n            connection.withCredentials = config.withCredentials;\n\n            connection.ajaxDataType = config.jsonp ? \"jsonp\" : \"text\";\n\n            $(connection).bind(events.onStart, function (e, data) {\n                if ($.type(callback) === \"function\") {\n                    callback.call(connection);\n                }\n                deferred.resolve(connection);\n            });\n\n            connection._.initHandler = signalR.transports._logic.initHandler(connection);\n\n            initialize = function (transports, index) {\n                var noTransportError = signalR._.error(resources.noTransportOnInit);\n\n                index = index || 0;\n                if (index >= transports.length) {\n                    if (index === 0) {\n                        connection.log(\"No transports supported by the server were selected.\");\n                    } else if (index === 1) {\n                        connection.log(\"No fallback transports were selected.\");\n                    } else {\n                        connection.log(\"Fallback transports exhausted.\");\n                    }\n\n                    // No transport initialized successfully\n                    $(connection).triggerHandler(events.onError, [noTransportError]);\n                    deferred.reject(noTransportError);\n                    // Stop the connection if it has connected and move it into the disconnected state\n                    connection.stop();\n                    return;\n                }\n\n                // The connection was aborted\n                if (connection.state === signalR.connectionState.disconnected) {\n                    return;\n                }\n\n                var transportName = transports[index],\n                    transport = signalR.transports[transportName],\n                    onFallback = function () {\n                        initialize(transports, index + 1);\n                    };\n\n                connection.transport = transport;\n\n                try {\n                    connection._.initHandler.start(transport, function () { // success\n                        // Firefox 11+ doesn't allow sync XHR withCredentials: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#withCredentials\n                        var isFirefox11OrGreater = signalR._.firefoxMajorVersion(window.navigator.userAgent) >= 11,\n                            asyncAbort = !!connection.withCredentials && isFirefox11OrGreater;\n\n                        connection.log(\"The start request succeeded. Transitioning to the connected state.\");\n\n                        if (supportsKeepAlive(connection)) {\n                            signalR.transports._logic.monitorKeepAlive(connection);\n                        }\n\n                        signalR.transports._logic.startHeartbeat(connection);\n\n                        // Used to ensure low activity clients maintain their authentication.\n                        // Must be configured once a transport has been decided to perform valid ping requests.\n                        signalR._.configurePingInterval(connection);\n\n                        if (!changeState(connection,\n                                            signalR.connectionState.connecting,\n                                            signalR.connectionState.connected)) {\n                            connection.log(\"WARNING! The connection was not in the connecting state.\");\n                        }\n\n                        // Drain any incoming buffered messages (messages that came in prior to connect)\n                        connection._.connectingMessageBuffer.drain();\n\n                        $(connection).triggerHandler(events.onStart);\n\n                        // wire the stop handler for when the user leaves the page\n                        _pageWindow.bind(\"unload\", function () {\n                            connection.log(\"Window unloading, stopping the connection.\");\n\n                            connection.stop(asyncAbort);\n                        });\n\n                        if (isFirefox11OrGreater) {\n                            // Firefox does not fire cross-domain XHRs in the normal unload handler on tab close.\n                            // #2400\n                            _pageWindow.bind(\"beforeunload\", function () {\n                                // If connection.stop() runs runs in beforeunload and fails, it will also fail\n                                // in unload unless connection.stop() runs after a timeout.\n                                window.setTimeout(function () {\n                                    connection.stop(asyncAbort);\n                                }, 0);\n                            });\n                        }\n                    }, onFallback);\n                }\n                catch (error) {\n                    connection.log(transport.name + \" transport threw '\" + error.message + \"' when attempting to start.\");\n                    onFallback();\n                }\n            };\n\n            var url = connection.url + \"/negotiate\",\n                onFailed = function (error, connection) {\n                    var err = signalR._.error(resources.errorOnNegotiate, error, connection._.negotiateRequest);\n\n                    $(connection).triggerHandler(events.onError, err);\n                    deferred.reject(err);\n                    // Stop the connection if negotiate failed\n                    connection.stop();\n                };\n\n            $(connection).triggerHandler(events.onStarting);\n\n            url = signalR.transports._logic.prepareQueryString(connection, url);\n\n            connection.log(\"Negotiating with '\" + url + \"'.\");\n\n            // Save the ajax negotiate request object so we can abort it if stop is called while the request is in flight.\n            connection._.negotiateRequest = signalR.transports._logic.ajax(connection, {\n                url: url,\n                error: function (error, statusText) {\n                    // We don't want to cause any errors if we're aborting our own negotiate request.\n                    if (statusText !== _negotiateAbortText) {\n                        onFailed(error, connection);\n                    } else {\n                        // This rejection will noop if the deferred has already been resolved or rejected.\n                        deferred.reject(signalR._.error(resources.stoppedWhileNegotiating, null /* error */, connection._.negotiateRequest));\n                    }\n                },\n                success: function (result) {\n                    var res,\n                        keepAliveData,\n                        protocolError,\n                        transports = [],\n                        supportedTransports = [];\n\n                    try {\n                        res = connection._parseResponse(result);\n                    } catch (error) {\n                        onFailed(signalR._.error(resources.errorParsingNegotiateResponse, error), connection);\n                        return;\n                    }\n\n                    keepAliveData = connection._.keepAliveData;\n                    connection.appRelativeUrl = res.Url;\n                    connection.id = res.ConnectionId;\n                    connection.token = res.ConnectionToken;\n                    connection.webSocketServerUrl = res.WebSocketServerUrl;\n\n                    // The long poll timeout is the ConnectionTimeout plus 10 seconds\n                    connection._.pollTimeout = res.ConnectionTimeout * 1000 + 10000; // in ms\n\n                    // Once the server has labeled the PersistentConnection as Disconnected, we should stop attempting to reconnect\n                    // after res.DisconnectTimeout seconds.\n                    connection.disconnectTimeout = res.DisconnectTimeout * 1000; // in ms\n\n                    // Add the TransportConnectTimeout from the response to the transportConnectTimeout from the client to calculate the total timeout\n                    connection._.totalTransportConnectTimeout = connection.transportConnectTimeout + res.TransportConnectTimeout * 1000;\n\n                    // If we have a keep alive\n                    if (res.KeepAliveTimeout) {\n                        // Register the keep alive data as activated\n                        keepAliveData.activated = true;\n\n                        // Timeout to designate when to force the connection into reconnecting converted to milliseconds\n                        keepAliveData.timeout = res.KeepAliveTimeout * 1000;\n\n                        // Timeout to designate when to warn the developer that the connection may be dead or is not responding.\n                        keepAliveData.timeoutWarning = keepAliveData.timeout * connection.keepAliveWarnAt;\n\n                        // Instantiate the frequency in which we check the keep alive.  It must be short in order to not miss/pick up any changes\n                        connection._.beatInterval = (keepAliveData.timeout - keepAliveData.timeoutWarning) / 3;\n                    } else {\n                        keepAliveData.activated = false;\n                    }\n\n                    connection.reconnectWindow = connection.disconnectTimeout + (keepAliveData.timeout || 0);\n\n                    if (!res.ProtocolVersion || res.ProtocolVersion !== connection.clientProtocol) {\n                        protocolError = signalR._.error(signalR._.format(resources.protocolIncompatible, connection.clientProtocol, res.ProtocolVersion));\n                        $(connection).triggerHandler(events.onError, [protocolError]);\n                        deferred.reject(protocolError);\n\n                        return;\n                    }\n\n                    $.each(signalR.transports, function (key) {\n                        if ((key.indexOf(\"_\") === 0) || (key === \"webSockets\" && !res.TryWebSockets)) {\n                            return true;\n                        }\n                        supportedTransports.push(key);\n                    });\n\n                    if ($.isArray(config.transport)) {\n                        $.each(config.transport, function (_, transport) {\n                            if ($.inArray(transport, supportedTransports) >= 0) {\n                                transports.push(transport);\n                            }\n                        });\n                    } else if (config.transport === \"auto\") {\n                        transports = supportedTransports;\n                    } else if ($.inArray(config.transport, supportedTransports) >= 0) {\n                        transports.push(config.transport);\n                    }\n\n                    initialize(transports);\n                }\n            });\n\n            return deferred.promise();\n        },\n\n        starting: function (callback) {\n            /// <summary>Adds a callback that will be invoked before anything is sent over the connection</summary>\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute before the connection is fully instantiated.</param>\n            /// <returns type=\"signalR\" />\n            var connection = this;\n            $(connection).bind(events.onStarting, function (e, data) {\n                callback.call(connection);\n            });\n            return connection;\n        },\n\n        send: function (data) {\n            /// <summary>Sends data over the connection</summary>\n            /// <param name=\"data\" type=\"String\">The data to send over the connection</param>\n            /// <returns type=\"signalR\" />\n            var connection = this;\n\n            if (connection.state === signalR.connectionState.disconnected) {\n                // Connection hasn't been started yet\n                throw new Error(\"SignalR: Connection must be started before data can be sent. Call .start() before .send()\");\n            }\n\n            if (connection.state === signalR.connectionState.connecting) {\n                // Connection hasn't been started yet\n                throw new Error(\"SignalR: Connection has not been fully initialized. Use .start().done() or .start().fail() to run logic after the connection has started.\");\n            }\n\n            connection.transport.send(connection, data);\n            // REVIEW: Should we return deferred here?\n            return connection;\n        },\n\n        received: function (callback) {\n            /// <summary>Adds a callback that will be invoked after anything is received over the connection</summary>\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when any data is received on the connection</param>\n            /// <returns type=\"signalR\" />\n            var connection = this;\n            $(connection).bind(events.onReceived, function (e, data) {\n                callback.call(connection, data);\n            });\n            return connection;\n        },\n\n        stateChanged: function (callback) {\n            /// <summary>Adds a callback that will be invoked when the connection state changes</summary>\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection state changes</param>\n            /// <returns type=\"signalR\" />\n            var connection = this;\n            $(connection).bind(events.onStateChanged, function (e, data) {\n                callback.call(connection, data);\n            });\n            return connection;\n        },\n\n        error: function (callback) {\n            /// <summary>Adds a callback that will be invoked after an error occurs with the connection</summary>\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when an error occurs on the connection</param>\n            /// <returns type=\"signalR\" />\n            var connection = this;\n            $(connection).bind(events.onError, function (e, errorData, sendData) {\n                connection.lastError = errorData;\n                // In practice 'errorData' is the SignalR built error object.\n                // In practice 'sendData' is undefined for all error events except those triggered by\n                // 'ajaxSend' and 'webSockets.send'.'sendData' is the original send payload.\n                callback.call(connection, errorData, sendData);\n            });\n            return connection;\n        },\n\n        disconnected: function (callback) {\n            /// <summary>Adds a callback that will be invoked when the client disconnects</summary>\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection is broken</param>\n            /// <returns type=\"signalR\" />\n            var connection = this;\n            $(connection).bind(events.onDisconnect, function (e, data) {\n                callback.call(connection);\n            });\n            return connection;\n        },\n\n        connectionSlow: function (callback) {\n            /// <summary>Adds a callback that will be invoked when the client detects a slow connection</summary>\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection is slow</param>\n            /// <returns type=\"signalR\" />\n            var connection = this;\n            $(connection).bind(events.onConnectionSlow, function (e, data) {\n                callback.call(connection);\n            });\n\n            return connection;\n        },\n\n        reconnecting: function (callback) {\n            /// <summary>Adds a callback that will be invoked when the underlying transport begins reconnecting</summary>\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection enters a reconnecting state</param>\n            /// <returns type=\"signalR\" />\n            var connection = this;\n            $(connection).bind(events.onReconnecting, function (e, data) {\n                callback.call(connection);\n            });\n            return connection;\n        },\n\n        reconnected: function (callback) {\n            /// <summary>Adds a callback that will be invoked when the underlying transport reconnects</summary>\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection is restored</param>\n            /// <returns type=\"signalR\" />\n            var connection = this;\n            $(connection).bind(events.onReconnect, function (e, data) {\n                callback.call(connection);\n            });\n            return connection;\n        },\n\n        stop: function (async, notifyServer) {\n            /// <summary>Stops listening</summary>\n            /// <param name=\"async\" type=\"Boolean\">Whether or not to asynchronously abort the connection</param>\n            /// <param name=\"notifyServer\" type=\"Boolean\">Whether we want to notify the server that we are aborting the connection</param>\n            /// <returns type=\"signalR\" />\n            var connection = this,\n                // Save deferral because this is always cleaned up\n                deferral = connection._deferral;\n\n            // Verify that we've bound a load event.\n            if (connection._.deferredStartHandler) {\n                // Unbind the event.\n                _pageWindow.unbind(\"load\", connection._.deferredStartHandler);\n            }\n\n            // Always clean up private non-timeout based state.\n            delete connection._.config;\n            delete connection._.deferredStartHandler;\n\n            // This needs to be checked despite the connection state because a connection start can be deferred until page load.\n            // If we've deferred the start due to a page load we need to unbind the \"onLoad\" -> start event.\n            if (!_pageLoaded && (!connection._.config || connection._.config.waitForPageLoad === true)) {\n                connection.log(\"Stopping connection prior to negotiate.\");\n\n                // If we have a deferral we should reject it\n                if (deferral) {\n                    deferral.reject(signalR._.error(resources.stoppedWhileLoading));\n                }\n\n                // Short-circuit because the start has not been fully started.\n                return;\n            }\n\n            if (connection.state === signalR.connectionState.disconnected) {\n                return;\n            }\n\n            connection.log(\"Stopping connection.\");\n\n            changeState(connection, connection.state, signalR.connectionState.disconnected);\n\n            // Clear this no matter what\n            window.clearTimeout(connection._.beatHandle);\n            window.clearInterval(connection._.pingIntervalId);\n\n            if (connection.transport) {\n                connection.transport.stop(connection);\n\n                if (notifyServer !== false) {\n                    connection.transport.abort(connection, async);\n                }\n\n                if (supportsKeepAlive(connection)) {\n                    signalR.transports._logic.stopMonitoringKeepAlive(connection);\n                }\n\n                connection.transport = null;\n            }\n\n            if (connection._.negotiateRequest) {\n                // If the negotiation request has already completed this will noop.\n                connection._.negotiateRequest.abort(_negotiateAbortText);\n                delete connection._.negotiateRequest;\n            }\n\n            // Ensure that initHandler.stop() is called before connection._deferral is deleted\n            if (connection._.initHandler) {\n                connection._.initHandler.stop();\n            }\n\n            // Trigger the disconnect event\n            $(connection).triggerHandler(events.onDisconnect);\n\n            delete connection._deferral;\n            delete connection.messageId;\n            delete connection.groupsToken;\n            delete connection.id;\n            delete connection._.pingIntervalId;\n            delete connection._.lastMessageAt;\n            delete connection._.lastActiveAt;\n\n            // Clear out our message buffer\n            connection._.connectingMessageBuffer.clear();\n\n            return connection;\n        },\n\n        log: function (msg) {\n            log(msg, this.logging);\n        }\n    };\n\n    signalR.fn.init.prototype = signalR.fn;\n\n    signalR.noConflict = function () {\n        /// <summary>Reinstates the original value of $.connection and returns the signalR object for manual assignment</summary>\n        /// <returns type=\"signalR\" />\n        if ($.connection === signalR) {\n            $.connection = _connection;\n        }\n        return signalR;\n    };\n\n    if ($.connection) {\n        _connection = $.connection;\n    }\n\n    $.connection = $.signalR = signalR;\n\n}(window.jQuery, window));\n/* jquery.signalR.transports.common.js */\n// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n\n/*global window:false */\n/// <reference path=\"jquery.signalR.core.js\" />\n\n(function ($, window, undefined) {\n\n    var signalR = $.signalR,\n        events = $.signalR.events,\n        changeState = $.signalR.changeState,\n        startAbortText = \"__Start Aborted__\",\n        transportLogic;\n\n    signalR.transports = {};\n\n    function beat(connection) {\n        if (connection._.keepAliveData.monitoring) {\n            checkIfAlive(connection);\n        }\n\n        // Ensure that we successfully marked active before continuing the heartbeat.\n        if (transportLogic.markActive(connection)) {\n            connection._.beatHandle = window.setTimeout(function () {\n                beat(connection);\n            }, connection._.beatInterval);\n        }\n    }\n\n    function checkIfAlive(connection) {\n        var keepAliveData = connection._.keepAliveData,\n            timeElapsed;\n\n        // Only check if we're connected\n        if (connection.state === signalR.connectionState.connected) {\n            timeElapsed = new Date().getTime() - connection._.lastMessageAt;\n\n            // Check if the keep alive has completely timed out\n            if (timeElapsed >= keepAliveData.timeout) {\n                connection.log(\"Keep alive timed out.  Notifying transport that connection has been lost.\");\n\n                // Notify transport that the connection has been lost\n                connection.transport.lostConnection(connection);\n            } else if (timeElapsed >= keepAliveData.timeoutWarning) {\n                // This is to assure that the user only gets a single warning\n                if (!keepAliveData.userNotified) {\n                    connection.log(\"Keep alive has been missed, connection may be dead/slow.\");\n                    $(connection).triggerHandler(events.onConnectionSlow);\n                    keepAliveData.userNotified = true;\n                }\n            } else {\n                keepAliveData.userNotified = false;\n            }\n        }\n    }\n\n    function getAjaxUrl(connection, path) {\n        var url = connection.url + path;\n\n        if (connection.transport) {\n            url += \"?transport=\" + connection.transport.name;\n        }\n\n        return transportLogic.prepareQueryString(connection, url);\n    }\n\n    function InitHandler(connection) {\n        this.connection = connection;\n\n        this.startRequested = false;\n        this.startCompleted = false;\n        this.connectionStopped = false;\n    }\n\n    InitHandler.prototype = {\n        start: function (transport, onSuccess, onFallback) {\n            var that = this,\n                connection = that.connection,\n                failCalled = false;\n\n            if (that.startRequested || that.connectionStopped) {\n                connection.log(\"WARNING! \" + transport.name + \" transport cannot be started. Initialization ongoing or completed.\");\n                return;\n            }\n\n            connection.log(transport.name + \" transport starting.\");\n\n            that.transportTimeoutHandle = window.setTimeout(function () {\n                if (!failCalled) {\n                    failCalled = true;\n                    connection.log(transport.name + \" transport timed out when trying to connect.\");\n                    that.transportFailed(transport, undefined, onFallback);\n                }\n            }, connection._.totalTransportConnectTimeout);\n\n            transport.start(connection, function () {\n                if (!failCalled) {\n                    that.initReceived(transport, onSuccess);\n                }\n            }, function (error) {\n                // Don't allow the same transport to cause onFallback to be called twice\n                if (!failCalled) {\n                    failCalled = true;\n                    that.transportFailed(transport, error, onFallback);\n                }\n\n                // Returns true if the transport should stop;\n                // false if it should attempt to reconnect\n                return !that.startCompleted || that.connectionStopped;\n            });\n        },\n\n        stop: function () {\n            this.connectionStopped = true;\n            window.clearTimeout(this.transportTimeoutHandle);\n            signalR.transports._logic.tryAbortStartRequest(this.connection);\n        },\n\n        initReceived: function (transport, onSuccess) {\n            var that = this,\n                connection = that.connection;\n\n            if (that.startRequested) {\n                connection.log(\"WARNING! The client received multiple init messages.\");\n                return;\n            }\n\n            if (that.connectionStopped) {\n                return;\n            }\n\n            that.startRequested = true;\n            window.clearTimeout(that.transportTimeoutHandle);\n\n            connection.log(transport.name + \" transport connected. Initiating start request.\");\n            signalR.transports._logic.ajaxStart(connection, function () {\n                that.startCompleted = true;\n                onSuccess();\n            });\n        },\n\n        transportFailed: function (transport, error, onFallback) {\n            var connection = this.connection,\n                deferred = connection._deferral,\n                wrappedError;\n\n            if (this.connectionStopped) {\n                return;\n            }\n\n            window.clearTimeout(this.transportTimeoutHandle);\n\n            if (!this.startRequested) {\n                transport.stop(connection);\n\n                connection.log(transport.name + \" transport failed to connect. Attempting to fall back.\");\n                onFallback();\n            } else if (!this.startCompleted) {\n                // Do not attempt to fall back if a start request is ongoing during a transport failure.\n                // Instead, trigger an error and stop the connection.\n                wrappedError = signalR._.error(signalR.resources.errorDuringStartRequest, error);\n\n                connection.log(transport.name + \" transport failed during the start request. Stopping the connection.\");\n                $(connection).triggerHandler(events.onError, [wrappedError]);\n                if (deferred) {\n                    deferred.reject(wrappedError);\n                }\n\n                connection.stop();\n            } else {\n                // The start request has completed, but the connection has not stopped.\n                // No need to do anything here. The transport should attempt its normal reconnect logic.\n            }\n        }\n    };\n\n    transportLogic = signalR.transports._logic = {\n        ajax: function (connection, options) {\n            return $.ajax(\n                $.extend(/*deep copy*/ true, {}, $.signalR.ajaxDefaults, {\n                    type: \"GET\",\n                    data: {},\n                    xhrFields: { withCredentials: connection.withCredentials },\n                    contentType: connection.contentType,\n                    dataType: connection.ajaxDataType\n                }, options));\n        },\n\n        pingServer: function (connection) {\n            /// <summary>Pings the server</summary>\n            /// <param name=\"connection\" type=\"signalr\">Connection associated with the server ping</param>\n            /// <returns type=\"signalR\" />\n            var url,\n                xhr,\n                deferral = $.Deferred();\n\n            if (connection.transport) {\n                url = connection.url + \"/ping\";\n\n                url = transportLogic.addQs(url, connection.qs);\n\n                xhr = transportLogic.ajax(connection, {\n                    url: url,\n                    success: function (result) {\n                        var data;\n\n                        try {\n                            data = connection._parseResponse(result);\n                        }\n                        catch (error) {\n                            deferral.reject(\n                                signalR._.transportError(\n                                    signalR.resources.pingServerFailedParse,\n                                    connection.transport,\n                                    error,\n                                    xhr\n                                )\n                            );\n                            connection.stop();\n                            return;\n                        }\n\n                        if (data.Response === \"pong\") {\n                            deferral.resolve();\n                        }\n                        else {\n                            deferral.reject(\n                                signalR._.transportError(\n                                    signalR._.format(signalR.resources.pingServerFailedInvalidResponse, result),\n                                    connection.transport,\n                                    null /* error */,\n                                    xhr\n                                )\n                            );\n                        }\n                    },\n                    error: function (error) {\n                        if (error.status === 401 || error.status === 403) {\n                            deferral.reject(\n                                signalR._.transportError(\n                                    signalR._.format(signalR.resources.pingServerFailedStatusCode, error.status),\n                                    connection.transport,\n                                    error,\n                                    xhr\n                                )\n                            );\n                            connection.stop();\n                        }\n                        else {\n                            deferral.reject(\n                                signalR._.transportError(\n                                    signalR.resources.pingServerFailed,\n                                    connection.transport,\n                                    error,\n                                    xhr\n                                )\n                            );\n                        }\n                    }\n                });\n            }\n            else {\n                deferral.reject(\n                    signalR._.transportError(\n                        signalR.resources.noConnectionTransport,\n                        connection.transport\n                    )\n                );\n            }\n\n            return deferral.promise();\n        },\n\n        prepareQueryString: function (connection, url) {\n            var preparedUrl;\n\n            // Use addQs to start since it handles the ?/& prefix for us\n            preparedUrl = transportLogic.addQs(url, \"clientProtocol=\" + connection.clientProtocol);\n\n            // Add the user-specified query string params if any\n            preparedUrl = transportLogic.addQs(preparedUrl, connection.qs);\n\n            if (connection.token) {\n                preparedUrl += \"&connectionToken=\" + window.encodeURIComponent(connection.token);\n            }\n\n            if (connection.data) {\n                preparedUrl += \"&connectionData=\" + window.encodeURIComponent(connection.data);\n            }\n\n            return preparedUrl;\n        },\n\n        addQs: function (url, qs) {\n            var appender = url.indexOf(\"?\") !== -1 ? \"&\" : \"?\",\n                firstChar;\n\n            if (!qs) {\n                return url;\n            }\n\n            if (typeof (qs) === \"object\") {\n                return url + appender + $.param(qs);\n            }\n\n            if (typeof (qs) === \"string\") {\n                firstChar = qs.charAt(0);\n\n                if (firstChar === \"?\" || firstChar === \"&\") {\n                    appender = \"\";\n                }\n\n                return url + appender + qs;\n            }\n\n            throw new Error(\"Query string property must be either a string or object.\");\n        },\n\n        // BUG #2953: The url needs to be same otherwise it will cause a memory leak\n        getUrl: function (connection, transport, reconnecting, poll, ajaxPost) {\n            /// <summary>Gets the url for making a GET based connect request</summary>\n            var baseUrl = transport === \"webSockets\" ? \"\" : connection.baseUrl,\n                url = baseUrl + connection.appRelativeUrl,\n                qs = \"transport=\" + transport;\n\n            if (!ajaxPost && connection.groupsToken) {\n                qs += \"&groupsToken=\" + window.encodeURIComponent(connection.groupsToken);\n            }\n\n            if (!reconnecting) {\n                url += \"/connect\";\n            } else {\n                if (poll) {\n                    // longPolling transport specific\n                    url += \"/poll\";\n                } else {\n                    url += \"/reconnect\";\n                }\n\n                if (!ajaxPost && connection.messageId) {\n                    qs += \"&messageId=\" + window.encodeURIComponent(connection.messageId);\n                }\n            }\n            url += \"?\" + qs;\n            url = transportLogic.prepareQueryString(connection, url);\n\n            if (!ajaxPost) {\n                url += \"&tid=\" + Math.floor(Math.random() * 11);\n            }\n\n            return url;\n        },\n\n        maximizePersistentResponse: function (minPersistentResponse) {\n            return {\n                MessageId: minPersistentResponse.C,\n                Messages: minPersistentResponse.M,\n                Initialized: typeof (minPersistentResponse.S) !== \"undefined\" ? true : false,\n                ShouldReconnect: typeof (minPersistentResponse.T) !== \"undefined\" ? true : false,\n                LongPollDelay: minPersistentResponse.L,\n                GroupsToken: minPersistentResponse.G\n            };\n        },\n\n        updateGroups: function (connection, groupsToken) {\n            if (groupsToken) {\n                connection.groupsToken = groupsToken;\n            }\n        },\n\n        stringifySend: function (connection, message) {\n            if (typeof (message) === \"string\" || typeof (message) === \"undefined\" || message === null) {\n                return message;\n            }\n            return connection.json.stringify(message);\n        },\n\n        ajaxSend: function (connection, data) {\n            var payload = transportLogic.stringifySend(connection, data),\n                url = getAjaxUrl(connection, \"/send\"),\n                xhr,\n                onFail = function (error, connection) {\n                    $(connection).triggerHandler(events.onError, [signalR._.transportError(signalR.resources.sendFailed, connection.transport, error, xhr), data]);\n                };\n\n\n            xhr = transportLogic.ajax(connection, {\n                url: url,\n                type: connection.ajaxDataType === \"jsonp\" ? \"GET\" : \"POST\",\n                contentType: signalR._.defaultContentType,\n                data: {\n                    data: payload\n                },\n                success: function (result) {\n                    var res;\n\n                    if (result) {\n                        try {\n                            res = connection._parseResponse(result);\n                        }\n                        catch (error) {\n                            onFail(error, connection);\n                            connection.stop();\n                            return;\n                        }\n\n                        transportLogic.triggerReceived(connection, res);\n                    }\n                },\n                error: function (error, textStatus) {\n                    if (textStatus === \"abort\" || textStatus === \"parsererror\") {\n                        // The parsererror happens for sends that don't return any data, and hence\n                        // don't write the jsonp callback to the response. This is harder to fix on the server\n                        // so just hack around it on the client for now.\n                        return;\n                    }\n\n                    onFail(error, connection);\n                }\n            });\n\n            return xhr;\n        },\n\n        ajaxAbort: function (connection, async) {\n            if (typeof (connection.transport) === \"undefined\") {\n                return;\n            }\n\n            // Async by default unless explicitly overidden\n            async = typeof async === \"undefined\" ? true : async;\n\n            var url = getAjaxUrl(connection, \"/abort\");\n\n            transportLogic.ajax(connection, {\n                url: url,\n                async: async,\n                timeout: 1000,\n                type: \"POST\"\n            });\n\n            connection.log(\"Fired ajax abort async = \" + async + \".\");\n        },\n\n        ajaxStart: function (connection, onSuccess) {\n            var rejectDeferred = function (error) {\n                    var deferred = connection._deferral;\n                    if (deferred) {\n                        deferred.reject(error);\n                    }\n                },\n                triggerStartError = function (error) {\n                    connection.log(\"The start request failed. Stopping the connection.\");\n                    $(connection).triggerHandler(events.onError, [error]);\n                    rejectDeferred(error);\n                    connection.stop();\n                };\n\n            connection._.startRequest = transportLogic.ajax(connection, {\n                url: getAjaxUrl(connection, \"/start\"),\n                success: function (result, statusText, xhr) {\n                    var data;\n\n                    try {\n                        data = connection._parseResponse(result);\n                    } catch (error) {\n                        triggerStartError(signalR._.error(\n                            signalR._.format(signalR.resources.errorParsingStartResponse, result),\n                            error, xhr));\n                        return;\n                    }\n\n                    if (data.Response === \"started\") {\n                        onSuccess();\n                    } else {\n                        triggerStartError(signalR._.error(\n                            signalR._.format(signalR.resources.invalidStartResponse, result),\n                            null /* error */, xhr));\n                    }\n                },\n                error: function (xhr, statusText, error) {\n                    if (statusText !== startAbortText) {\n                        triggerStartError(signalR._.error(\n                            signalR.resources.errorDuringStartRequest,\n                            error, xhr));\n                    } else {\n                        // Stop has been called, no need to trigger the error handler\n                        // or stop the connection again with onStartError\n                        connection.log(\"The start request aborted because connection.stop() was called.\");\n                        rejectDeferred(signalR._.error(\n                            signalR.resources.stoppedDuringStartRequest,\n                            null /* error */, xhr));\n                    }\n                }\n            });\n        },\n\n        tryAbortStartRequest: function (connection) {\n            if (connection._.startRequest) {\n                // If the start request has already completed this will noop.\n                connection._.startRequest.abort(startAbortText);\n                delete connection._.startRequest;\n            }\n        },\n\n        tryInitialize: function (persistentResponse, onInitialized) {\n            if (persistentResponse.Initialized) {\n                onInitialized();\n            }\n        },\n\n        triggerReceived: function (connection, data) {\n            if (!connection._.connectingMessageBuffer.tryBuffer(data)) {\n                $(connection).triggerHandler(events.onReceived, [data]);\n            }\n        },\n\n        processMessages: function (connection, minData, onInitialized) {\n            var data;\n\n            // Update the last message time stamp\n            transportLogic.markLastMessage(connection);\n\n            if (minData) {\n                data = transportLogic.maximizePersistentResponse(minData);\n\n                transportLogic.updateGroups(connection, data.GroupsToken);\n\n                if (data.MessageId) {\n                    connection.messageId = data.MessageId;\n                }\n\n                if (data.Messages) {\n                    $.each(data.Messages, function (index, message) {\n                        transportLogic.triggerReceived(connection, message);\n                    });\n\n                    transportLogic.tryInitialize(data, onInitialized);\n                }\n            }\n        },\n\n        monitorKeepAlive: function (connection) {\n            var keepAliveData = connection._.keepAliveData;\n\n            // If we haven't initiated the keep alive timeouts then we need to\n            if (!keepAliveData.monitoring) {\n                keepAliveData.monitoring = true;\n\n                transportLogic.markLastMessage(connection);\n\n                // Save the function so we can unbind it on stop\n                connection._.keepAliveData.reconnectKeepAliveUpdate = function () {\n                    // Mark a new message so that keep alive doesn't time out connections\n                    transportLogic.markLastMessage(connection);\n                };\n\n                // Update Keep alive on reconnect\n                $(connection).bind(events.onReconnect, connection._.keepAliveData.reconnectKeepAliveUpdate);\n\n                connection.log(\"Now monitoring keep alive with a warning timeout of \" + keepAliveData.timeoutWarning + \", keep alive timeout of \" + keepAliveData.timeout + \" and disconnecting timeout of \" + connection.disconnectTimeout);\n            } else {\n                connection.log(\"Tried to monitor keep alive but it's already being monitored.\");\n            }\n        },\n\n        stopMonitoringKeepAlive: function (connection) {\n            var keepAliveData = connection._.keepAliveData;\n\n            // Only attempt to stop the keep alive monitoring if its being monitored\n            if (keepAliveData.monitoring) {\n                // Stop monitoring\n                keepAliveData.monitoring = false;\n\n                // Remove the updateKeepAlive function from the reconnect event\n                $(connection).unbind(events.onReconnect, connection._.keepAliveData.reconnectKeepAliveUpdate);\n\n                // Clear all the keep alive data\n                connection._.keepAliveData = {};\n                connection.log(\"Stopping the monitoring of the keep alive.\");\n            }\n        },\n\n        startHeartbeat: function (connection) {\n            connection._.lastActiveAt = new Date().getTime();\n            beat(connection);\n        },\n\n        markLastMessage: function (connection) {\n            connection._.lastMessageAt = new Date().getTime();\n        },\n\n        markActive: function (connection) {\n            if (transportLogic.verifyLastActive(connection)) {\n                connection._.lastActiveAt = new Date().getTime();\n                return true;\n            }\n\n            return false;\n        },\n\n        isConnectedOrReconnecting: function (connection) {\n            return connection.state === signalR.connectionState.connected ||\n                   connection.state === signalR.connectionState.reconnecting;\n        },\n\n        ensureReconnectingState: function (connection) {\n            if (changeState(connection,\n                        signalR.connectionState.connected,\n                        signalR.connectionState.reconnecting) === true) {\n                $(connection).triggerHandler(events.onReconnecting);\n            }\n            return connection.state === signalR.connectionState.reconnecting;\n        },\n\n        clearReconnectTimeout: function (connection) {\n            if (connection && connection._.reconnectTimeout) {\n                window.clearTimeout(connection._.reconnectTimeout);\n                delete connection._.reconnectTimeout;\n            }\n        },\n\n        verifyLastActive: function (connection) {\n            if (new Date().getTime() - connection._.lastActiveAt >= connection.reconnectWindow) {\n                var message = signalR._.format(signalR.resources.reconnectWindowTimeout, new Date(connection._.lastActiveAt), connection.reconnectWindow);\n                connection.log(message);\n                $(connection).triggerHandler(events.onError, [signalR._.error(message, /* source */ \"TimeoutException\")]);\n                connection.stop(/* async */ false, /* notifyServer */ false);\n                return false;\n            }\n\n            return true;\n        },\n\n        reconnect: function (connection, transportName) {\n            var transport = signalR.transports[transportName];\n\n            // We should only set a reconnectTimeout if we are currently connected\n            // and a reconnectTimeout isn't already set.\n            if (transportLogic.isConnectedOrReconnecting(connection) && !connection._.reconnectTimeout) {\n                // Need to verify before the setTimeout occurs because an application sleep could occur during the setTimeout duration.\n                if (!transportLogic.verifyLastActive(connection)) {\n                    return;\n                }\n\n                connection._.reconnectTimeout = window.setTimeout(function () {\n                    if (!transportLogic.verifyLastActive(connection)) {\n                        return;\n                    }\n\n                    transport.stop(connection);\n\n                    if (transportLogic.ensureReconnectingState(connection)) {\n                        connection.log(transportName + \" reconnecting.\");\n                        transport.start(connection);\n                    }\n                }, connection.reconnectDelay);\n            }\n        },\n\n        handleParseFailure: function (connection, result, error, onFailed, context) {\n            var wrappedError = signalR._.transportError(\n                signalR._.format(signalR.resources.parseFailed, result),\n                connection.transport,\n                error,\n                context);\n\n            // If we're in the initialization phase trigger onFailed, otherwise stop the connection.\n            if (onFailed && onFailed(wrappedError)) {\n                connection.log(\"Failed to parse server response while attempting to connect.\");\n            } else {\n                $(connection).triggerHandler(events.onError, [wrappedError]);\n                connection.stop();\n            }\n        },\n\n        initHandler: function (connection) {\n            return new InitHandler(connection);\n        },\n\n        foreverFrame: {\n            count: 0,\n            connections: {}\n        }\n    };\n\n}(window.jQuery, window));\n/* jquery.signalR.transports.webSockets.js */\n// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n\n/*global window:false */\n/// <reference path=\"jquery.signalR.transports.common.js\" />\n\n(function ($, window, undefined) {\n\n    var signalR = $.signalR,\n        events = $.signalR.events,\n        changeState = $.signalR.changeState,\n        transportLogic = signalR.transports._logic;\n\n    signalR.transports.webSockets = {\n        name: \"webSockets\",\n\n        supportsKeepAlive: function () {\n            return true;\n        },\n\n        send: function (connection, data) {\n            var payload = transportLogic.stringifySend(connection, data);\n\n            try {\n                connection.socket.send(payload);\n            } catch (ex) {\n                $(connection).triggerHandler(events.onError,\n                    [signalR._.transportError(\n                        signalR.resources.webSocketsInvalidState,\n                        connection.transport,\n                        ex,\n                        connection.socket\n                    ),\n                    data]);\n            }\n        },\n\n        start: function (connection, onSuccess, onFailed) {\n            var url,\n                opened = false,\n                that = this,\n                reconnecting = !onSuccess,\n                $connection = $(connection);\n\n            if (!window.WebSocket) {\n                onFailed();\n                return;\n            }\n\n            if (!connection.socket) {\n                if (connection.webSocketServerUrl) {\n                    url = connection.webSocketServerUrl;\n                } else {\n                    url = connection.wsProtocol + connection.host;\n                }\n\n                url += transportLogic.getUrl(connection, this.name, reconnecting);\n\n                connection.log(\"Connecting to websocket endpoint '\" + url + \"'.\");\n                connection.socket = new window.WebSocket(url);\n\n                connection.socket.onopen = function () {\n                    opened = true;\n                    connection.log(\"Websocket opened.\");\n\n                    transportLogic.clearReconnectTimeout(connection);\n\n                    if (changeState(connection,\n                                    signalR.connectionState.reconnecting,\n                                    signalR.connectionState.connected) === true) {\n                        $connection.triggerHandler(events.onReconnect);\n                    }\n                };\n\n                connection.socket.onclose = function (event) {\n                    var error;\n\n                    // Only handle a socket close if the close is from the current socket.\n                    // Sometimes on disconnect the server will push down an onclose event\n                    // to an expired socket.\n\n                    if (this === connection.socket) {\n                        if (opened && typeof event.wasClean !== \"undefined\" && event.wasClean === false) {\n                            // Ideally this would use the websocket.onerror handler (rather than checking wasClean in onclose) but\n                            // I found in some circumstances Chrome won't call onerror. This implementation seems to work on all browsers.\n                            error = signalR._.transportError(\n                                signalR.resources.webSocketClosed,\n                                connection.transport,\n                                event);\n\n                            connection.log(\"Unclean disconnect from websocket: \" + (event.reason || \"[no reason given].\"));\n                        } else {\n                            connection.log(\"Websocket closed.\");\n                        }\n\n                        if (!onFailed || !onFailed(error)) {\n                            if (error) {\n                                $(connection).triggerHandler(events.onError, [error]);\n                            }\n\n                            that.reconnect(connection);\n                        }\n                    }\n                };\n\n                connection.socket.onmessage = function (event) {\n                    var data;\n\n                    try {\n                        data = connection._parseResponse(event.data);\n                    }\n                    catch (error) {\n                        transportLogic.handleParseFailure(connection, event.data, error, onFailed, event);\n                        return;\n                    }\n\n                    if (data) {\n                        // data.M is PersistentResponse.Messages\n                        if ($.isEmptyObject(data) || data.M) {\n                            transportLogic.processMessages(connection, data, onSuccess);\n                        } else {\n                            // For websockets we need to trigger onReceived\n                            // for callbacks to outgoing hub calls.\n                            transportLogic.triggerReceived(connection, data);\n                        }\n                    }\n                };\n            }\n        },\n\n        reconnect: function (connection) {\n            transportLogic.reconnect(connection, this.name);\n        },\n\n        lostConnection: function (connection) {\n            this.reconnect(connection);\n        },\n\n        stop: function (connection) {\n            // Don't trigger a reconnect after stopping\n            transportLogic.clearReconnectTimeout(connection);\n\n            if (connection.socket) {\n                connection.log(\"Closing the Websocket.\");\n                connection.socket.close();\n                connection.socket = null;\n            }\n        },\n\n        abort: function (connection, async) {\n            transportLogic.ajaxAbort(connection, async);\n        }\n    };\n\n}(window.jQuery, window));\n/* jquery.signalR.transports.serverSentEvents.js */\n// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n\n/*global window:false */\n/// <reference path=\"jquery.signalR.transports.common.js\" />\n\n(function ($, window, undefined) {\n\n    var signalR = $.signalR,\n        events = $.signalR.events,\n        changeState = $.signalR.changeState,\n        transportLogic = signalR.transports._logic,\n        clearReconnectAttemptTimeout = function (connection) {\n            window.clearTimeout(connection._.reconnectAttemptTimeoutHandle);\n            delete connection._.reconnectAttemptTimeoutHandle;\n        };\n\n    signalR.transports.serverSentEvents = {\n        name: \"serverSentEvents\",\n\n        supportsKeepAlive: function () {\n            return true;\n        },\n\n        timeOut: 3000,\n\n        start: function (connection, onSuccess, onFailed) {\n            var that = this,\n                opened = false,\n                $connection = $(connection),\n                reconnecting = !onSuccess,\n                url;\n\n            if (connection.eventSource) {\n                connection.log(\"The connection already has an event source. Stopping it.\");\n                connection.stop();\n            }\n\n            if (!window.EventSource) {\n                if (onFailed) {\n                    connection.log(\"This browser doesn't support SSE.\");\n                    onFailed();\n                }\n                return;\n            }\n\n            url = transportLogic.getUrl(connection, this.name, reconnecting);\n\n            try {\n                connection.log(\"Attempting to connect to SSE endpoint '\" + url + \"'.\");\n                connection.eventSource = new window.EventSource(url, { withCredentials: connection.withCredentials });\n            }\n            catch (e) {\n                connection.log(\"EventSource failed trying to connect with error \" + e.Message + \".\");\n                if (onFailed) {\n                    // The connection failed, call the failed callback\n                    onFailed();\n                } else {\n                    $connection.triggerHandler(events.onError, [signalR._.transportError(signalR.resources.eventSourceFailedToConnect, connection.transport, e)]);\n                    if (reconnecting) {\n                        // If we were reconnecting, rather than doing initial connect, then try reconnect again\n                        that.reconnect(connection);\n                    }\n                }\n                return;\n            }\n\n            if (reconnecting) {\n                connection._.reconnectAttemptTimeoutHandle = window.setTimeout(function () {\n                    if (opened === false) {\n                        // If we're reconnecting and the event source is attempting to connect,\n                        // don't keep retrying. This causes duplicate connections to spawn.\n                        if (connection.eventSource.readyState !== window.EventSource.OPEN) {\n                            // If we were reconnecting, rather than doing initial connect, then try reconnect again\n                            that.reconnect(connection);\n                        }\n                    }\n                },\n                that.timeOut);\n            }\n\n            connection.eventSource.addEventListener(\"open\", function (e) {\n                connection.log(\"EventSource connected.\");\n\n                clearReconnectAttemptTimeout(connection);\n                transportLogic.clearReconnectTimeout(connection);\n\n                if (opened === false) {\n                    opened = true;\n\n                    if (changeState(connection,\n                                         signalR.connectionState.reconnecting,\n                                         signalR.connectionState.connected) === true) {\n                        $connection.triggerHandler(events.onReconnect);\n                    }\n                }\n            }, false);\n\n            connection.eventSource.addEventListener(\"message\", function (e) {\n                var res;\n\n                // process messages\n                if (e.data === \"initialized\") {\n                    return;\n                }\n\n                try {\n                    res = connection._parseResponse(e.data);\n                }\n                catch (error) {\n                    transportLogic.handleParseFailure(connection, e.data, error, onFailed, e);\n                    return;\n                }\n\n                transportLogic.processMessages(connection, res, onSuccess);\n            }, false);\n\n            connection.eventSource.addEventListener(\"error\", function (e) {\n                var error = signalR._.transportError(\n                    signalR.resources.eventSourceError,\n                    connection.transport,\n                    e);\n\n                // Only handle an error if the error is from the current Event Source.\n                // Sometimes on disconnect the server will push down an error event\n                // to an expired Event Source.\n                if (this !== connection.eventSource) {\n                    return;\n                }\n\n                if (onFailed && onFailed(error)) {\n                    return;\n                }\n\n                connection.log(\"EventSource readyState: \" + connection.eventSource.readyState + \".\");\n\n                if (e.eventPhase === window.EventSource.CLOSED) {\n                    // We don't use the EventSource's native reconnect function as it\n                    // doesn't allow us to change the URL when reconnecting. We need\n                    // to change the URL to not include the /connect suffix, and pass\n                    // the last message id we received.\n                    connection.log(\"EventSource reconnecting due to the server connection ending.\");\n                    that.reconnect(connection);\n                } else {\n                    // connection error\n                    connection.log(\"EventSource error.\");\n                    $connection.triggerHandler(events.onError, [error]);\n                }\n            }, false);\n        },\n\n        reconnect: function (connection) {\n            transportLogic.reconnect(connection, this.name);\n        },\n\n        lostConnection: function (connection) {\n            this.reconnect(connection);\n        },\n\n        send: function (connection, data) {\n            transportLogic.ajaxSend(connection, data);\n        },\n\n        stop: function (connection) {\n            // Don't trigger a reconnect after stopping\n            clearReconnectAttemptTimeout(connection);\n            transportLogic.clearReconnectTimeout(connection);\n\n            if (connection && connection.eventSource) {\n                connection.log(\"EventSource calling close().\");\n                connection.eventSource.close();\n                connection.eventSource = null;\n                delete connection.eventSource;\n            }\n        },\n\n        abort: function (connection, async) {\n            transportLogic.ajaxAbort(connection, async);\n        }\n    };\n\n}(window.jQuery, window));\n/* jquery.signalR.transports.foreverFrame.js */\n// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n\n/*global window:false */\n/// <reference path=\"jquery.signalR.transports.common.js\" />\n\n(function ($, window, undefined) {\n\n    var signalR = $.signalR,\n        events = $.signalR.events,\n        changeState = $.signalR.changeState,\n        transportLogic = signalR.transports._logic,\n        createFrame = function () {\n            var frame = window.document.createElement(\"iframe\");\n            frame.setAttribute(\"style\", \"position:absolute;top:0;left:0;width:0;height:0;visibility:hidden;\");\n            return frame;\n        },\n        // Used to prevent infinite loading icon spins in older versions of ie\n        // We build this object inside a closure so we don't pollute the rest of   \n        // the foreverFrame transport with unnecessary functions/utilities.\n        loadPreventer = (function () {\n            var loadingFixIntervalId = null,\n                loadingFixInterval = 1000,\n                attachedTo = 0;\n\n            return {\n                prevent: function () {\n                    // Prevent additional iframe removal procedures from newer browsers\n                    if (signalR._.ieVersion <= 8) {\n                        // We only ever want to set the interval one time, so on the first attachedTo\n                        if (attachedTo === 0) {\n                            // Create and destroy iframe every 3 seconds to prevent loading icon, super hacky\n                            loadingFixIntervalId = window.setInterval(function () {\n                                var tempFrame = createFrame();\n\n                                window.document.body.appendChild(tempFrame);\n                                window.document.body.removeChild(tempFrame);\n\n                                tempFrame = null;\n                            }, loadingFixInterval);\n                        }\n\n                        attachedTo++;\n                    }\n                },\n                cancel: function () {\n                    // Only clear the interval if there's only one more object that the loadPreventer is attachedTo\n                    if (attachedTo === 1) {\n                        window.clearInterval(loadingFixIntervalId);\n                    }\n\n                    if (attachedTo > 0) {\n                        attachedTo--;\n                    }\n                }\n            };\n        })();\n\n    signalR.transports.foreverFrame = {\n        name: \"foreverFrame\",\n\n        supportsKeepAlive: function () {\n            return true;\n        },\n\n        // Added as a value here so we can create tests to verify functionality\n        iframeClearThreshold: 50,\n\n        start: function (connection, onSuccess, onFailed) {\n            var that = this,\n                frameId = (transportLogic.foreverFrame.count += 1),\n                url,\n                frame = createFrame(),\n                frameLoadHandler = function () {\n                    connection.log(\"Forever frame iframe finished loading and is no longer receiving messages.\");\n                    if (!onFailed || !onFailed()) {\n                        that.reconnect(connection);\n                    }\n                };\n\n            if (window.EventSource) {\n                // If the browser supports SSE, don't use Forever Frame\n                if (onFailed) {\n                    connection.log(\"Forever Frame is not supported by SignalR on browsers with SSE support.\");\n                    onFailed();\n                }\n                return;\n            }\n\n            frame.setAttribute(\"data-signalr-connection-id\", connection.id);\n\n            // Start preventing loading icon\n            // This will only perform work if the loadPreventer is not attached to another connection.\n            loadPreventer.prevent();\n\n            // Build the url\n            url = transportLogic.getUrl(connection, this.name);\n            url += \"&frameId=\" + frameId;\n\n            // add frame to the document prior to setting URL to avoid caching issues.\n            window.document.documentElement.appendChild(frame);\n\n            connection.log(\"Binding to iframe's load event.\");\n\n            if (frame.addEventListener) {\n                frame.addEventListener(\"load\", frameLoadHandler, false);\n            } else if (frame.attachEvent) {\n                frame.attachEvent(\"onload\", frameLoadHandler);\n            }\n\n            frame.src = url;\n            transportLogic.foreverFrame.connections[frameId] = connection;\n\n            connection.frame = frame;\n            connection.frameId = frameId;\n\n            if (onSuccess) {\n                connection.onSuccess = function () {\n                    connection.log(\"Iframe transport started.\");\n                    onSuccess();\n                };\n            }\n        },\n\n        reconnect: function (connection) {\n            var that = this;\n\n            // Need to verify connection state and verify before the setTimeout occurs because an application sleep could occur during the setTimeout duration.\n            if (transportLogic.isConnectedOrReconnecting(connection) && transportLogic.verifyLastActive(connection)) {\n                window.setTimeout(function () {\n                    // Verify that we're ok to reconnect.\n                    if (!transportLogic.verifyLastActive(connection)) {\n                        return;\n                    }\n\n                    if (connection.frame && transportLogic.ensureReconnectingState(connection)) {\n                        var frame = connection.frame,\n                            src = transportLogic.getUrl(connection, that.name, true) + \"&frameId=\" + connection.frameId;\n                        connection.log(\"Updating iframe src to '\" + src + \"'.\");\n                        frame.src = src;\n                    }\n                }, connection.reconnectDelay);\n            }\n        },\n\n        lostConnection: function (connection) {\n            this.reconnect(connection);\n        },\n\n        send: function (connection, data) {\n            transportLogic.ajaxSend(connection, data);\n        },\n\n        receive: function (connection, data) {\n            var cw,\n                body,\n                response;\n\n            if (connection.json !== connection._originalJson) {\n                // If there's a custom JSON parser configured then serialize the object\n                // using the original (browser) JSON parser and then deserialize it using\n                // the custom parser (connection._parseResponse does that). This is so we\n                // can easily send the response from the server as \"raw\" JSON but still \n                // support custom JSON deserialization in the browser.\n                data = connection._originalJson.stringify(data);\n            }\n\n            response = connection._parseResponse(data);\n\n            transportLogic.processMessages(connection, response, connection.onSuccess);\n\n            // Protect against connection stopping from a callback trigger within the processMessages above.\n            if (connection.state === $.signalR.connectionState.connected) {\n                // Delete the script & div elements\n                connection.frameMessageCount = (connection.frameMessageCount || 0) + 1;\n                if (connection.frameMessageCount > signalR.transports.foreverFrame.iframeClearThreshold) {\n                    connection.frameMessageCount = 0;\n                    cw = connection.frame.contentWindow || connection.frame.contentDocument;\n                    if (cw && cw.document && cw.document.body) {\n                        body = cw.document.body;\n\n                        // Remove all the child elements from the iframe's body to conserver memory\n                        while (body.firstChild) {\n                            body.removeChild(body.firstChild);\n                        }\n                    }\n                }\n            }\n        },\n\n        stop: function (connection) {\n            var cw = null;\n\n            // Stop attempting to prevent loading icon\n            loadPreventer.cancel();\n\n            if (connection.frame) {\n                if (connection.frame.stop) {\n                    connection.frame.stop();\n                } else {\n                    try {\n                        cw = connection.frame.contentWindow || connection.frame.contentDocument;\n                        if (cw.document && cw.document.execCommand) {\n                            cw.document.execCommand(\"Stop\");\n                        }\n                    }\n                    catch (e) {\n                        connection.log(\"Error occured when stopping foreverFrame transport. Message = \" + e.message + \".\");\n                    }\n                }\n\n                // Ensure the iframe is where we left it\n                if (connection.frame.parentNode === window.document.body) {\n                    window.document.body.removeChild(connection.frame);\n                }\n\n                delete transportLogic.foreverFrame.connections[connection.frameId];\n                connection.frame = null;\n                connection.frameId = null;\n                delete connection.frame;\n                delete connection.frameId;\n                delete connection.onSuccess;\n                delete connection.frameMessageCount;\n                connection.log(\"Stopping forever frame.\");\n            }\n        },\n\n        abort: function (connection, async) {\n            transportLogic.ajaxAbort(connection, async);\n        },\n\n        getConnection: function (id) {\n            return transportLogic.foreverFrame.connections[id];\n        },\n\n        started: function (connection) {\n            if (changeState(connection,\n                signalR.connectionState.reconnecting,\n                signalR.connectionState.connected) === true) {\n\n                $(connection).triggerHandler(events.onReconnect);\n            }\n        }\n    };\n\n}(window.jQuery, window));\n/* jquery.signalR.transports.longPolling.js */\n// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n\n/*global window:false */\n/// <reference path=\"jquery.signalR.transports.common.js\" />\n\n(function ($, window, undefined) {\n\n    var signalR = $.signalR,\n        events = $.signalR.events,\n        changeState = $.signalR.changeState,\n        isDisconnecting = $.signalR.isDisconnecting,\n        transportLogic = signalR.transports._logic;\n\n    signalR.transports.longPolling = {\n        name: \"longPolling\",\n\n        supportsKeepAlive: function () {\n            return false;\n        },\n\n        reconnectDelay: 3000,\n\n        start: function (connection, onSuccess, onFailed) {\n            /// <summary>Starts the long polling connection</summary>\n            /// <param name=\"connection\" type=\"signalR\">The SignalR connection to start</param>\n            var that = this,\n                fireConnect = function () {\n                    fireConnect = $.noop;\n\n                    connection.log(\"LongPolling connected.\");\n                    onSuccess();\n                },\n                tryFailConnect = function (error) {\n                    if (onFailed(error)) {\n                        connection.log(\"LongPolling failed to connect.\");\n                        return true;\n                    }\n\n                    return false;\n                },\n                privateData = connection._,\n                reconnectErrors = 0,\n                fireReconnected = function (instance) {\n                    window.clearTimeout(privateData.reconnectTimeoutId);\n                    privateData.reconnectTimeoutId = null;\n\n                    if (changeState(instance,\n                                    signalR.connectionState.reconnecting,\n                                    signalR.connectionState.connected) === true) {\n                        // Successfully reconnected!\n                        instance.log(\"Raising the reconnect event\");\n                        $(instance).triggerHandler(events.onReconnect);\n                    }\n                },\n                // 1 hour\n                maxFireReconnectedTimeout = 3600000;\n\n            if (connection.pollXhr) {\n                connection.log(\"Polling xhr requests already exists, aborting.\");\n                connection.stop();\n            }\n\n            connection.messageId = null;\n\n            privateData.reconnectTimeoutId = null;\n\n            privateData.pollTimeoutId = window.setTimeout(function () {\n                (function poll(instance, raiseReconnect) {\n                    var messageId = instance.messageId,\n                        connect = (messageId === null),\n                        reconnecting = !connect,\n                        polling = !raiseReconnect,\n                        url = transportLogic.getUrl(instance, that.name, reconnecting, polling, true /* use Post for longPolling */),\n                        postData = {};\n\n                    if (instance.messageId) {\n                        postData.messageId = instance.messageId;\n                    }\n\n                    if (instance.groupsToken) {\n                        postData.groupsToken = instance.groupsToken;\n                    }\n\n                    // If we've disconnected during the time we've tried to re-instantiate the poll then stop.\n                    if (isDisconnecting(instance) === true) {\n                        return;\n                    }\n\n                    connection.log(\"Opening long polling request to '\" + url + \"'.\");\n                    instance.pollXhr = transportLogic.ajax(connection, {\n                        xhrFields: {\n                            onprogress: function () {\n                                transportLogic.markLastMessage(connection);\n                            }\n                        },\n                        url: url,\n                        type: \"POST\",\n                        contentType: signalR._.defaultContentType,\n                        data: postData,\n                        timeout: connection._.pollTimeout,\n                        success: function (result) {\n                            var minData,\n                                delay = 0,\n                                data,\n                                shouldReconnect;\n\n                            connection.log(\"Long poll complete.\");\n\n                            // Reset our reconnect errors so if we transition into a reconnecting state again we trigger\n                            // reconnected quickly\n                            reconnectErrors = 0;\n\n                            try {\n                                // Remove any keep-alives from the beginning of the result\n                                minData = connection._parseResponse(result);\n                            }\n                            catch (error) {\n                                transportLogic.handleParseFailure(instance, result, error, tryFailConnect, instance.pollXhr);\n                                return;\n                            }\n\n                            // If there's currently a timeout to trigger reconnect, fire it now before processing messages\n                            if (privateData.reconnectTimeoutId !== null) {\n                                fireReconnected(instance);\n                            }\n\n                            if (minData) {\n                                data = transportLogic.maximizePersistentResponse(minData);\n                            }\n\n                            transportLogic.processMessages(instance, minData, fireConnect);\n\n                            if (data &&\n                                $.type(data.LongPollDelay) === \"number\") {\n                                delay = data.LongPollDelay;\n                            }\n\n                            if (isDisconnecting(instance) === true) {\n                                return;\n                            }\n\n                            shouldReconnect = data && data.ShouldReconnect;\n                            if (shouldReconnect) {\n                                // Transition into the reconnecting state\n                                // If this fails then that means that the user transitioned the connection into a invalid state in processMessages.\n                                if (!transportLogic.ensureReconnectingState(instance)) {\n                                    return;\n                                }\n                            }\n\n                            // We never want to pass a raiseReconnect flag after a successful poll.  This is handled via the error function\n                            if (delay > 0) {\n                                privateData.pollTimeoutId = window.setTimeout(function () {\n                                    poll(instance, shouldReconnect);\n                                }, delay);\n                            } else {\n                                poll(instance, shouldReconnect);\n                            }\n                        },\n\n                        error: function (data, textStatus) {\n                            var error = signalR._.transportError(signalR.resources.longPollFailed, connection.transport, data, instance.pollXhr);\n\n                            // Stop trying to trigger reconnect, connection is in an error state\n                            // If we're not in the reconnect state this will noop\n                            window.clearTimeout(privateData.reconnectTimeoutId);\n                            privateData.reconnectTimeoutId = null;\n\n                            if (textStatus === \"abort\") {\n                                connection.log(\"Aborted xhr request.\");\n                                return;\n                            }\n\n                            if (!tryFailConnect(error)) {\n\n                                // Increment our reconnect errors, we assume all errors to be reconnect errors\n                                // In the case that it's our first error this will cause Reconnect to be fired\n                                // after 1 second due to reconnectErrors being = 1.\n                                reconnectErrors++;\n\n                                if (connection.state !== signalR.connectionState.reconnecting) {\n                                    connection.log(\"An error occurred using longPolling. Status = \" + textStatus + \".  Response = \" + data.responseText + \".\");\n                                    $(instance).triggerHandler(events.onError, [error]);\n                                }\n\n                                // We check the state here to verify that we're not in an invalid state prior to verifying Reconnect.\n                                // If we're not in connected or reconnecting then the next ensureReconnectingState check will fail and will return.\n                                // Therefore we don't want to change that failure code path.\n                                if ((connection.state === signalR.connectionState.connected ||\n                                    connection.state === signalR.connectionState.reconnecting) &&\n                                    !transportLogic.verifyLastActive(connection)) {\n                                    return;\n                                }\n\n                                // Transition into the reconnecting state\n                                // If this fails then that means that the user transitioned the connection into the disconnected or connecting state within the above error handler trigger.\n                                if (!transportLogic.ensureReconnectingState(instance)) {\n                                    return;\n                                }\n\n                                // Call poll with the raiseReconnect flag as true after the reconnect delay\n                                privateData.pollTimeoutId = window.setTimeout(function () {\n                                    poll(instance, true);\n                                }, that.reconnectDelay);\n                            }\n                        }\n                    });\n\n                    // This will only ever pass after an error has occured via the poll ajax procedure.\n                    if (reconnecting && raiseReconnect === true) {\n                        // We wait to reconnect depending on how many times we've failed to reconnect.\n                        // This is essentially a heuristic that will exponentially increase in wait time before\n                        // triggering reconnected.  This depends on the \"error\" handler of Poll to cancel this \n                        // timeout if it triggers before the Reconnected event fires.\n                        // The Math.min at the end is to ensure that the reconnect timeout does not overflow.\n                        privateData.reconnectTimeoutId = window.setTimeout(function () { fireReconnected(instance); }, Math.min(1000 * (Math.pow(2, reconnectErrors) - 1), maxFireReconnectedTimeout));\n                    }\n                }(connection));\n            }, 250); // Have to delay initial poll so Chrome doesn't show loader spinner in tab\n        },\n\n        lostConnection: function (connection) {\n            if (connection.pollXhr) {\n                connection.pollXhr.abort(\"lostConnection\");\n            }\n        },\n\n        send: function (connection, data) {\n            transportLogic.ajaxSend(connection, data);\n        },\n\n        stop: function (connection) {\n            /// <summary>Stops the long polling connection</summary>\n            /// <param name=\"connection\" type=\"signalR\">The SignalR connection to stop</param>\n\n            window.clearTimeout(connection._.pollTimeoutId);\n            window.clearTimeout(connection._.reconnectTimeoutId);\n\n            delete connection._.pollTimeoutId;\n            delete connection._.reconnectTimeoutId;\n\n            if (connection.pollXhr) {\n                connection.pollXhr.abort();\n                connection.pollXhr = null;\n                delete connection.pollXhr;\n            }\n        },\n\n        abort: function (connection, async) {\n            transportLogic.ajaxAbort(connection, async);\n        }\n    };\n\n}(window.jQuery, window));\n/* jquery.signalR.hubs.js */\n// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n\n/*global window:false */\n/// <reference path=\"jquery.signalR.core.js\" />\n\n(function ($, window, undefined) {\n\n    var eventNamespace = \".hubProxy\",\n        signalR = $.signalR;\n\n    function makeEventName(event) {\n        return event + eventNamespace;\n    }\n\n    // Equivalent to Array.prototype.map\n    function map(arr, fun, thisp) {\n        var i,\n            length = arr.length,\n            result = [];\n        for (i = 0; i < length; i += 1) {\n            if (arr.hasOwnProperty(i)) {\n                result[i] = fun.call(thisp, arr[i], i, arr);\n            }\n        }\n        return result;\n    }\n\n    function getArgValue(a) {\n        return $.isFunction(a) ? null : ($.type(a) === \"undefined\" ? null : a);\n    }\n\n    function hasMembers(obj) {\n        for (var key in obj) {\n            // If we have any properties in our callback map then we have callbacks and can exit the loop via return\n            if (obj.hasOwnProperty(key)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function clearInvocationCallbacks(connection, error) {\n        /// <param name=\"connection\" type=\"hubConnection\" />\n        var callbacks = connection._.invocationCallbacks,\n            callback;\n\n        if (hasMembers(callbacks)) {\n            connection.log(\"Clearing hub invocation callbacks with error: \" + error + \".\");\n        }\n\n        // Reset the callback cache now as we have a local var referencing it\n        connection._.invocationCallbackId = 0;\n        delete connection._.invocationCallbacks;\n        connection._.invocationCallbacks = {};\n\n        // Loop over the callbacks and invoke them.\n        // We do this using a local var reference and *after* we've cleared the cache\n        // so that if a fail callback itself tries to invoke another method we don't \n        // end up with its callback in the list we're looping over.\n        for (var callbackId in callbacks) {\n            callback = callbacks[callbackId];\n            callback.method.call(callback.scope, { E: error });\n        }\n    }\n\n    // hubProxy\n    function hubProxy(hubConnection, hubName) {\n        /// <summary>\n        ///     Creates a new proxy object for the given hub connection that can be used to invoke\n        ///     methods on server hubs and handle client method invocation requests from the server.\n        /// </summary>\n        return new hubProxy.fn.init(hubConnection, hubName);\n    }\n\n    hubProxy.fn = hubProxy.prototype = {\n        init: function (connection, hubName) {\n            this.state = {};\n            this.connection = connection;\n            this.hubName = hubName;\n            this._ = {\n                callbackMap: {}\n            };\n        },\n\n        constructor: hubProxy,\n\n        hasSubscriptions: function () {\n            return hasMembers(this._.callbackMap);\n        },\n\n        on: function (eventName, callback) {\n            /// <summary>Wires up a callback to be invoked when a invocation request is received from the server hub.</summary>\n            /// <param name=\"eventName\" type=\"String\">The name of the hub event to register the callback for.</param>\n            /// <param name=\"callback\" type=\"Function\">The callback to be invoked.</param>\n            var that = this,\n                callbackMap = that._.callbackMap;\n\n            // Normalize the event name to lowercase\n            eventName = eventName.toLowerCase();\n\n            // If there is not an event registered for this callback yet we want to create its event space in the callback map.\n            if (!callbackMap[eventName]) {\n                callbackMap[eventName] = {};\n            }\n\n            // Map the callback to our encompassed function\n            callbackMap[eventName][callback] = function (e, data) {\n                callback.apply(that, data);\n            };\n\n            $(that).bind(makeEventName(eventName), callbackMap[eventName][callback]);\n\n            return that;\n        },\n\n        off: function (eventName, callback) {\n            /// <summary>Removes the callback invocation request from the server hub for the given event name.</summary>\n            /// <param name=\"eventName\" type=\"String\">The name of the hub event to unregister the callback for.</param>\n            /// <param name=\"callback\" type=\"Function\">The callback to be invoked.</param>\n            var that = this,\n                callbackMap = that._.callbackMap,\n                callbackSpace;\n\n            // Normalize the event name to lowercase\n            eventName = eventName.toLowerCase();\n\n            callbackSpace = callbackMap[eventName];\n\n            // Verify that there is an event space to unbind\n            if (callbackSpace) {\n                // Only unbind if there's an event bound with eventName and a callback with the specified callback\n                if (callbackSpace[callback]) {\n                    $(that).unbind(makeEventName(eventName), callbackSpace[callback]);\n\n                    // Remove the callback from the callback map\n                    delete callbackSpace[callback];\n\n                    // Check if there are any members left on the event, if not we need to destroy it.\n                    if (!hasMembers(callbackSpace)) {\n                        delete callbackMap[eventName];\n                    }\n                } else if (!callback) { // Check if we're removing the whole event and we didn't error because of an invalid callback\n                    $(that).unbind(makeEventName(eventName));\n\n                    delete callbackMap[eventName];\n                }\n            }\n\n            return that;\n        },\n\n        invoke: function (methodName) {\n            /// <summary>Invokes a server hub method with the given arguments.</summary>\n            /// <param name=\"methodName\" type=\"String\">The name of the server hub method.</param>\n\n            var that = this,\n                connection = that.connection,\n                args = $.makeArray(arguments).slice(1),\n                argValues = map(args, getArgValue),\n                data = { H: that.hubName, M: methodName, A: argValues, I: connection._.invocationCallbackId },\n                d = $.Deferred(),\n                callback = function (minResult) {\n                    var result = that._maximizeHubResponse(minResult),\n                        source,\n                        error;\n\n                    // Update the hub state\n                    $.extend(that.state, result.State);\n\n                    if (result.Progress) {\n                        if (d.notifyWith) {\n                            // Progress is only supported in jQuery 1.7+\n                            d.notifyWith(that, [result.Progress.Data]);\n                        } else if(!connection._.progressjQueryVersionLogged) {\n                            connection.log(\"A hub method invocation progress update was received but the version of jQuery in use (\" + $.prototype.jquery + \") does not support progress updates. Upgrade to jQuery 1.7+ to receive progress notifications.\");\n                            connection._.progressjQueryVersionLogged = true;\n                        }\n                    } else if (result.Error) {\n                        // Server hub method threw an exception, log it & reject the deferred\n                        if (result.StackTrace) {\n                            connection.log(result.Error + \"\\n\" + result.StackTrace + \".\");\n                        }\n\n                        // result.ErrorData is only set if a HubException was thrown\n                        source = result.IsHubException ? \"HubException\" : \"Exception\";\n                        error = signalR._.error(result.Error, source);\n                        error.data = result.ErrorData;\n\n                        connection.log(that.hubName + \".\" + methodName + \" failed to execute. Error: \" + error.message);\n                        d.rejectWith(that, [error]);\n                    } else {\n                        // Server invocation succeeded, resolve the deferred\n                        connection.log(\"Invoked \" + that.hubName + \".\" + methodName);\n                        d.resolveWith(that, [result.Result]);\n                    }\n                };\n\n            connection._.invocationCallbacks[connection._.invocationCallbackId.toString()] = { scope: that, method: callback };\n            connection._.invocationCallbackId += 1;\n\n            if (!$.isEmptyObject(that.state)) {\n                data.S = that.state;\n            }\n\n            connection.log(\"Invoking \" + that.hubName + \".\" + methodName);\n            connection.send(data);\n\n            return d.promise();\n        },\n\n        _maximizeHubResponse: function (minHubResponse) {\n            return {\n                State: minHubResponse.S,\n                Result: minHubResponse.R,\n                Progress: minHubResponse.P ? {\n                    Id: minHubResponse.P.I,\n                    Data: minHubResponse.P.D\n                } : null,\n                Id: minHubResponse.I,\n                IsHubException: minHubResponse.H,\n                Error: minHubResponse.E,\n                StackTrace: minHubResponse.T,\n                ErrorData: minHubResponse.D\n            };\n        }\n    };\n\n    hubProxy.fn.init.prototype = hubProxy.fn;\n\n    // hubConnection\n    function hubConnection(url, options) {\n        /// <summary>Creates a new hub connection.</summary>\n        /// <param name=\"url\" type=\"String\">[Optional] The hub route url, defaults to \"/signalr\".</param>\n        /// <param name=\"options\" type=\"Object\">[Optional] Settings to use when creating the hubConnection.</param>\n        var settings = {\n            qs: null,\n            logging: false,\n            useDefaultPath: true\n        };\n\n        $.extend(settings, options);\n\n        if (!url || settings.useDefaultPath) {\n            url = (url || \"\") + \"/signalr\";\n        }\n        return new hubConnection.fn.init(url, settings);\n    }\n\n    hubConnection.fn = hubConnection.prototype = $.connection();\n\n    hubConnection.fn.init = function (url, options) {\n        var settings = {\n                qs: null,\n                logging: false,\n                useDefaultPath: true\n            },\n            connection = this;\n\n        $.extend(settings, options);\n\n        // Call the base constructor\n        $.signalR.fn.init.call(connection, url, settings.qs, settings.logging);\n\n        // Object to store hub proxies for this connection\n        connection.proxies = {};\n\n        connection._.invocationCallbackId = 0;\n        connection._.invocationCallbacks = {};\n\n        // Wire up the received handler\n        connection.received(function (minData) {\n            var data, proxy, dataCallbackId, callback, hubName, eventName;\n            if (!minData) {\n                return;\n            }\n\n            // We have to handle progress updates first in order to ensure old clients that receive\n            // progress updates enter the return value branch and then no-op when they can't find\n            // the callback in the map (because the minData.I value will not be a valid callback ID)\n            if (typeof (minData.P) !== \"undefined\") {\n                // Process progress notification\n                dataCallbackId = minData.P.I.toString();\n                callback = connection._.invocationCallbacks[dataCallbackId];\n                if (callback) {\n                    callback.method.call(callback.scope, minData);\n                }\n            } else if (typeof (minData.I) !== \"undefined\") {\n                // We received the return value from a server method invocation, look up callback by id and call it\n                dataCallbackId = minData.I.toString();\n                callback = connection._.invocationCallbacks[dataCallbackId];\n                if (callback) {\n                    // Delete the callback from the proxy\n                    connection._.invocationCallbacks[dataCallbackId] = null;\n                    delete connection._.invocationCallbacks[dataCallbackId];\n\n                    // Invoke the callback\n                    callback.method.call(callback.scope, minData);\n                }\n            } else {\n                data = this._maximizeClientHubInvocation(minData);\n\n                // We received a client invocation request, i.e. broadcast from server hub\n                connection.log(\"Triggering client hub event '\" + data.Method + \"' on hub '\" + data.Hub + \"'.\");\n\n                // Normalize the names to lowercase\n                hubName = data.Hub.toLowerCase();\n                eventName = data.Method.toLowerCase();\n\n                // Trigger the local invocation event\n                proxy = this.proxies[hubName];\n\n                // Update the hub state\n                $.extend(proxy.state, data.State);\n                $(proxy).triggerHandler(makeEventName(eventName), [data.Args]);\n            }\n        });\n\n        connection.error(function (errData, origData) {\n            var callbackId, callback;\n\n            if (!origData) {\n                // No original data passed so this is not a send error\n                return;\n            }\n\n            callbackId = origData.I;\n            callback = connection._.invocationCallbacks[callbackId];\n\n            // Verify that there is a callback bound (could have been cleared)\n            if (callback) {\n                // Delete the callback\n                connection._.invocationCallbacks[callbackId] = null;\n                delete connection._.invocationCallbacks[callbackId];\n\n                // Invoke the callback with an error to reject the promise\n                callback.method.call(callback.scope, { E: errData });\n            }\n        });\n\n        connection.reconnecting(function () {\n            if (connection.transport && connection.transport.name === \"webSockets\") {\n                clearInvocationCallbacks(connection, \"Connection started reconnecting before invocation result was received.\");\n            }\n        });\n\n        connection.disconnected(function () {\n            clearInvocationCallbacks(connection, \"Connection was disconnected before invocation result was received.\");\n        });\n    };\n\n    hubConnection.fn._maximizeClientHubInvocation = function (minClientHubInvocation) {\n        return {\n            Hub: minClientHubInvocation.H,\n            Method: minClientHubInvocation.M,\n            Args: minClientHubInvocation.A,\n            State: minClientHubInvocation.S\n        };\n    };\n\n    hubConnection.fn._registerSubscribedHubs = function () {\n        /// <summary>\n        ///     Sets the starting event to loop through the known hubs and register any new hubs \n        ///     that have been added to the proxy.\n        /// </summary>\n        var connection = this;\n\n        if (!connection._subscribedToHubs) {\n            connection._subscribedToHubs = true;\n            connection.starting(function () {\n                // Set the connection's data object with all the hub proxies with active subscriptions.\n                // These proxies will receive notifications from the server.\n                var subscribedHubs = [];\n\n                $.each(connection.proxies, function (key) {\n                    if (this.hasSubscriptions()) {\n                        subscribedHubs.push({ name: key });\n                        connection.log(\"Client subscribed to hub '\" + key + \"'.\");\n                    }\n                });\n\n                if (subscribedHubs.length === 0) {\n                    connection.log(\"No hubs have been subscribed to.  The client will not receive data from hubs.  To fix, declare at least one client side function prior to connection start for each hub you wish to subscribe to.\");\n                }\n\n                connection.data = connection.json.stringify(subscribedHubs);\n            });\n        }\n    };\n\n    hubConnection.fn.createHubProxy = function (hubName) {\n        /// <summary>\n        ///     Creates a new proxy object for the given hub connection that can be used to invoke\n        ///     methods on server hubs and handle client method invocation requests from the server.\n        /// </summary>\n        /// <param name=\"hubName\" type=\"String\">\n        ///     The name of the hub on the server to create the proxy for.\n        /// </param>\n\n        // Normalize the name to lowercase\n        hubName = hubName.toLowerCase();\n\n        var proxy = this.proxies[hubName];\n        if (!proxy) {\n            proxy = hubProxy(this, hubName);\n            this.proxies[hubName] = proxy;\n        }\n\n        this._registerSubscribedHubs();\n\n        return proxy;\n    };\n\n    hubConnection.fn.init.prototype = hubConnection.fn;\n\n    $.hubConnection = hubConnection;\n\n}(window.jQuery, window));\n/* jquery.signalR.version.js */\n// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.md in the project root for license information.\n\n/*global window:false */\n/// <reference path=\"jquery.signalR.core.js\" />\n(function ($, undefined) {\n    $.signalR.version = \"2.2.0\";\n}(window.jQuery));\n","import * as signalr from \"signalr\";\r\nimport * as byteBuffer from \"bytebuffer\";\r\n // let byteBuffer=require(\"bytebuffer\");\r\n\r\nexport class OtherTreeClient {\r\n    constructor(url, token) {\r\n        this.token = token;\r\n        this.url=url;\r\n        this.tempBuffer = byteBuffer.ByteBuffer.allocate(1024);\r\n        this.signalr=signalr;\r\n    }\r\n    connect(){\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}